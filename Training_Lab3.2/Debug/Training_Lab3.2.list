
Training_Lab3.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800038c  0800038c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800038c  0800038c  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  0800038c  0800038c  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800038c  0800038c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800038c  0800038c  0000138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000390  08000390  00001390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08000394  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000010  080003a4  00002010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080003a4  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000043b  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000158  00000000  00000000  0000247b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  000025d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfde  00000000  00000000  0000265b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000670  00000000  00000000  00010639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050bed  00000000  00000000  00010ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00061896  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  000618dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00061960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000374 	.word	0x08000374

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08000374 	.word	0x08000374

080001d8 <vdg_UART_TxString>:
#include "stm32f4xx.h"

char stringOut[15] = "Hello world!\n";
const uint32_t THRESHOLD = 1333333;

void vdg_UART_TxString(char strOut[]) {
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	for (uint8_t idx = 0; strOut[idx] != '\0'; idx++) {
 80001e0:	2300      	movs	r3, #0
 80001e2:	73fb      	strb	r3, [r7, #15]
 80001e4:	e00f      	b.n	8000206 <vdg_UART_TxString+0x2e>
		while((USART2->SR & USART_SR_TXE) == 0);
 80001e6:	bf00      	nop
 80001e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000220 <vdg_UART_TxString+0x48>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0f9      	beq.n	80001e8 <vdg_UART_TxString+0x10>
		USART2->DR = strOut[idx];
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	781a      	ldrb	r2, [r3, #0]
 80001fc:	4b08      	ldr	r3, [pc, #32]	@ (8000220 <vdg_UART_TxString+0x48>)
 80001fe:	605a      	str	r2, [r3, #4]
	for (uint8_t idx = 0; strOut[idx] != '\0'; idx++) {
 8000200:	7bfb      	ldrb	r3, [r7, #15]
 8000202:	3301      	adds	r3, #1
 8000204:	73fb      	strb	r3, [r7, #15]
 8000206:	7bfb      	ldrb	r3, [r7, #15]
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d1e9      	bne.n	80001e6 <vdg_UART_TxString+0xe>
	}
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	40004400 	.word	0x40004400

08000224 <main>:

int main(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800022a:	4b26      	ldr	r3, [pc, #152]	@ (80002c4 <main+0xa0>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022e:	4a25      	ldr	r2, [pc, #148]	@ (80002c4 <main+0xa0>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000236:	4b23      	ldr	r3, [pc, #140]	@ (80002c4 <main+0xa0>)
 8000238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800023a:	4a22      	ldr	r2, [pc, #136]	@ (80002c4 <main+0xa0>)
 800023c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000240:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);
 8000242:	4b21      	ldr	r3, [pc, #132]	@ (80002c8 <main+0xa4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a20      	ldr	r2, [pc, #128]	@ (80002c8 <main+0xa4>)
 8000248:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800024c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER2_Pos) + (0b10 << GPIO_MODER_MODER3_Pos);
 800024e:	4b1e      	ldr	r3, [pc, #120]	@ (80002c8 <main+0xa4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a1d      	ldr	r2, [pc, #116]	@ (80002c8 <main+0xa4>)
 8000254:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000258:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 800025a:	4b1b      	ldr	r3, [pc, #108]	@ (80002c8 <main+0xa4>)
 800025c:	6a1b      	ldr	r3, [r3, #32]
 800025e:	4a1a      	ldr	r2, [pc, #104]	@ (80002c8 <main+0xa4>)
 8000260:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000264:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL2_Pos) + (0b0111 << GPIO_AFRL_AFSEL3_Pos);
 8000266:	4b18      	ldr	r3, [pc, #96]	@ (80002c8 <main+0xa4>)
 8000268:	6a1b      	ldr	r3, [r3, #32]
 800026a:	4a17      	ldr	r2, [pc, #92]	@ (80002c8 <main+0xa4>)
 800026c:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000270:	6213      	str	r3, [r2, #32]

	USART2->CR1 |= USART_CR1_UE;
 8000272:	4b16      	ldr	r3, [pc, #88]	@ (80002cc <main+0xa8>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	4a15      	ldr	r2, [pc, #84]	@ (80002cc <main+0xa8>)
 8000278:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800027c:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~ USART_CR1_M;
 800027e:	4b13      	ldr	r3, [pc, #76]	@ (80002cc <main+0xa8>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	4a12      	ldr	r2, [pc, #72]	@ (80002cc <main+0xa8>)
 8000284:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000288:	60d3      	str	r3, [r2, #12]
	USART2->CR2 &= ~ USART_CR2_STOP;
 800028a:	4b10      	ldr	r3, [pc, #64]	@ (80002cc <main+0xa8>)
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	4a0f      	ldr	r2, [pc, #60]	@ (80002cc <main+0xa8>)
 8000290:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000294:	6113      	str	r3, [r2, #16]
	USART2->BRR = 139;
 8000296:	4b0d      	ldr	r3, [pc, #52]	@ (80002cc <main+0xa8>)
 8000298:	228b      	movs	r2, #139	@ 0x8b
 800029a:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;
 800029c:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <main+0xa8>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	@ (80002cc <main+0xa8>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	60d3      	str	r3, [r2, #12]

	while(1) {
		vdg_UART_TxString(stringOut);
 80002a8:	4809      	ldr	r0, [pc, #36]	@ (80002d0 <main+0xac>)
 80002aa:	f7ff ff95 	bl	80001d8 <vdg_UART_TxString>
		for (uint32_t iter = 0; iter < THRESHOLD; iter++) {
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	e002      	b.n	80002ba <main+0x96>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3301      	adds	r3, #1
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	4a06      	ldr	r2, [pc, #24]	@ (80002d4 <main+0xb0>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4293      	cmp	r3, r2
 80002c0:	d3f8      	bcc.n	80002b4 <main+0x90>
		vdg_UART_TxString(stringOut);
 80002c2:	e7f1      	b.n	80002a8 <main+0x84>
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020000 	.word	0x40020000
 80002cc:	40004400 	.word	0x40004400
 80002d0:	20000000 	.word	0x20000000
 80002d4:	00145855 	.word	0x00145855

080002d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d8:	480d      	ldr	r0, [pc, #52]	@ (8000310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	@ (8000314 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	@ (8000318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	@ (800031c <LoopForever+0xe>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000324 <LoopForever+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000306:	f000 f811 	bl	800032c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030a:	f7ff ff8b 	bl	8000224 <main>

0800030e <LoopForever>:

LoopForever:
  b LoopForever
 800030e:	e7fe      	b.n	800030e <LoopForever>
  ldr   r0, =_estack
 8000310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800031c:	08000394 	.word	0x08000394
  ldr r2, =_sbss
 8000320:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000324:	2000002c 	.word	0x2000002c

08000328 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC_IRQHandler>
	...

0800032c <__libc_init_array>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	4d0d      	ldr	r5, [pc, #52]	@ (8000364 <__libc_init_array+0x38>)
 8000330:	4c0d      	ldr	r4, [pc, #52]	@ (8000368 <__libc_init_array+0x3c>)
 8000332:	1b64      	subs	r4, r4, r5
 8000334:	10a4      	asrs	r4, r4, #2
 8000336:	2600      	movs	r6, #0
 8000338:	42a6      	cmp	r6, r4
 800033a:	d109      	bne.n	8000350 <__libc_init_array+0x24>
 800033c:	4d0b      	ldr	r5, [pc, #44]	@ (800036c <__libc_init_array+0x40>)
 800033e:	4c0c      	ldr	r4, [pc, #48]	@ (8000370 <__libc_init_array+0x44>)
 8000340:	f000 f818 	bl	8000374 <_init>
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	10a4      	asrs	r4, r4, #2
 8000348:	2600      	movs	r6, #0
 800034a:	42a6      	cmp	r6, r4
 800034c:	d105      	bne.n	800035a <__libc_init_array+0x2e>
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f855 3b04 	ldr.w	r3, [r5], #4
 8000354:	4798      	blx	r3
 8000356:	3601      	adds	r6, #1
 8000358:	e7ee      	b.n	8000338 <__libc_init_array+0xc>
 800035a:	f855 3b04 	ldr.w	r3, [r5], #4
 800035e:	4798      	blx	r3
 8000360:	3601      	adds	r6, #1
 8000362:	e7f2      	b.n	800034a <__libc_init_array+0x1e>
 8000364:	0800038c 	.word	0x0800038c
 8000368:	0800038c 	.word	0x0800038c
 800036c:	0800038c 	.word	0x0800038c
 8000370:	08000390 	.word	0x08000390

08000374 <_init>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr

08000380 <_fini>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr
