
Training_Lab5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000418  08000420  00001420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000418  08000418  00001420  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00001420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000420  00001420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00001418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800041c  0800041c  0000141c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000420  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000420  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000092a  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000019a  00000000  00000000  00001d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003f  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfde  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006b3  00000000  00000000  0000ff95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005103e  00000000  00000000  00010648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00061686  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  000616cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00061794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000400 	.word	0x08000400

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000400 	.word	0x08000400

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	6039      	str	r1, [r7, #0]
 800021e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000224:	2b00      	cmp	r3, #0
 8000226:	db0a      	blt.n	800023e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	b2da      	uxtb	r2, r3
 800022c:	490c      	ldr	r1, [pc, #48]	@ (8000260 <__NVIC_SetPriority+0x4c>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800023c:	e00a      	b.n	8000254 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4908      	ldr	r1, [pc, #32]	@ (8000264 <__NVIC_SetPriority+0x50>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	f003 030f 	and.w	r3, r3, #15
 800024a:	3b04      	subs	r3, #4
 800024c:	0112      	lsls	r2, r2, #4
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	440b      	add	r3, r1
 8000252:	761a      	strb	r2, [r3, #24]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <USART2_IRQHandler>:
#include <stdint.h>
#define STM32F411xE
#include "stm32f4xx.h"

void USART2_IRQHandler(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE) != 0) {
 800026c:	4b0d      	ldr	r3, [pc, #52]	@ (80002a4 <USART2_IRQHandler+0x3c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f003 0320 	and.w	r3, r3, #32
 8000274:	2b00      	cmp	r3, #0
 8000276:	d010      	beq.n	800029a <USART2_IRQHandler+0x32>
		if (USART2->DR == '1') {
 8000278:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <USART2_IRQHandler+0x3c>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	2b31      	cmp	r3, #49	@ 0x31
 800027e:	d106      	bne.n	800028e <USART2_IRQHandler+0x26>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 8000280:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <USART2_IRQHandler+0x40>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	4a08      	ldr	r2, [pc, #32]	@ (80002a8 <USART2_IRQHandler+0x40>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6153      	str	r3, [r2, #20]

		} else {
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
		}
	}
}
 800028c:	e005      	b.n	800029a <USART2_IRQHandler+0x32>
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <USART2_IRQHandler+0x40>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a05      	ldr	r2, [pc, #20]	@ (80002a8 <USART2_IRQHandler+0x40>)
 8000294:	f023 0320 	bic.w	r3, r3, #32
 8000298:	6153      	str	r3, [r2, #20]
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40004400 	.word	0x40004400
 80002a8:	40020000 	.word	0x40020000

080002ac <main>:

int main(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002b0:	4b29      	ldr	r3, [pc, #164]	@ (8000358 <main+0xac>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b4:	4a28      	ldr	r2, [pc, #160]	@ (8000358 <main+0xac>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <main+0xac>)
 80002be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c0:	4a25      	ldr	r2, [pc, #148]	@ (8000358 <main+0xac>)
 80002c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c6:	6413      	str	r3, [r2, #64]	@ 0x40

	// PA5 (LED)
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER5_Pos);
 80002c8:	4b24      	ldr	r3, [pc, #144]	@ (800035c <main+0xb0>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a23      	ldr	r2, [pc, #140]	@ (800035c <main+0xb0>)
 80002ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002d2:	6013      	str	r3, [r2, #0]

	// PA2, PA3
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);
 80002d4:	4b21      	ldr	r3, [pc, #132]	@ (800035c <main+0xb0>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a20      	ldr	r2, [pc, #128]	@ (800035c <main+0xb0>)
 80002da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER2_Pos) + (0b10 << GPIO_MODER_MODER3_Pos);
 80002e0:	4b1e      	ldr	r3, [pc, #120]	@ (800035c <main+0xb0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	@ (800035c <main+0xb0>)
 80002e6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80002ea:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 80002ec:	4b1b      	ldr	r3, [pc, #108]	@ (800035c <main+0xb0>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a1a      	ldr	r2, [pc, #104]	@ (800035c <main+0xb0>)
 80002f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80002f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL2_Pos) + (0b0111 << GPIO_AFRL_AFSEL3_Pos);
 80002f8:	4b18      	ldr	r3, [pc, #96]	@ (800035c <main+0xb0>)
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	4a17      	ldr	r2, [pc, #92]	@ (800035c <main+0xb0>)
 80002fe:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000302:	6213      	str	r3, [r2, #32]

	// USART (RX only)
	USART2->CR1 |= USART_CR1_UE;
 8000304:	4b16      	ldr	r3, [pc, #88]	@ (8000360 <main+0xb4>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	4a15      	ldr	r2, [pc, #84]	@ (8000360 <main+0xb4>)
 800030a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800030e:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~USART_CR1_M;
 8000310:	4b13      	ldr	r3, [pc, #76]	@ (8000360 <main+0xb4>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <main+0xb4>)
 8000316:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800031a:	60d3      	str	r3, [r2, #12]
	USART2->CR2 &= ~USART_CR2_STOP;
 800031c:	4b10      	ldr	r3, [pc, #64]	@ (8000360 <main+0xb4>)
 800031e:	691b      	ldr	r3, [r3, #16]
 8000320:	4a0f      	ldr	r2, [pc, #60]	@ (8000360 <main+0xb4>)
 8000322:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000326:	6113      	str	r3, [r2, #16]
	USART2->BRR = 139;
 8000328:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <main+0xb4>)
 800032a:	228b      	movs	r2, #139	@ 0x8b
 800032c:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_RXNEIE;
 800032e:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <main+0xb4>)
 8000330:	68db      	ldr	r3, [r3, #12]
 8000332:	4a0b      	ldr	r2, [pc, #44]	@ (8000360 <main+0xb4>)
 8000334:	f043 0320 	orr.w	r3, r3, #32
 8000338:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;
 800033a:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <main+0xb4>)
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	4a08      	ldr	r2, [pc, #32]	@ (8000360 <main+0xb4>)
 8000340:	f043 0304 	orr.w	r3, r3, #4
 8000344:	60d3      	str	r3, [r2, #12]

	//interrupt
	NVIC_EnableIRQ(USART2_IRQn);
 8000346:	2026      	movs	r0, #38	@ 0x26
 8000348:	f7ff ff46 	bl	80001d8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART2_IRQn, 0);
 800034c:	2100      	movs	r1, #0
 800034e:	2026      	movs	r0, #38	@ 0x26
 8000350:	f7ff ff60 	bl	8000214 <__NVIC_SetPriority>
	while (1) {
 8000354:	bf00      	nop
 8000356:	e7fd      	b.n	8000354 <main+0xa8>
 8000358:	40023800 	.word	0x40023800
 800035c:	40020000 	.word	0x40020000
 8000360:	40004400 	.word	0x40004400

08000364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000364:	480d      	ldr	r0, [pc, #52]	@ (800039c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000366:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000368:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	@ (80003a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	@ (80003a8 <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	@ (80003ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	@ (80003b0 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000392:	f000 f811 	bl	80003b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000396:	f7ff ff89 	bl	80002ac <main>

0800039a <LoopForever>:

LoopForever:
  b LoopForever
 800039a:	e7fe      	b.n	800039a <LoopForever>
  ldr   r0, =_estack
 800039c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a8:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 80003ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b0:	2000001c 	.word	0x2000001c

080003b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC_IRQHandler>
	...

080003b8 <__libc_init_array>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	4d0d      	ldr	r5, [pc, #52]	@ (80003f0 <__libc_init_array+0x38>)
 80003bc:	4c0d      	ldr	r4, [pc, #52]	@ (80003f4 <__libc_init_array+0x3c>)
 80003be:	1b64      	subs	r4, r4, r5
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	2600      	movs	r6, #0
 80003c4:	42a6      	cmp	r6, r4
 80003c6:	d109      	bne.n	80003dc <__libc_init_array+0x24>
 80003c8:	4d0b      	ldr	r5, [pc, #44]	@ (80003f8 <__libc_init_array+0x40>)
 80003ca:	4c0c      	ldr	r4, [pc, #48]	@ (80003fc <__libc_init_array+0x44>)
 80003cc:	f000 f818 	bl	8000400 <_init>
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	10a4      	asrs	r4, r4, #2
 80003d4:	2600      	movs	r6, #0
 80003d6:	42a6      	cmp	r6, r4
 80003d8:	d105      	bne.n	80003e6 <__libc_init_array+0x2e>
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e0:	4798      	blx	r3
 80003e2:	3601      	adds	r6, #1
 80003e4:	e7ee      	b.n	80003c4 <__libc_init_array+0xc>
 80003e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ea:	4798      	blx	r3
 80003ec:	3601      	adds	r6, #1
 80003ee:	e7f2      	b.n	80003d6 <__libc_init_array+0x1e>
 80003f0:	08000418 	.word	0x08000418
 80003f4:	08000418 	.word	0x08000418
 80003f8:	08000418 	.word	0x08000418
 80003fc:	0800041c 	.word	0x0800041c

08000400 <_init>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr

0800040c <_fini>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr
