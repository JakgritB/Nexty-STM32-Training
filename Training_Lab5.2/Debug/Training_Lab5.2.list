
Training_Lab5.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800043c  08000444  00001444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800043c  0800043c  00001444  2**0
                  CONTENTS
  4 .ARM          00000000  0800043c  0800043c  00001444  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800043c  08000444  00001444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800043c  0800043c  0000143c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000440  08000440  00001440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000444  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000444  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009c2  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001eb  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00002028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003f  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfe4  00000000  00000000  000020c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006b7  00000000  00000000  000100ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00051096  00000000  00000000  00010762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000617f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  0006183c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00061908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000424 	.word	0x08000424

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000424 	.word	0x08000424

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	6039      	str	r1, [r7, #0]
 800021e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000224:	2b00      	cmp	r3, #0
 8000226:	db0a      	blt.n	800023e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	b2da      	uxtb	r2, r3
 800022c:	490c      	ldr	r1, [pc, #48]	@ (8000260 <__NVIC_SetPriority+0x4c>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800023c:	e00a      	b.n	8000254 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4908      	ldr	r1, [pc, #32]	@ (8000264 <__NVIC_SetPriority+0x50>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	f003 030f 	and.w	r3, r3, #15
 800024a:	3b04      	subs	r3, #4
 800024c:	0112      	lsls	r2, r2, #4
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	440b      	add	r3, r1
 8000252:	761a      	strb	r2, [r3, #24]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <ADC_IRQHandler>:
#define STM32F411xE
#include "stm32f4xx.h"

#define THRESHOLD 133333

void ADC_IRQHandler(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	if ((ADC1->SR & ADC_SR_EOC) != 0) {
 800026c:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <ADC_IRQHandler+0x40>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f003 0302 	and.w	r3, r3, #2
 8000274:	2b00      	cmp	r3, #0
 8000276:	d011      	beq.n	800029c <ADC_IRQHandler+0x34>
		if (ADC1->DR <= 2048) {
 8000278:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <ADC_IRQHandler+0x40>)
 800027a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000280:	d806      	bhi.n	8000290 <ADC_IRQHandler+0x28>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 8000282:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <ADC_IRQHandler+0x44>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a09      	ldr	r2, [pc, #36]	@ (80002ac <ADC_IRQHandler+0x44>)
 8000288:	f043 0320 	orr.w	r3, r3, #32
 800028c:	6153      	str	r3, [r2, #20]
		} else {
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
		}
	}
}
 800028e:	e005      	b.n	800029c <ADC_IRQHandler+0x34>
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 8000290:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <ADC_IRQHandler+0x44>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	4a05      	ldr	r2, [pc, #20]	@ (80002ac <ADC_IRQHandler+0x44>)
 8000296:	f023 0320 	bic.w	r3, r3, #32
 800029a:	6153      	str	r3, [r2, #20]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40012000 	.word	0x40012000
 80002ac:	40020000 	.word	0x40020000

080002b0 <main>:

int main(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002b6:	4b30      	ldr	r3, [pc, #192]	@ (8000378 <main+0xc8>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000378 <main+0xc8>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000378 <main+0xc8>)
 80002c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000378 <main+0xc8>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002cc:	6453      	str	r3, [r2, #68]	@ 0x44

	// PA5 (LED)
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER5_Pos);
 80002ce:	4b2b      	ldr	r3, [pc, #172]	@ (800037c <main+0xcc>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a2a      	ldr	r2, [pc, #168]	@ (800037c <main+0xcc>)
 80002d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002d8:	6013      	str	r3, [r2, #0]

	// ADC 4
	GPIOA->MODER &= ~(GPIO_MODER_MODER4);
 80002da:	4b28      	ldr	r3, [pc, #160]	@ (800037c <main+0xcc>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a27      	ldr	r2, [pc, #156]	@ (800037c <main+0xcc>)
 80002e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80002e4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b11 << GPIO_MODER_MODER4_Pos);
 80002e6:	4b25      	ldr	r3, [pc, #148]	@ (800037c <main+0xcc>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a24      	ldr	r2, [pc, #144]	@ (800037c <main+0xcc>)
 80002ec:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80002f0:	6013      	str	r3, [r2, #0]
	ADC1->CR2 |= ADC_CR2_ADON;
 80002f2:	4b23      	ldr	r3, [pc, #140]	@ (8000380 <main+0xd0>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	4a22      	ldr	r2, [pc, #136]	@ (8000380 <main+0xd0>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2 |= ADC_SMPR2_SMP4;
 80002fe:	4b20      	ldr	r3, [pc, #128]	@ (8000380 <main+0xd0>)
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	4a1f      	ldr	r2, [pc, #124]	@ (8000380 <main+0xd0>)
 8000304:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000308:	6113      	str	r3, [r2, #16]
	ADC1->SQR1 &= ~(ADC_SQR1_L);
 800030a:	4b1d      	ldr	r3, [pc, #116]	@ (8000380 <main+0xd0>)
 800030c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800030e:	4a1c      	ldr	r2, [pc, #112]	@ (8000380 <main+0xd0>)
 8000310:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000314:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR1 |= (1 << ADC_SQR1_L_Pos);
 8000316:	4b1a      	ldr	r3, [pc, #104]	@ (8000380 <main+0xd0>)
 8000318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800031a:	4a19      	ldr	r2, [pc, #100]	@ (8000380 <main+0xd0>)
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000320:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR3 &= ~(ADC_SQR3_SQ1);
 8000322:	4b17      	ldr	r3, [pc, #92]	@ (8000380 <main+0xd0>)
 8000324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000326:	4a16      	ldr	r2, [pc, #88]	@ (8000380 <main+0xd0>)
 8000328:	f023 031f 	bic.w	r3, r3, #31
 800032c:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= (0x04 << ADC_SQR3_SQ1_Pos);
 800032e:	4b14      	ldr	r3, [pc, #80]	@ (8000380 <main+0xd0>)
 8000330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000332:	4a13      	ldr	r2, [pc, #76]	@ (8000380 <main+0xd0>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->CR1 |= ADC_CR1_EOCIE;
 800033a:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <main+0xd0>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	4a10      	ldr	r2, [pc, #64]	@ (8000380 <main+0xd0>)
 8000340:	f043 0320 	orr.w	r3, r3, #32
 8000344:	6053      	str	r3, [r2, #4]

	//interrupt
	NVIC_EnableIRQ(ADC_IRQn);
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ff46 	bl	80001d8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(ADC_IRQn, 0);
 800034c:	2100      	movs	r1, #0
 800034e:	2012      	movs	r0, #18
 8000350:	f7ff ff60 	bl	8000214 <__NVIC_SetPriority>

	//ADC1->CR1 |= (0b10 << ADC_CR1_RES_Pos);

	while (1) {
		ADC1->CR2 |= ADC_CR2_SWSTART;
 8000354:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <main+0xd0>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4a09      	ldr	r2, [pc, #36]	@ (8000380 <main+0xd0>)
 800035a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800035e:	6093      	str	r3, [r2, #8]

		for (uint32_t iter = 0; iter < THRESHOLD; iter++) {
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	e002      	b.n	800036c <main+0xbc>
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a05      	ldr	r2, [pc, #20]	@ (8000384 <main+0xd4>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d9f8      	bls.n	8000366 <main+0xb6>
		ADC1->CR2 |= ADC_CR2_SWSTART;
 8000374:	e7ee      	b.n	8000354 <main+0xa4>
 8000376:	bf00      	nop
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40012000 	.word	0x40012000
 8000384:	000208d4 	.word	0x000208d4

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	@ (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	@ (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	@ (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	@ (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	@ (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	@ (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 f811 	bl	80003dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff79 	bl	80002b0 <main>

080003be <LoopForever>:

LoopForever:
  b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08000444 	.word	0x08000444
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <BusFault_Handler>
	...

080003dc <__libc_init_array>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	4d0d      	ldr	r5, [pc, #52]	@ (8000414 <__libc_init_array+0x38>)
 80003e0:	4c0d      	ldr	r4, [pc, #52]	@ (8000418 <__libc_init_array+0x3c>)
 80003e2:	1b64      	subs	r4, r4, r5
 80003e4:	10a4      	asrs	r4, r4, #2
 80003e6:	2600      	movs	r6, #0
 80003e8:	42a6      	cmp	r6, r4
 80003ea:	d109      	bne.n	8000400 <__libc_init_array+0x24>
 80003ec:	4d0b      	ldr	r5, [pc, #44]	@ (800041c <__libc_init_array+0x40>)
 80003ee:	4c0c      	ldr	r4, [pc, #48]	@ (8000420 <__libc_init_array+0x44>)
 80003f0:	f000 f818 	bl	8000424 <_init>
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	10a4      	asrs	r4, r4, #2
 80003f8:	2600      	movs	r6, #0
 80003fa:	42a6      	cmp	r6, r4
 80003fc:	d105      	bne.n	800040a <__libc_init_array+0x2e>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	f855 3b04 	ldr.w	r3, [r5], #4
 8000404:	4798      	blx	r3
 8000406:	3601      	adds	r6, #1
 8000408:	e7ee      	b.n	80003e8 <__libc_init_array+0xc>
 800040a:	f855 3b04 	ldr.w	r3, [r5], #4
 800040e:	4798      	blx	r3
 8000410:	3601      	adds	r6, #1
 8000412:	e7f2      	b.n	80003fa <__libc_init_array+0x1e>
 8000414:	0800043c 	.word	0x0800043c
 8000418:	0800043c 	.word	0x0800043c
 800041c:	0800043c 	.word	0x0800043c
 8000420:	08000440 	.word	0x08000440

08000424 <_init>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr

08000430 <_fini>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr
