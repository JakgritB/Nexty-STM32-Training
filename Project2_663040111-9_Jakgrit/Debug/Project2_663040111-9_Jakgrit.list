
Project2_663040111-9_Jakgrit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004cc  080004d4  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004cc  080004cc  000014d4  2**0
                  CONTENTS
  4 .ARM          00000000  080004cc  080004cc  000014d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004cc  080004d4  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004cc  080004cc  000014cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004d0  080004d0  000014d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004d4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004d4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009f2  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001f5  00000000  00000000  00001ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  000020f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000059  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfe4  00000000  00000000  000021a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000742  00000000  00000000  0001018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00051096  00000000  00000000  000108cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00061965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d4  00000000  00000000  000619a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00061a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004b4 	.word	0x080004b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080004b4 	.word	0x080004b4

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	6039      	str	r1, [r7, #0]
 800021e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000224:	2b00      	cmp	r3, #0
 8000226:	db0a      	blt.n	800023e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	b2da      	uxtb	r2, r3
 800022c:	490c      	ldr	r1, [pc, #48]	@ (8000260 <__NVIC_SetPriority+0x4c>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800023c:	e00a      	b.n	8000254 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4908      	ldr	r1, [pc, #32]	@ (8000264 <__NVIC_SetPriority+0x50>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	f003 030f 	and.w	r3, r3, #15
 800024a:	3b04      	subs	r3, #4
 800024c:	0112      	lsls	r2, r2, #4
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	440b      	add	r3, r1
 8000252:	761a      	strb	r2, [r3, #24]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <ADC_IRQHandler>:
// ค่าดีเลย์ระหว่างการเริ่มแปลง ADC แต่ละครั้ง
#define THRESHOLD 133333

// --- Interrupt Service Routine (ISR) สำหรับ ADC ---
// ตรรกะควบคุม LED ทั้งหมดจะอยู่ในนี้
void ADC_IRQHandler(void) {
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
	// ตรวจสอบว่า Interrupt เกิดจากธง End of Conversion (EOC)
	if ((ADC1->SR & ADC_SR_EOC) != 0) {
 800026e:	4b35      	ldr	r3, [pc, #212]	@ (8000344 <ADC_IRQHandler+0xdc>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f003 0302 	and.w	r3, r3, #2
 8000276:	2b00      	cmp	r3, #0
 8000278:	d05d      	beq.n	8000336 <ADC_IRQHandler+0xce>
		// อ่านค่า ADC (การอ่านค่านี้จะล้างธง EOC โดยอัตโนมัติ)
		uint16_t adc_value = ADC1->DR;
 800027a:	4b32      	ldr	r3, [pc, #200]	@ (8000344 <ADC_IRQHandler+0xdc>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027e:	80fb      	strh	r3, [r7, #6]

		// --- ใช้ BSRR ควบคุม LED ตามค่า ADC ---
		if (adc_value > 3280) { // ระดับ 0: ปิดทุกดวง 3280
 8000280:	88fb      	ldrh	r3, [r7, #6]
 8000282:	f5b3 6f4d 	cmp.w	r3, #3280	@ 0xcd0
 8000286:	d910      	bls.n	80002aa <ADC_IRQHandler+0x42>
			GPIOB->BSRR = GPIO_BSRR_BR6;
 8000288:	4b2f      	ldr	r3, [pc, #188]	@ (8000348 <ADC_IRQHandler+0xe0>)
 800028a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800028e:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BR7;
 8000290:	4b2e      	ldr	r3, [pc, #184]	@ (800034c <ADC_IRQHandler+0xe4>)
 8000292:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000296:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BR6;
 8000298:	4b2c      	ldr	r3, [pc, #176]	@ (800034c <ADC_IRQHandler+0xe4>)
 800029a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800029e:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BR5;
 80002a0:	4b2a      	ldr	r3, [pc, #168]	@ (800034c <ADC_IRQHandler+0xe4>)
 80002a2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80002a6:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BS7;
			GPIOA->BSRR = GPIO_BSRR_BS6;
			GPIOA->BSRR = GPIO_BSRR_BS5; // On
		}
	}
}
 80002a8:	e045      	b.n	8000336 <ADC_IRQHandler+0xce>
		} else if (adc_value > 2460) { // ระดับ 1: เปิด PB6 2460
 80002aa:	88fb      	ldrh	r3, [r7, #6]
 80002ac:	f640 129c 	movw	r2, #2460	@ 0x99c
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d90f      	bls.n	80002d4 <ADC_IRQHandler+0x6c>
			GPIOB->BSRR = GPIO_BSRR_BS6; // On
 80002b4:	4b24      	ldr	r3, [pc, #144]	@ (8000348 <ADC_IRQHandler+0xe0>)
 80002b6:	2240      	movs	r2, #64	@ 0x40
 80002b8:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BR7;
 80002ba:	4b24      	ldr	r3, [pc, #144]	@ (800034c <ADC_IRQHandler+0xe4>)
 80002bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002c0:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BR6;
 80002c2:	4b22      	ldr	r3, [pc, #136]	@ (800034c <ADC_IRQHandler+0xe4>)
 80002c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80002c8:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BR5;
 80002ca:	4b20      	ldr	r3, [pc, #128]	@ (800034c <ADC_IRQHandler+0xe4>)
 80002cc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80002d0:	619a      	str	r2, [r3, #24]
}
 80002d2:	e030      	b.n	8000336 <ADC_IRQHandler+0xce>
		} else if (adc_value > 1640) { // ระดับ 2: เปิด PB6, PA7 1640
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	f5b3 6fcd 	cmp.w	r3, #1640	@ 0x668
 80002da:	d90e      	bls.n	80002fa <ADC_IRQHandler+0x92>
			GPIOB->BSRR = GPIO_BSRR_BS6;
 80002dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000348 <ADC_IRQHandler+0xe0>)
 80002de:	2240      	movs	r2, #64	@ 0x40
 80002e0:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BS7; // On
 80002e2:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <ADC_IRQHandler+0xe4>)
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BR6;
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <ADC_IRQHandler+0xe4>)
 80002ea:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80002ee:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BR5;
 80002f0:	4b16      	ldr	r3, [pc, #88]	@ (800034c <ADC_IRQHandler+0xe4>)
 80002f2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80002f6:	619a      	str	r2, [r3, #24]
}
 80002f8:	e01d      	b.n	8000336 <ADC_IRQHandler+0xce>
		} else if (adc_value > 820) { // ระดับ 3: เปิด PB6, PA7, PA6 820
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	f5b3 7f4d 	cmp.w	r3, #820	@ 0x334
 8000300:	d90d      	bls.n	800031e <ADC_IRQHandler+0xb6>
			GPIOB->BSRR = GPIO_BSRR_BS6;
 8000302:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <ADC_IRQHandler+0xe0>)
 8000304:	2240      	movs	r2, #64	@ 0x40
 8000306:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BS7;
 8000308:	4b10      	ldr	r3, [pc, #64]	@ (800034c <ADC_IRQHandler+0xe4>)
 800030a:	2280      	movs	r2, #128	@ 0x80
 800030c:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BS6; // On
 800030e:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <ADC_IRQHandler+0xe4>)
 8000310:	2240      	movs	r2, #64	@ 0x40
 8000312:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BR5;
 8000314:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <ADC_IRQHandler+0xe4>)
 8000316:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800031a:	619a      	str	r2, [r3, #24]
}
 800031c:	e00b      	b.n	8000336 <ADC_IRQHandler+0xce>
			GPIOB->BSRR = GPIO_BSRR_BS6;
 800031e:	4b0a      	ldr	r3, [pc, #40]	@ (8000348 <ADC_IRQHandler+0xe0>)
 8000320:	2240      	movs	r2, #64	@ 0x40
 8000322:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BS7;
 8000324:	4b09      	ldr	r3, [pc, #36]	@ (800034c <ADC_IRQHandler+0xe4>)
 8000326:	2280      	movs	r2, #128	@ 0x80
 8000328:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BS6;
 800032a:	4b08      	ldr	r3, [pc, #32]	@ (800034c <ADC_IRQHandler+0xe4>)
 800032c:	2240      	movs	r2, #64	@ 0x40
 800032e:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = GPIO_BSRR_BS5; // On
 8000330:	4b06      	ldr	r3, [pc, #24]	@ (800034c <ADC_IRQHandler+0xe4>)
 8000332:	2220      	movs	r2, #32
 8000334:	619a      	str	r2, [r3, #24]
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40012000 	.word	0x40012000
 8000348:	40020400 	.word	0x40020400
 800034c:	40020000 	.word	0x40020000

08000350 <main>:

int main(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
	// --- 1. เปิด Clock ---
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000356:	4b2b      	ldr	r3, [pc, #172]	@ (8000404 <main+0xb4>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035a:	4a2a      	ldr	r2, [pc, #168]	@ (8000404 <main+0xb4>)
 800035c:	f043 0303 	orr.w	r3, r3, #3
 8000360:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000362:	4b28      	ldr	r3, [pc, #160]	@ (8000404 <main+0xb4>)
 8000364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000366:	4a27      	ldr	r2, [pc, #156]	@ (8000404 <main+0xb4>)
 8000368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800036c:	6453      	str	r3, [r2, #68]	@ 0x44

	// --- 2. ตั้งค่า GPIO ---
	// Outputs for LEDs: PA5, PA6, PA7, PB6
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER5_Pos);
 800036e:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <main+0xb8>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a25      	ldr	r2, [pc, #148]	@ (8000408 <main+0xb8>)
 8000374:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000378:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER6_Pos);
 800037a:	4b23      	ldr	r3, [pc, #140]	@ (8000408 <main+0xb8>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a22      	ldr	r2, [pc, #136]	@ (8000408 <main+0xb8>)
 8000380:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000384:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER7_Pos);
 8000386:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <main+0xb8>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a1f      	ldr	r2, [pc, #124]	@ (8000408 <main+0xb8>)
 800038c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000390:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << GPIO_MODER_MODER6_Pos);
 8000392:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <main+0xbc>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <main+0xbc>)
 8000398:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800039c:	6013      	str	r3, [r2, #0]
	// Analog Input for Potentiometer: PA4
	GPIOA->MODER |= (0b11 << GPIO_MODER_MODER4_Pos);
 800039e:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <main+0xb8>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a19      	ldr	r2, [pc, #100]	@ (8000408 <main+0xb8>)
 80003a4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80003a8:	6013      	str	r3, [r2, #0]

	// --- 3. ตั้งค่า ADC ---
	ADC1->CR2 |= ADC_CR2_ADON;
 80003aa:	4b19      	ldr	r3, [pc, #100]	@ (8000410 <main+0xc0>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	4a18      	ldr	r2, [pc, #96]	@ (8000410 <main+0xc0>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6093      	str	r3, [r2, #8]
	ADC1->SQR1 &= ~(ADC_SQR1_L); // L=0b0000 หมายถึง 1 conversion
 80003b6:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <main+0xc0>)
 80003b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003ba:	4a15      	ldr	r2, [pc, #84]	@ (8000410 <main+0xc0>)
 80003bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80003c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR3 = (4 << ADC_SQR3_SQ1_Pos); // เลือก Channel 4 (PA4)
 80003c2:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <main+0xc0>)
 80003c4:	2204      	movs	r2, #4
 80003c6:	635a      	str	r2, [r3, #52]	@ 0x34
	ADC1->CR1 |= ADC_CR1_EOCIE; // เปิดใช้งาน EOC Interrupt
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <main+0xc0>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	4a10      	ldr	r2, [pc, #64]	@ (8000410 <main+0xc0>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6053      	str	r3, [r2, #4]

	// --- 4. ตั้งค่า NVIC ---
	NVIC_EnableIRQ(ADC_IRQn);
 80003d4:	2012      	movs	r0, #18
 80003d6:	f7ff feff 	bl	80001d8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(ADC_IRQn, 0);
 80003da:	2100      	movs	r1, #0
 80003dc:	2012      	movs	r0, #18
 80003de:	f7ff ff19 	bl	8000214 <__NVIC_SetPriority>

	// --- 5. Main Loop ---
	while (1) {
		// สั่งให้ ADC เริ่มการแปลงค่า
		ADC1->CR2 |= ADC_CR2_SWSTART;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <main+0xc0>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <main+0xc0>)
 80003e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80003ec:	6093      	str	r3, [r2, #8]

		// หน่วงเวลา เพื่อสร้างจังหวะในการอ่านค่าครั้งต่อไป
		for (volatile uint32_t iter = 0; iter < THRESHOLD; iter++) {
 80003ee:	2300      	movs	r3, #0
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	e002      	b.n	80003fa <main+0xaa>
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3301      	adds	r3, #1
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a05      	ldr	r2, [pc, #20]	@ (8000414 <main+0xc4>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d9f8      	bls.n	80003f4 <main+0xa4>
		ADC1->CR2 |= ADC_CR2_SWSTART;
 8000402:	e7ee      	b.n	80003e2 <main+0x92>
 8000404:	40023800 	.word	0x40023800
 8000408:	40020000 	.word	0x40020000
 800040c:	40020400 	.word	0x40020400
 8000410:	40012000 	.word	0x40012000
 8000414:	000208d4 	.word	0x000208d4

08000418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000418:	480d      	ldr	r0, [pc, #52]	@ (8000450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800041c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480c      	ldr	r0, [pc, #48]	@ (8000454 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490d      	ldr	r1, [pc, #52]	@ (8000458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0d      	ldr	r2, [pc, #52]	@ (800045c <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0a      	ldr	r2, [pc, #40]	@ (8000460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0a      	ldr	r4, [pc, #40]	@ (8000464 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000446:	f000 f811 	bl	800046c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044a:	f7ff ff81 	bl	8000350 <main>

0800044e <LoopForever>:

LoopForever:
  b LoopForever
 800044e:	e7fe      	b.n	800044e <LoopForever>
  ldr   r0, =_estack
 8000450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800045c:	080004d4 	.word	0x080004d4
  ldr r2, =_sbss
 8000460:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000464:	2000001c 	.word	0x2000001c

08000468 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <BusFault_Handler>
	...

0800046c <__libc_init_array>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4d0d      	ldr	r5, [pc, #52]	@ (80004a4 <__libc_init_array+0x38>)
 8000470:	4c0d      	ldr	r4, [pc, #52]	@ (80004a8 <__libc_init_array+0x3c>)
 8000472:	1b64      	subs	r4, r4, r5
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	2600      	movs	r6, #0
 8000478:	42a6      	cmp	r6, r4
 800047a:	d109      	bne.n	8000490 <__libc_init_array+0x24>
 800047c:	4d0b      	ldr	r5, [pc, #44]	@ (80004ac <__libc_init_array+0x40>)
 800047e:	4c0c      	ldr	r4, [pc, #48]	@ (80004b0 <__libc_init_array+0x44>)
 8000480:	f000 f818 	bl	80004b4 <_init>
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	10a4      	asrs	r4, r4, #2
 8000488:	2600      	movs	r6, #0
 800048a:	42a6      	cmp	r6, r4
 800048c:	d105      	bne.n	800049a <__libc_init_array+0x2e>
 800048e:	bd70      	pop	{r4, r5, r6, pc}
 8000490:	f855 3b04 	ldr.w	r3, [r5], #4
 8000494:	4798      	blx	r3
 8000496:	3601      	adds	r6, #1
 8000498:	e7ee      	b.n	8000478 <__libc_init_array+0xc>
 800049a:	f855 3b04 	ldr.w	r3, [r5], #4
 800049e:	4798      	blx	r3
 80004a0:	3601      	adds	r6, #1
 80004a2:	e7f2      	b.n	800048a <__libc_init_array+0x1e>
 80004a4:	080004cc 	.word	0x080004cc
 80004a8:	080004cc 	.word	0x080004cc
 80004ac:	080004cc 	.word	0x080004cc
 80004b0:	080004d0 	.word	0x080004d0

080004b4 <_init>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr

080004c0 <_fini>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr
