#include <stdint.h>
#include <stdio.h>
#include <math.h>
#define STM32F411xE
#include "stm32f4xx.h"

const uint32_t THRESHOLD = 133333;

#define VREF 3.3f
#define VCC 3.3f
#define ADC_MAXRES 4095.0f
#define RX 10000.0f
#define R0 10000.0f
#define T0 298.15f
#define BETA 3950.0f

char stringOut[50];

void vdg_UART_TxString(char strOut[]) {
	for (uint8_t idx = 0; strOut[idx] != '\0'; idx++) {
		while ((USART2->SR & USART_SR_TXE) == 0)
			;
		USART2->DR = strOut[idx];
	}
}

int main(void) {
	//clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;

	//pa2 pa3
	GPIOA->MODER &= ~(GPIO_MODER_MODER2);
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER2_Pos);
	GPIOA->MODER &= ~(GPIO_MODER_MODER3);
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER3_Pos);
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL2_Pos);
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL3_Pos);

	//usart
	USART2->CR1 |= USART_CR1_UE;
	USART2->CR1 &= ~ USART_CR1_M;
	USART2->CR2 &= ~ USART_CR2_STOP;
	USART2->BRR = 139;
	USART2->CR1 |= USART_CR1_TE;

	//adc ch 0
	GPIOA->MODER &= ~(GPIO_MODER_MODER0);
	GPIOA->MODER |= (0b11 << GPIO_MODER_MODER0_Pos);
	ADC1->CR2 |= ADC_CR2_ADON;
	ADC1->SMPR2 |= ADC_SMPR2_SMP0;
	ADC1->SQR1 &= ~(ADC_SQR1_L);
	ADC1->SQR1 |= (1 << ADC_SQR1_L_Pos);
	ADC1->SQR3 &= ~(ADC_SQR3_SQ1);
	ADC1->SQR3 |= (0x00 << ADC_SQR3_SQ1_Pos); // edit to 0

	//fpu
	SCB->CPACR |= (0b1111 << 20);
	__asm volatile("dsb");
	__asm volatile("isb");

	while (1) {
		ADC1->CR2 |= ADC_CR2_SWSTART;
		while ((ADC1->SR & ADC_SR_EOC) == 0);

		float adc_voltage = (ADC1->DR * VREF)/ ADC_MAXRES;
		float r_ntc = RX * adc_voltage / ( VCC - adc_voltage);
		float temparature = (( BETA * T0 ) / (T0*log(r_ntc / R0 ) + BETA)) - 273.15f;

		sprintf(stringOut, "Temperature = %d millidegree Celcius\n" , (int32_t)(temparature * 1000.0f));
		vdg_UART_TxString(stringOut);

		for (uint32_t iter = 0; iter < THRESHOLD; iter++) {

		}
	}
}
