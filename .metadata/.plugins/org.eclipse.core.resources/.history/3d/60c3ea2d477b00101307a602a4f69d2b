
Training_Lab4.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08000f10  08000f10  00001f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f60  08000f60  00002050  2**0
                  CONTENTS
  4 .ARM          00000008  08000f60  08000f60  00001f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f68  08000f68  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f68  08000f68  00001f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f6c  08000f6c  00001f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000f70  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000050  08000fc0  00002050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08000fc0  000021ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000095f  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000287  00000000  00000000  000029df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00002c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f090  00000000  00000000  00002d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000dfc  00000000  00000000  00011dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055418  00000000  00000000  00012baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00067fc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f0  00000000  00000000  00068008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000685f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000ef8 	.word	0x08000ef8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08000ef8 	.word	0x08000ef8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vdg_UART_TxString>:
#define T0 298.15f
#define BETA 3950.0f

char stringOut[50];

void vdg_UART_TxString(char strOut[]) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	for (uint8_t idx = 0; strOut[idx] != '\0'; idx++) {
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	e00f      	b.n	80002ae <vdg_UART_TxString+0x2e>
		while ((USART2->SR & USART_SR_TXE) == 0)
 800028e:	bf00      	nop
 8000290:	4b0d      	ldr	r3, [pc, #52]	@ (80002c8 <vdg_UART_TxString+0x48>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f9      	beq.n	8000290 <vdg_UART_TxString+0x10>
			;
		USART2->DR = strOut[idx];
 800029c:	7bfb      	ldrb	r3, [r7, #15]
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	4413      	add	r3, r2
 80002a2:	781a      	ldrb	r2, [r3, #0]
 80002a4:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <vdg_UART_TxString+0x48>)
 80002a6:	605a      	str	r2, [r3, #4]
	for (uint8_t idx = 0; strOut[idx] != '\0'; idx++) {
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	3301      	adds	r3, #1
 80002ac:	73fb      	strb	r3, [r7, #15]
 80002ae:	7bfb      	ldrb	r3, [r7, #15]
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d1e9      	bne.n	800028e <vdg_UART_TxString+0xe>
	}
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40004400 	.word	0x40004400

080002cc <main>:

int main(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	//clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002d2:	4b81      	ldr	r3, [pc, #516]	@ (80004d8 <main+0x20c>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d6:	4a80      	ldr	r2, [pc, #512]	@ (80004d8 <main+0x20c>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80002de:	4b7e      	ldr	r3, [pc, #504]	@ (80004d8 <main+0x20c>)
 80002e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002e2:	4a7d      	ldr	r2, [pc, #500]	@ (80004d8 <main+0x20c>)
 80002e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002e8:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002ea:	4b7b      	ldr	r3, [pc, #492]	@ (80004d8 <main+0x20c>)
 80002ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ee:	4a7a      	ldr	r2, [pc, #488]	@ (80004d8 <main+0x20c>)
 80002f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002f4:	6453      	str	r3, [r2, #68]	@ 0x44

	GPIOA->MODER &= ~(GPIO_MODER_MODER5);
 80002f6:	4b79      	ldr	r3, [pc, #484]	@ (80004dc <main+0x210>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a78      	ldr	r2, [pc, #480]	@ (80004dc <main+0x210>)
 80002fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000300:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER5_Pos);
 8000302:	4b76      	ldr	r3, [pc, #472]	@ (80004dc <main+0x210>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a75      	ldr	r2, [pc, #468]	@ (80004dc <main+0x210>)
 8000308:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800030c:	6013      	str	r3, [r2, #0]

	//pa2 pa3
	GPIOA->MODER &= ~(GPIO_MODER_MODER2);
 800030e:	4b73      	ldr	r3, [pc, #460]	@ (80004dc <main+0x210>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a72      	ldr	r2, [pc, #456]	@ (80004dc <main+0x210>)
 8000314:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000318:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER2_Pos);
 800031a:	4b70      	ldr	r3, [pc, #448]	@ (80004dc <main+0x210>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a6f      	ldr	r2, [pc, #444]	@ (80004dc <main+0x210>)
 8000320:	f043 0320 	orr.w	r3, r3, #32
 8000324:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER3);
 8000326:	4b6d      	ldr	r3, [pc, #436]	@ (80004dc <main+0x210>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a6c      	ldr	r2, [pc, #432]	@ (80004dc <main+0x210>)
 800032c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000330:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER3_Pos);
 8000332:	4b6a      	ldr	r3, [pc, #424]	@ (80004dc <main+0x210>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a69      	ldr	r2, [pc, #420]	@ (80004dc <main+0x210>)
 8000338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800033c:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL2_Pos);
 800033e:	4b67      	ldr	r3, [pc, #412]	@ (80004dc <main+0x210>)
 8000340:	6a1b      	ldr	r3, [r3, #32]
 8000342:	4a66      	ldr	r2, [pc, #408]	@ (80004dc <main+0x210>)
 8000344:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000348:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL3_Pos);
 800034a:	4b64      	ldr	r3, [pc, #400]	@ (80004dc <main+0x210>)
 800034c:	6a1b      	ldr	r3, [r3, #32]
 800034e:	4a63      	ldr	r2, [pc, #396]	@ (80004dc <main+0x210>)
 8000350:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000354:	6213      	str	r3, [r2, #32]

	//usart
	USART2->CR1 |= USART_CR1_UE;
 8000356:	4b62      	ldr	r3, [pc, #392]	@ (80004e0 <main+0x214>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	4a61      	ldr	r2, [pc, #388]	@ (80004e0 <main+0x214>)
 800035c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000360:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~ USART_CR1_M;
 8000362:	4b5f      	ldr	r3, [pc, #380]	@ (80004e0 <main+0x214>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	4a5e      	ldr	r2, [pc, #376]	@ (80004e0 <main+0x214>)
 8000368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800036c:	60d3      	str	r3, [r2, #12]
	USART2->CR2 &= ~ USART_CR2_STOP;
 800036e:	4b5c      	ldr	r3, [pc, #368]	@ (80004e0 <main+0x214>)
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	4a5b      	ldr	r2, [pc, #364]	@ (80004e0 <main+0x214>)
 8000374:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000378:	6113      	str	r3, [r2, #16]
	USART2->BRR = 139;
 800037a:	4b59      	ldr	r3, [pc, #356]	@ (80004e0 <main+0x214>)
 800037c:	228b      	movs	r2, #139	@ 0x8b
 800037e:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;
 8000380:	4b57      	ldr	r3, [pc, #348]	@ (80004e0 <main+0x214>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a56      	ldr	r2, [pc, #344]	@ (80004e0 <main+0x214>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	60d3      	str	r3, [r2, #12]

	//adc ch 0
	GPIOA->MODER &= ~(GPIO_MODER_MODER0);
 800038c:	4b53      	ldr	r3, [pc, #332]	@ (80004dc <main+0x210>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a52      	ldr	r2, [pc, #328]	@ (80004dc <main+0x210>)
 8000392:	f023 0303 	bic.w	r3, r3, #3
 8000396:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b11 << GPIO_MODER_MODER0_Pos);
 8000398:	4b50      	ldr	r3, [pc, #320]	@ (80004dc <main+0x210>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a4f      	ldr	r2, [pc, #316]	@ (80004dc <main+0x210>)
 800039e:	f043 0303 	orr.w	r3, r3, #3
 80003a2:	6013      	str	r3, [r2, #0]
	ADC1->CR2 |= ADC_CR2_ADON;
 80003a4:	4b4f      	ldr	r3, [pc, #316]	@ (80004e4 <main+0x218>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a4e      	ldr	r2, [pc, #312]	@ (80004e4 <main+0x218>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2 |= ADC_SMPR2_SMP0;
 80003b0:	4b4c      	ldr	r3, [pc, #304]	@ (80004e4 <main+0x218>)
 80003b2:	691b      	ldr	r3, [r3, #16]
 80003b4:	4a4b      	ldr	r2, [pc, #300]	@ (80004e4 <main+0x218>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6113      	str	r3, [r2, #16]
	ADC1->SQR1 &= ~(ADC_SQR1_L);
 80003bc:	4b49      	ldr	r3, [pc, #292]	@ (80004e4 <main+0x218>)
 80003be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003c0:	4a48      	ldr	r2, [pc, #288]	@ (80004e4 <main+0x218>)
 80003c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80003c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR1 |= (1 << ADC_SQR1_L_Pos);
 80003c8:	4b46      	ldr	r3, [pc, #280]	@ (80004e4 <main+0x218>)
 80003ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003cc:	4a45      	ldr	r2, [pc, #276]	@ (80004e4 <main+0x218>)
 80003ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR3 &= ~(ADC_SQR3_SQ1);
 80003d4:	4b43      	ldr	r3, [pc, #268]	@ (80004e4 <main+0x218>)
 80003d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003d8:	4a42      	ldr	r2, [pc, #264]	@ (80004e4 <main+0x218>)
 80003da:	f023 031f 	bic.w	r3, r3, #31
 80003de:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= (0x00 << ADC_SQR3_SQ1_Pos); // edit to 0
 80003e0:	4b40      	ldr	r3, [pc, #256]	@ (80004e4 <main+0x218>)
 80003e2:	4a40      	ldr	r2, [pc, #256]	@ (80004e4 <main+0x218>)
 80003e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003e6:	6353      	str	r3, [r2, #52]	@ 0x34

	//fpu
	SCB->CPACR |= (0b1111 << 20);
 80003e8:	4b3f      	ldr	r3, [pc, #252]	@ (80004e8 <main+0x21c>)
 80003ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ee:	4a3e      	ldr	r2, [pc, #248]	@ (80004e8 <main+0x21c>)
 80003f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	__asm volatile("dsb");
 80003f8:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
 80003fc:	f3bf 8f6f 	isb	sy

	while (1) {
		ADC1->CR2 |= ADC_CR2_SWSTART;
 8000400:	4b38      	ldr	r3, [pc, #224]	@ (80004e4 <main+0x218>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	4a37      	ldr	r2, [pc, #220]	@ (80004e4 <main+0x218>)
 8000406:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800040a:	6093      	str	r3, [r2, #8]
		while ((ADC1->SR & ADC_SR_EOC) == 0)
 800040c:	bf00      	nop
 800040e:	4b35      	ldr	r3, [pc, #212]	@ (80004e4 <main+0x218>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f003 0302 	and.w	r3, r3, #2
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0f9      	beq.n	800040e <main+0x142>
			;

		float adc_voltage = (ADC1->DR * VREF) / ADC_MAXRES;
 800041a:	4b32      	ldr	r3, [pc, #200]	@ (80004e4 <main+0x218>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	ee07 3a90 	vmov	s15, r3
 8000422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000426:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80004ec <main+0x220>
 800042a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800042e:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80004f0 <main+0x224>
 8000432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000436:	edc7 7a02 	vstr	s15, [r7, #8]
		float r_ntc = RX * adc_voltage / (VCC - adc_voltage);
 800043a:	edd7 7a02 	vldr	s15, [r7, #8]
 800043e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80004f4 <main+0x228>
 8000442:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000446:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80004ec <main+0x220>
 800044a:	edd7 7a02 	vldr	s15, [r7, #8]
 800044e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000456:	edc7 7a01 	vstr	s15, [r7, #4]
		float lightintensity = RX * (adc_voltage / (VCC - adc_voltage));
 800045a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80004ec <main+0x220>
 800045e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000462:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000466:	edd7 6a02 	vldr	s13, [r7, #8]
 800046a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800046e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80004f4 <main+0x228>
 8000472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000476:	edc7 7a00 	vstr	s15, [r7]

		sprintf(stringOut, "Light intensity = %d Lux\n",
 800047a:	edd7 7a00 	vldr	s15, [r7]
 800047e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000482:	ee17 2a90 	vmov	r2, s15
 8000486:	491c      	ldr	r1, [pc, #112]	@ (80004f8 <main+0x22c>)
 8000488:	481c      	ldr	r0, [pc, #112]	@ (80004fc <main+0x230>)
 800048a:	f000 f89d 	bl	80005c8 <siprintf>
				(int32_t) lightintensity);
		vdg_UART_TxString(stringOut);
 800048e:	481b      	ldr	r0, [pc, #108]	@ (80004fc <main+0x230>)
 8000490:	f7ff fef6 	bl	8000280 <vdg_UART_TxString>

		if (lightintensity > 2000) {
 8000494:	edd7 7a00 	vldr	s15, [r7]
 8000498:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000500 <main+0x234>
 800049c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004a4:	dd06      	ble.n	80004b4 <main+0x1e8>
			GPIOA->ODR |= GPIO_ODR_OD5;
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <main+0x210>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a0c      	ldr	r2, [pc, #48]	@ (80004dc <main+0x210>)
 80004ac:	f043 0320 	orr.w	r3, r3, #32
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	e005      	b.n	80004c0 <main+0x1f4>
		} else {
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 80004b4:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <main+0x210>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a08      	ldr	r2, [pc, #32]	@ (80004dc <main+0x210>)
 80004ba:	f023 0320 	bic.w	r3, r3, #32
 80004be:	6153      	str	r3, [r2, #20]
		}

		for (uint32_t iter = 0; iter < THRESHOLD; iter++) {
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	e002      	b.n	80004cc <main+0x200>
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3301      	adds	r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000504 <main+0x238>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d3f8      	bcc.n	80004c6 <main+0x1fa>
	while (1) {
 80004d4:	e794      	b.n	8000400 <main+0x134>
 80004d6:	bf00      	nop
 80004d8:	40023800 	.word	0x40023800
 80004dc:	40020000 	.word	0x40020000
 80004e0:	40004400 	.word	0x40004400
 80004e4:	40012000 	.word	0x40012000
 80004e8:	e000ed00 	.word	0xe000ed00
 80004ec:	40533333 	.word	0x40533333
 80004f0:	457ff000 	.word	0x457ff000
 80004f4:	461c4000 	.word	0x461c4000
 80004f8:	08000f10 	.word	0x08000f10
 80004fc:	2000006c 	.word	0x2000006c
 8000500:	44fa0000 	.word	0x44fa0000
 8000504:	00145855 	.word	0x00145855

08000508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000510:	4a14      	ldr	r2, [pc, #80]	@ (8000564 <_sbrk+0x5c>)
 8000512:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <_sbrk+0x60>)
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <_sbrk+0x64>)
 8000526:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <_sbrk+0x68>)
 8000528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052a:	4b10      	ldr	r3, [pc, #64]	@ (800056c <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	429a      	cmp	r2, r3
 8000536:	d207      	bcs.n	8000548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000538:	f000 f866 	bl	8000608 <__errno>
 800053c:	4603      	mov	r3, r0
 800053e:	220c      	movs	r2, #12
 8000540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	e009      	b.n	800055c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054e:	4b07      	ldr	r3, [pc, #28]	@ (800056c <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	@ (800056c <_sbrk+0x64>)
 8000558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055a:	68fb      	ldr	r3, [r7, #12]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20020000 	.word	0x20020000
 8000568:	00000400 	.word	0x00000400
 800056c:	200000a0 	.word	0x200000a0
 8000570:	200001f0 	.word	0x200001f0

08000574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000574:	480d      	ldr	r0, [pc, #52]	@ (80005ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000576:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000578:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	@ (80005b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	@ (80005b8 <LoopForever+0xe>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	@ (80005bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	@ (80005c0 <LoopForever+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a2:	f000 f837 	bl	8000614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a6:	f7ff fe91 	bl	80002cc <main>

080005aa <LoopForever>:

LoopForever:
  b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   r0, =_estack
 80005ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80005b8:	08000f70 	.word	0x08000f70
  ldr r2, =_sbss
 80005bc:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80005c0:	200001ec 	.word	0x200001ec

080005c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC_IRQHandler>
	...

080005c8 <siprintf>:
 80005c8:	b40e      	push	{r1, r2, r3}
 80005ca:	b500      	push	{lr}
 80005cc:	b09c      	sub	sp, #112	@ 0x70
 80005ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80005d0:	9002      	str	r0, [sp, #8]
 80005d2:	9006      	str	r0, [sp, #24]
 80005d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80005d8:	4809      	ldr	r0, [pc, #36]	@ (8000600 <siprintf+0x38>)
 80005da:	9107      	str	r1, [sp, #28]
 80005dc:	9104      	str	r1, [sp, #16]
 80005de:	4909      	ldr	r1, [pc, #36]	@ (8000604 <siprintf+0x3c>)
 80005e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80005e4:	9105      	str	r1, [sp, #20]
 80005e6:	6800      	ldr	r0, [r0, #0]
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	a902      	add	r1, sp, #8
 80005ec:	f000 f98c 	bl	8000908 <_svfiprintf_r>
 80005f0:	9b02      	ldr	r3, [sp, #8]
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	b01c      	add	sp, #112	@ 0x70
 80005f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80005fc:	b003      	add	sp, #12
 80005fe:	4770      	bx	lr
 8000600:	20000000 	.word	0x20000000
 8000604:	ffff0208 	.word	0xffff0208

08000608 <__errno>:
 8000608:	4b01      	ldr	r3, [pc, #4]	@ (8000610 <__errno+0x8>)
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000

08000614 <__libc_init_array>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	4d0d      	ldr	r5, [pc, #52]	@ (800064c <__libc_init_array+0x38>)
 8000618:	4c0d      	ldr	r4, [pc, #52]	@ (8000650 <__libc_init_array+0x3c>)
 800061a:	1b64      	subs	r4, r4, r5
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	2600      	movs	r6, #0
 8000620:	42a6      	cmp	r6, r4
 8000622:	d109      	bne.n	8000638 <__libc_init_array+0x24>
 8000624:	4d0b      	ldr	r5, [pc, #44]	@ (8000654 <__libc_init_array+0x40>)
 8000626:	4c0c      	ldr	r4, [pc, #48]	@ (8000658 <__libc_init_array+0x44>)
 8000628:	f000 fc66 	bl	8000ef8 <_init>
 800062c:	1b64      	subs	r4, r4, r5
 800062e:	10a4      	asrs	r4, r4, #2
 8000630:	2600      	movs	r6, #0
 8000632:	42a6      	cmp	r6, r4
 8000634:	d105      	bne.n	8000642 <__libc_init_array+0x2e>
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f855 3b04 	ldr.w	r3, [r5], #4
 800063c:	4798      	blx	r3
 800063e:	3601      	adds	r6, #1
 8000640:	e7ee      	b.n	8000620 <__libc_init_array+0xc>
 8000642:	f855 3b04 	ldr.w	r3, [r5], #4
 8000646:	4798      	blx	r3
 8000648:	3601      	adds	r6, #1
 800064a:	e7f2      	b.n	8000632 <__libc_init_array+0x1e>
 800064c:	08000f68 	.word	0x08000f68
 8000650:	08000f68 	.word	0x08000f68
 8000654:	08000f68 	.word	0x08000f68
 8000658:	08000f6c 	.word	0x08000f6c

0800065c <__retarget_lock_acquire_recursive>:
 800065c:	4770      	bx	lr

0800065e <__retarget_lock_release_recursive>:
 800065e:	4770      	bx	lr

08000660 <_free_r>:
 8000660:	b538      	push	{r3, r4, r5, lr}
 8000662:	4605      	mov	r5, r0
 8000664:	2900      	cmp	r1, #0
 8000666:	d041      	beq.n	80006ec <_free_r+0x8c>
 8000668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800066c:	1f0c      	subs	r4, r1, #4
 800066e:	2b00      	cmp	r3, #0
 8000670:	bfb8      	it	lt
 8000672:	18e4      	addlt	r4, r4, r3
 8000674:	f000 f8e0 	bl	8000838 <__malloc_lock>
 8000678:	4a1d      	ldr	r2, [pc, #116]	@ (80006f0 <_free_r+0x90>)
 800067a:	6813      	ldr	r3, [r2, #0]
 800067c:	b933      	cbnz	r3, 800068c <_free_r+0x2c>
 800067e:	6063      	str	r3, [r4, #4]
 8000680:	6014      	str	r4, [r2, #0]
 8000682:	4628      	mov	r0, r5
 8000684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000688:	f000 b8dc 	b.w	8000844 <__malloc_unlock>
 800068c:	42a3      	cmp	r3, r4
 800068e:	d908      	bls.n	80006a2 <_free_r+0x42>
 8000690:	6820      	ldr	r0, [r4, #0]
 8000692:	1821      	adds	r1, r4, r0
 8000694:	428b      	cmp	r3, r1
 8000696:	bf01      	itttt	eq
 8000698:	6819      	ldreq	r1, [r3, #0]
 800069a:	685b      	ldreq	r3, [r3, #4]
 800069c:	1809      	addeq	r1, r1, r0
 800069e:	6021      	streq	r1, [r4, #0]
 80006a0:	e7ed      	b.n	800067e <_free_r+0x1e>
 80006a2:	461a      	mov	r2, r3
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	b10b      	cbz	r3, 80006ac <_free_r+0x4c>
 80006a8:	42a3      	cmp	r3, r4
 80006aa:	d9fa      	bls.n	80006a2 <_free_r+0x42>
 80006ac:	6811      	ldr	r1, [r2, #0]
 80006ae:	1850      	adds	r0, r2, r1
 80006b0:	42a0      	cmp	r0, r4
 80006b2:	d10b      	bne.n	80006cc <_free_r+0x6c>
 80006b4:	6820      	ldr	r0, [r4, #0]
 80006b6:	4401      	add	r1, r0
 80006b8:	1850      	adds	r0, r2, r1
 80006ba:	4283      	cmp	r3, r0
 80006bc:	6011      	str	r1, [r2, #0]
 80006be:	d1e0      	bne.n	8000682 <_free_r+0x22>
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	6053      	str	r3, [r2, #4]
 80006c6:	4408      	add	r0, r1
 80006c8:	6010      	str	r0, [r2, #0]
 80006ca:	e7da      	b.n	8000682 <_free_r+0x22>
 80006cc:	d902      	bls.n	80006d4 <_free_r+0x74>
 80006ce:	230c      	movs	r3, #12
 80006d0:	602b      	str	r3, [r5, #0]
 80006d2:	e7d6      	b.n	8000682 <_free_r+0x22>
 80006d4:	6820      	ldr	r0, [r4, #0]
 80006d6:	1821      	adds	r1, r4, r0
 80006d8:	428b      	cmp	r3, r1
 80006da:	bf04      	itt	eq
 80006dc:	6819      	ldreq	r1, [r3, #0]
 80006de:	685b      	ldreq	r3, [r3, #4]
 80006e0:	6063      	str	r3, [r4, #4]
 80006e2:	bf04      	itt	eq
 80006e4:	1809      	addeq	r1, r1, r0
 80006e6:	6021      	streq	r1, [r4, #0]
 80006e8:	6054      	str	r4, [r2, #4]
 80006ea:	e7ca      	b.n	8000682 <_free_r+0x22>
 80006ec:	bd38      	pop	{r3, r4, r5, pc}
 80006ee:	bf00      	nop
 80006f0:	200001e8 	.word	0x200001e8

080006f4 <sbrk_aligned>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	4e0f      	ldr	r6, [pc, #60]	@ (8000734 <sbrk_aligned+0x40>)
 80006f8:	460c      	mov	r4, r1
 80006fa:	6831      	ldr	r1, [r6, #0]
 80006fc:	4605      	mov	r5, r0
 80006fe:	b911      	cbnz	r1, 8000706 <sbrk_aligned+0x12>
 8000700:	f000 fba6 	bl	8000e50 <_sbrk_r>
 8000704:	6030      	str	r0, [r6, #0]
 8000706:	4621      	mov	r1, r4
 8000708:	4628      	mov	r0, r5
 800070a:	f000 fba1 	bl	8000e50 <_sbrk_r>
 800070e:	1c43      	adds	r3, r0, #1
 8000710:	d103      	bne.n	800071a <sbrk_aligned+0x26>
 8000712:	f04f 34ff 	mov.w	r4, #4294967295
 8000716:	4620      	mov	r0, r4
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	1cc4      	adds	r4, r0, #3
 800071c:	f024 0403 	bic.w	r4, r4, #3
 8000720:	42a0      	cmp	r0, r4
 8000722:	d0f8      	beq.n	8000716 <sbrk_aligned+0x22>
 8000724:	1a21      	subs	r1, r4, r0
 8000726:	4628      	mov	r0, r5
 8000728:	f000 fb92 	bl	8000e50 <_sbrk_r>
 800072c:	3001      	adds	r0, #1
 800072e:	d1f2      	bne.n	8000716 <sbrk_aligned+0x22>
 8000730:	e7ef      	b.n	8000712 <sbrk_aligned+0x1e>
 8000732:	bf00      	nop
 8000734:	200001e4 	.word	0x200001e4

08000738 <_malloc_r>:
 8000738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800073c:	1ccd      	adds	r5, r1, #3
 800073e:	f025 0503 	bic.w	r5, r5, #3
 8000742:	3508      	adds	r5, #8
 8000744:	2d0c      	cmp	r5, #12
 8000746:	bf38      	it	cc
 8000748:	250c      	movcc	r5, #12
 800074a:	2d00      	cmp	r5, #0
 800074c:	4606      	mov	r6, r0
 800074e:	db01      	blt.n	8000754 <_malloc_r+0x1c>
 8000750:	42a9      	cmp	r1, r5
 8000752:	d904      	bls.n	800075e <_malloc_r+0x26>
 8000754:	230c      	movs	r3, #12
 8000756:	6033      	str	r3, [r6, #0]
 8000758:	2000      	movs	r0, #0
 800075a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800075e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000834 <_malloc_r+0xfc>
 8000762:	f000 f869 	bl	8000838 <__malloc_lock>
 8000766:	f8d8 3000 	ldr.w	r3, [r8]
 800076a:	461c      	mov	r4, r3
 800076c:	bb44      	cbnz	r4, 80007c0 <_malloc_r+0x88>
 800076e:	4629      	mov	r1, r5
 8000770:	4630      	mov	r0, r6
 8000772:	f7ff ffbf 	bl	80006f4 <sbrk_aligned>
 8000776:	1c43      	adds	r3, r0, #1
 8000778:	4604      	mov	r4, r0
 800077a:	d158      	bne.n	800082e <_malloc_r+0xf6>
 800077c:	f8d8 4000 	ldr.w	r4, [r8]
 8000780:	4627      	mov	r7, r4
 8000782:	2f00      	cmp	r7, #0
 8000784:	d143      	bne.n	800080e <_malloc_r+0xd6>
 8000786:	2c00      	cmp	r4, #0
 8000788:	d04b      	beq.n	8000822 <_malloc_r+0xea>
 800078a:	6823      	ldr	r3, [r4, #0]
 800078c:	4639      	mov	r1, r7
 800078e:	4630      	mov	r0, r6
 8000790:	eb04 0903 	add.w	r9, r4, r3
 8000794:	f000 fb5c 	bl	8000e50 <_sbrk_r>
 8000798:	4581      	cmp	r9, r0
 800079a:	d142      	bne.n	8000822 <_malloc_r+0xea>
 800079c:	6821      	ldr	r1, [r4, #0]
 800079e:	1a6d      	subs	r5, r5, r1
 80007a0:	4629      	mov	r1, r5
 80007a2:	4630      	mov	r0, r6
 80007a4:	f7ff ffa6 	bl	80006f4 <sbrk_aligned>
 80007a8:	3001      	adds	r0, #1
 80007aa:	d03a      	beq.n	8000822 <_malloc_r+0xea>
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	442b      	add	r3, r5
 80007b0:	6023      	str	r3, [r4, #0]
 80007b2:	f8d8 3000 	ldr.w	r3, [r8]
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	bb62      	cbnz	r2, 8000814 <_malloc_r+0xdc>
 80007ba:	f8c8 7000 	str.w	r7, [r8]
 80007be:	e00f      	b.n	80007e0 <_malloc_r+0xa8>
 80007c0:	6822      	ldr	r2, [r4, #0]
 80007c2:	1b52      	subs	r2, r2, r5
 80007c4:	d420      	bmi.n	8000808 <_malloc_r+0xd0>
 80007c6:	2a0b      	cmp	r2, #11
 80007c8:	d917      	bls.n	80007fa <_malloc_r+0xc2>
 80007ca:	1961      	adds	r1, r4, r5
 80007cc:	42a3      	cmp	r3, r4
 80007ce:	6025      	str	r5, [r4, #0]
 80007d0:	bf18      	it	ne
 80007d2:	6059      	strne	r1, [r3, #4]
 80007d4:	6863      	ldr	r3, [r4, #4]
 80007d6:	bf08      	it	eq
 80007d8:	f8c8 1000 	streq.w	r1, [r8]
 80007dc:	5162      	str	r2, [r4, r5]
 80007de:	604b      	str	r3, [r1, #4]
 80007e0:	4630      	mov	r0, r6
 80007e2:	f000 f82f 	bl	8000844 <__malloc_unlock>
 80007e6:	f104 000b 	add.w	r0, r4, #11
 80007ea:	1d23      	adds	r3, r4, #4
 80007ec:	f020 0007 	bic.w	r0, r0, #7
 80007f0:	1ac2      	subs	r2, r0, r3
 80007f2:	bf1c      	itt	ne
 80007f4:	1a1b      	subne	r3, r3, r0
 80007f6:	50a3      	strne	r3, [r4, r2]
 80007f8:	e7af      	b.n	800075a <_malloc_r+0x22>
 80007fa:	6862      	ldr	r2, [r4, #4]
 80007fc:	42a3      	cmp	r3, r4
 80007fe:	bf0c      	ite	eq
 8000800:	f8c8 2000 	streq.w	r2, [r8]
 8000804:	605a      	strne	r2, [r3, #4]
 8000806:	e7eb      	b.n	80007e0 <_malloc_r+0xa8>
 8000808:	4623      	mov	r3, r4
 800080a:	6864      	ldr	r4, [r4, #4]
 800080c:	e7ae      	b.n	800076c <_malloc_r+0x34>
 800080e:	463c      	mov	r4, r7
 8000810:	687f      	ldr	r7, [r7, #4]
 8000812:	e7b6      	b.n	8000782 <_malloc_r+0x4a>
 8000814:	461a      	mov	r2, r3
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	42a3      	cmp	r3, r4
 800081a:	d1fb      	bne.n	8000814 <_malloc_r+0xdc>
 800081c:	2300      	movs	r3, #0
 800081e:	6053      	str	r3, [r2, #4]
 8000820:	e7de      	b.n	80007e0 <_malloc_r+0xa8>
 8000822:	230c      	movs	r3, #12
 8000824:	6033      	str	r3, [r6, #0]
 8000826:	4630      	mov	r0, r6
 8000828:	f000 f80c 	bl	8000844 <__malloc_unlock>
 800082c:	e794      	b.n	8000758 <_malloc_r+0x20>
 800082e:	6005      	str	r5, [r0, #0]
 8000830:	e7d6      	b.n	80007e0 <_malloc_r+0xa8>
 8000832:	bf00      	nop
 8000834:	200001e8 	.word	0x200001e8

08000838 <__malloc_lock>:
 8000838:	4801      	ldr	r0, [pc, #4]	@ (8000840 <__malloc_lock+0x8>)
 800083a:	f7ff bf0f 	b.w	800065c <__retarget_lock_acquire_recursive>
 800083e:	bf00      	nop
 8000840:	200001e0 	.word	0x200001e0

08000844 <__malloc_unlock>:
 8000844:	4801      	ldr	r0, [pc, #4]	@ (800084c <__malloc_unlock+0x8>)
 8000846:	f7ff bf0a 	b.w	800065e <__retarget_lock_release_recursive>
 800084a:	bf00      	nop
 800084c:	200001e0 	.word	0x200001e0

08000850 <__ssputs_r>:
 8000850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000854:	688e      	ldr	r6, [r1, #8]
 8000856:	461f      	mov	r7, r3
 8000858:	42be      	cmp	r6, r7
 800085a:	680b      	ldr	r3, [r1, #0]
 800085c:	4682      	mov	sl, r0
 800085e:	460c      	mov	r4, r1
 8000860:	4690      	mov	r8, r2
 8000862:	d82d      	bhi.n	80008c0 <__ssputs_r+0x70>
 8000864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000868:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800086c:	d026      	beq.n	80008bc <__ssputs_r+0x6c>
 800086e:	6965      	ldr	r5, [r4, #20]
 8000870:	6909      	ldr	r1, [r1, #16]
 8000872:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000876:	eba3 0901 	sub.w	r9, r3, r1
 800087a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800087e:	1c7b      	adds	r3, r7, #1
 8000880:	444b      	add	r3, r9
 8000882:	106d      	asrs	r5, r5, #1
 8000884:	429d      	cmp	r5, r3
 8000886:	bf38      	it	cc
 8000888:	461d      	movcc	r5, r3
 800088a:	0553      	lsls	r3, r2, #21
 800088c:	d527      	bpl.n	80008de <__ssputs_r+0x8e>
 800088e:	4629      	mov	r1, r5
 8000890:	f7ff ff52 	bl	8000738 <_malloc_r>
 8000894:	4606      	mov	r6, r0
 8000896:	b360      	cbz	r0, 80008f2 <__ssputs_r+0xa2>
 8000898:	6921      	ldr	r1, [r4, #16]
 800089a:	464a      	mov	r2, r9
 800089c:	f000 fae8 	bl	8000e70 <memcpy>
 80008a0:	89a3      	ldrh	r3, [r4, #12]
 80008a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80008a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008aa:	81a3      	strh	r3, [r4, #12]
 80008ac:	6126      	str	r6, [r4, #16]
 80008ae:	6165      	str	r5, [r4, #20]
 80008b0:	444e      	add	r6, r9
 80008b2:	eba5 0509 	sub.w	r5, r5, r9
 80008b6:	6026      	str	r6, [r4, #0]
 80008b8:	60a5      	str	r5, [r4, #8]
 80008ba:	463e      	mov	r6, r7
 80008bc:	42be      	cmp	r6, r7
 80008be:	d900      	bls.n	80008c2 <__ssputs_r+0x72>
 80008c0:	463e      	mov	r6, r7
 80008c2:	6820      	ldr	r0, [r4, #0]
 80008c4:	4632      	mov	r2, r6
 80008c6:	4641      	mov	r1, r8
 80008c8:	f000 faa8 	bl	8000e1c <memmove>
 80008cc:	68a3      	ldr	r3, [r4, #8]
 80008ce:	1b9b      	subs	r3, r3, r6
 80008d0:	60a3      	str	r3, [r4, #8]
 80008d2:	6823      	ldr	r3, [r4, #0]
 80008d4:	4433      	add	r3, r6
 80008d6:	6023      	str	r3, [r4, #0]
 80008d8:	2000      	movs	r0, #0
 80008da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008de:	462a      	mov	r2, r5
 80008e0:	f000 fad4 	bl	8000e8c <_realloc_r>
 80008e4:	4606      	mov	r6, r0
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d1e0      	bne.n	80008ac <__ssputs_r+0x5c>
 80008ea:	6921      	ldr	r1, [r4, #16]
 80008ec:	4650      	mov	r0, sl
 80008ee:	f7ff feb7 	bl	8000660 <_free_r>
 80008f2:	230c      	movs	r3, #12
 80008f4:	f8ca 3000 	str.w	r3, [sl]
 80008f8:	89a3      	ldrh	r3, [r4, #12]
 80008fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008fe:	81a3      	strh	r3, [r4, #12]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	e7e9      	b.n	80008da <__ssputs_r+0x8a>
	...

08000908 <_svfiprintf_r>:
 8000908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800090c:	4698      	mov	r8, r3
 800090e:	898b      	ldrh	r3, [r1, #12]
 8000910:	061b      	lsls	r3, r3, #24
 8000912:	b09d      	sub	sp, #116	@ 0x74
 8000914:	4607      	mov	r7, r0
 8000916:	460d      	mov	r5, r1
 8000918:	4614      	mov	r4, r2
 800091a:	d510      	bpl.n	800093e <_svfiprintf_r+0x36>
 800091c:	690b      	ldr	r3, [r1, #16]
 800091e:	b973      	cbnz	r3, 800093e <_svfiprintf_r+0x36>
 8000920:	2140      	movs	r1, #64	@ 0x40
 8000922:	f7ff ff09 	bl	8000738 <_malloc_r>
 8000926:	6028      	str	r0, [r5, #0]
 8000928:	6128      	str	r0, [r5, #16]
 800092a:	b930      	cbnz	r0, 800093a <_svfiprintf_r+0x32>
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	b01d      	add	sp, #116	@ 0x74
 8000936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800093a:	2340      	movs	r3, #64	@ 0x40
 800093c:	616b      	str	r3, [r5, #20]
 800093e:	2300      	movs	r3, #0
 8000940:	9309      	str	r3, [sp, #36]	@ 0x24
 8000942:	2320      	movs	r3, #32
 8000944:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000948:	f8cd 800c 	str.w	r8, [sp, #12]
 800094c:	2330      	movs	r3, #48	@ 0x30
 800094e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000aec <_svfiprintf_r+0x1e4>
 8000952:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000956:	f04f 0901 	mov.w	r9, #1
 800095a:	4623      	mov	r3, r4
 800095c:	469a      	mov	sl, r3
 800095e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000962:	b10a      	cbz	r2, 8000968 <_svfiprintf_r+0x60>
 8000964:	2a25      	cmp	r2, #37	@ 0x25
 8000966:	d1f9      	bne.n	800095c <_svfiprintf_r+0x54>
 8000968:	ebba 0b04 	subs.w	fp, sl, r4
 800096c:	d00b      	beq.n	8000986 <_svfiprintf_r+0x7e>
 800096e:	465b      	mov	r3, fp
 8000970:	4622      	mov	r2, r4
 8000972:	4629      	mov	r1, r5
 8000974:	4638      	mov	r0, r7
 8000976:	f7ff ff6b 	bl	8000850 <__ssputs_r>
 800097a:	3001      	adds	r0, #1
 800097c:	f000 80a7 	beq.w	8000ace <_svfiprintf_r+0x1c6>
 8000980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000982:	445a      	add	r2, fp
 8000984:	9209      	str	r2, [sp, #36]	@ 0x24
 8000986:	f89a 3000 	ldrb.w	r3, [sl]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 809f 	beq.w	8000ace <_svfiprintf_r+0x1c6>
 8000990:	2300      	movs	r3, #0
 8000992:	f04f 32ff 	mov.w	r2, #4294967295
 8000996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800099a:	f10a 0a01 	add.w	sl, sl, #1
 800099e:	9304      	str	r3, [sp, #16]
 80009a0:	9307      	str	r3, [sp, #28]
 80009a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80009a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80009a8:	4654      	mov	r4, sl
 80009aa:	2205      	movs	r2, #5
 80009ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009b0:	484e      	ldr	r0, [pc, #312]	@ (8000aec <_svfiprintf_r+0x1e4>)
 80009b2:	f7ff fc15 	bl	80001e0 <memchr>
 80009b6:	9a04      	ldr	r2, [sp, #16]
 80009b8:	b9d8      	cbnz	r0, 80009f2 <_svfiprintf_r+0xea>
 80009ba:	06d0      	lsls	r0, r2, #27
 80009bc:	bf44      	itt	mi
 80009be:	2320      	movmi	r3, #32
 80009c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009c4:	0711      	lsls	r1, r2, #28
 80009c6:	bf44      	itt	mi
 80009c8:	232b      	movmi	r3, #43	@ 0x2b
 80009ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009ce:	f89a 3000 	ldrb.w	r3, [sl]
 80009d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80009d4:	d015      	beq.n	8000a02 <_svfiprintf_r+0xfa>
 80009d6:	9a07      	ldr	r2, [sp, #28]
 80009d8:	4654      	mov	r4, sl
 80009da:	2000      	movs	r0, #0
 80009dc:	f04f 0c0a 	mov.w	ip, #10
 80009e0:	4621      	mov	r1, r4
 80009e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009e6:	3b30      	subs	r3, #48	@ 0x30
 80009e8:	2b09      	cmp	r3, #9
 80009ea:	d94b      	bls.n	8000a84 <_svfiprintf_r+0x17c>
 80009ec:	b1b0      	cbz	r0, 8000a1c <_svfiprintf_r+0x114>
 80009ee:	9207      	str	r2, [sp, #28]
 80009f0:	e014      	b.n	8000a1c <_svfiprintf_r+0x114>
 80009f2:	eba0 0308 	sub.w	r3, r0, r8
 80009f6:	fa09 f303 	lsl.w	r3, r9, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	9304      	str	r3, [sp, #16]
 80009fe:	46a2      	mov	sl, r4
 8000a00:	e7d2      	b.n	80009a8 <_svfiprintf_r+0xa0>
 8000a02:	9b03      	ldr	r3, [sp, #12]
 8000a04:	1d19      	adds	r1, r3, #4
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	9103      	str	r1, [sp, #12]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bfbb      	ittet	lt
 8000a0e:	425b      	neglt	r3, r3
 8000a10:	f042 0202 	orrlt.w	r2, r2, #2
 8000a14:	9307      	strge	r3, [sp, #28]
 8000a16:	9307      	strlt	r3, [sp, #28]
 8000a18:	bfb8      	it	lt
 8000a1a:	9204      	strlt	r2, [sp, #16]
 8000a1c:	7823      	ldrb	r3, [r4, #0]
 8000a1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a20:	d10a      	bne.n	8000a38 <_svfiprintf_r+0x130>
 8000a22:	7863      	ldrb	r3, [r4, #1]
 8000a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a26:	d132      	bne.n	8000a8e <_svfiprintf_r+0x186>
 8000a28:	9b03      	ldr	r3, [sp, #12]
 8000a2a:	1d1a      	adds	r2, r3, #4
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	9203      	str	r2, [sp, #12]
 8000a30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a34:	3402      	adds	r4, #2
 8000a36:	9305      	str	r3, [sp, #20]
 8000a38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000afc <_svfiprintf_r+0x1f4>
 8000a3c:	7821      	ldrb	r1, [r4, #0]
 8000a3e:	2203      	movs	r2, #3
 8000a40:	4650      	mov	r0, sl
 8000a42:	f7ff fbcd 	bl	80001e0 <memchr>
 8000a46:	b138      	cbz	r0, 8000a58 <_svfiprintf_r+0x150>
 8000a48:	9b04      	ldr	r3, [sp, #16]
 8000a4a:	eba0 000a 	sub.w	r0, r0, sl
 8000a4e:	2240      	movs	r2, #64	@ 0x40
 8000a50:	4082      	lsls	r2, r0
 8000a52:	4313      	orrs	r3, r2
 8000a54:	3401      	adds	r4, #1
 8000a56:	9304      	str	r3, [sp, #16]
 8000a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a5c:	4824      	ldr	r0, [pc, #144]	@ (8000af0 <_svfiprintf_r+0x1e8>)
 8000a5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a62:	2206      	movs	r2, #6
 8000a64:	f7ff fbbc 	bl	80001e0 <memchr>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d036      	beq.n	8000ada <_svfiprintf_r+0x1d2>
 8000a6c:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <_svfiprintf_r+0x1ec>)
 8000a6e:	bb1b      	cbnz	r3, 8000ab8 <_svfiprintf_r+0x1b0>
 8000a70:	9b03      	ldr	r3, [sp, #12]
 8000a72:	3307      	adds	r3, #7
 8000a74:	f023 0307 	bic.w	r3, r3, #7
 8000a78:	3308      	adds	r3, #8
 8000a7a:	9303      	str	r3, [sp, #12]
 8000a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a7e:	4433      	add	r3, r6
 8000a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a82:	e76a      	b.n	800095a <_svfiprintf_r+0x52>
 8000a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a88:	460c      	mov	r4, r1
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <_svfiprintf_r+0xd8>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	3401      	adds	r4, #1
 8000a92:	9305      	str	r3, [sp, #20]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 0c0a 	mov.w	ip, #10
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000aa0:	3a30      	subs	r2, #48	@ 0x30
 8000aa2:	2a09      	cmp	r2, #9
 8000aa4:	d903      	bls.n	8000aae <_svfiprintf_r+0x1a6>
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0c6      	beq.n	8000a38 <_svfiprintf_r+0x130>
 8000aaa:	9105      	str	r1, [sp, #20]
 8000aac:	e7c4      	b.n	8000a38 <_svfiprintf_r+0x130>
 8000aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e7f0      	b.n	8000a9a <_svfiprintf_r+0x192>
 8000ab8:	ab03      	add	r3, sp, #12
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	462a      	mov	r2, r5
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <_svfiprintf_r+0x1f0>)
 8000ac0:	a904      	add	r1, sp, #16
 8000ac2:	4638      	mov	r0, r7
 8000ac4:	f3af 8000 	nop.w
 8000ac8:	1c42      	adds	r2, r0, #1
 8000aca:	4606      	mov	r6, r0
 8000acc:	d1d6      	bne.n	8000a7c <_svfiprintf_r+0x174>
 8000ace:	89ab      	ldrh	r3, [r5, #12]
 8000ad0:	065b      	lsls	r3, r3, #25
 8000ad2:	f53f af2d 	bmi.w	8000930 <_svfiprintf_r+0x28>
 8000ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ad8:	e72c      	b.n	8000934 <_svfiprintf_r+0x2c>
 8000ada:	ab03      	add	r3, sp, #12
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	462a      	mov	r2, r5
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <_svfiprintf_r+0x1f0>)
 8000ae2:	a904      	add	r1, sp, #16
 8000ae4:	4638      	mov	r0, r7
 8000ae6:	f000 f879 	bl	8000bdc <_printf_i>
 8000aea:	e7ed      	b.n	8000ac8 <_svfiprintf_r+0x1c0>
 8000aec:	08000f2a 	.word	0x08000f2a
 8000af0:	08000f34 	.word	0x08000f34
 8000af4:	00000000 	.word	0x00000000
 8000af8:	08000851 	.word	0x08000851
 8000afc:	08000f30 	.word	0x08000f30

08000b00 <_printf_common>:
 8000b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b04:	4616      	mov	r6, r2
 8000b06:	4698      	mov	r8, r3
 8000b08:	688a      	ldr	r2, [r1, #8]
 8000b0a:	690b      	ldr	r3, [r1, #16]
 8000b0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b10:	4293      	cmp	r3, r2
 8000b12:	bfb8      	it	lt
 8000b14:	4613      	movlt	r3, r2
 8000b16:	6033      	str	r3, [r6, #0]
 8000b18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b1c:	4607      	mov	r7, r0
 8000b1e:	460c      	mov	r4, r1
 8000b20:	b10a      	cbz	r2, 8000b26 <_printf_common+0x26>
 8000b22:	3301      	adds	r3, #1
 8000b24:	6033      	str	r3, [r6, #0]
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	0699      	lsls	r1, r3, #26
 8000b2a:	bf42      	ittt	mi
 8000b2c:	6833      	ldrmi	r3, [r6, #0]
 8000b2e:	3302      	addmi	r3, #2
 8000b30:	6033      	strmi	r3, [r6, #0]
 8000b32:	6825      	ldr	r5, [r4, #0]
 8000b34:	f015 0506 	ands.w	r5, r5, #6
 8000b38:	d106      	bne.n	8000b48 <_printf_common+0x48>
 8000b3a:	f104 0a19 	add.w	sl, r4, #25
 8000b3e:	68e3      	ldr	r3, [r4, #12]
 8000b40:	6832      	ldr	r2, [r6, #0]
 8000b42:	1a9b      	subs	r3, r3, r2
 8000b44:	42ab      	cmp	r3, r5
 8000b46:	dc26      	bgt.n	8000b96 <_printf_common+0x96>
 8000b48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000b4c:	6822      	ldr	r2, [r4, #0]
 8000b4e:	3b00      	subs	r3, #0
 8000b50:	bf18      	it	ne
 8000b52:	2301      	movne	r3, #1
 8000b54:	0692      	lsls	r2, r2, #26
 8000b56:	d42b      	bmi.n	8000bb0 <_printf_common+0xb0>
 8000b58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000b5c:	4641      	mov	r1, r8
 8000b5e:	4638      	mov	r0, r7
 8000b60:	47c8      	blx	r9
 8000b62:	3001      	adds	r0, #1
 8000b64:	d01e      	beq.n	8000ba4 <_printf_common+0xa4>
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	6922      	ldr	r2, [r4, #16]
 8000b6a:	f003 0306 	and.w	r3, r3, #6
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf02      	ittt	eq
 8000b72:	68e5      	ldreq	r5, [r4, #12]
 8000b74:	6833      	ldreq	r3, [r6, #0]
 8000b76:	1aed      	subeq	r5, r5, r3
 8000b78:	68a3      	ldr	r3, [r4, #8]
 8000b7a:	bf0c      	ite	eq
 8000b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000b80:	2500      	movne	r5, #0
 8000b82:	4293      	cmp	r3, r2
 8000b84:	bfc4      	itt	gt
 8000b86:	1a9b      	subgt	r3, r3, r2
 8000b88:	18ed      	addgt	r5, r5, r3
 8000b8a:	2600      	movs	r6, #0
 8000b8c:	341a      	adds	r4, #26
 8000b8e:	42b5      	cmp	r5, r6
 8000b90:	d11a      	bne.n	8000bc8 <_printf_common+0xc8>
 8000b92:	2000      	movs	r0, #0
 8000b94:	e008      	b.n	8000ba8 <_printf_common+0xa8>
 8000b96:	2301      	movs	r3, #1
 8000b98:	4652      	mov	r2, sl
 8000b9a:	4641      	mov	r1, r8
 8000b9c:	4638      	mov	r0, r7
 8000b9e:	47c8      	blx	r9
 8000ba0:	3001      	adds	r0, #1
 8000ba2:	d103      	bne.n	8000bac <_printf_common+0xac>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bac:	3501      	adds	r5, #1
 8000bae:	e7c6      	b.n	8000b3e <_printf_common+0x3e>
 8000bb0:	18e1      	adds	r1, r4, r3
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	2030      	movs	r0, #48	@ 0x30
 8000bb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000bba:	4422      	add	r2, r4
 8000bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000bc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	e7c7      	b.n	8000b58 <_printf_common+0x58>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	4622      	mov	r2, r4
 8000bcc:	4641      	mov	r1, r8
 8000bce:	4638      	mov	r0, r7
 8000bd0:	47c8      	blx	r9
 8000bd2:	3001      	adds	r0, #1
 8000bd4:	d0e6      	beq.n	8000ba4 <_printf_common+0xa4>
 8000bd6:	3601      	adds	r6, #1
 8000bd8:	e7d9      	b.n	8000b8e <_printf_common+0x8e>
	...

08000bdc <_printf_i>:
 8000bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	7e0f      	ldrb	r7, [r1, #24]
 8000be2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000be4:	2f78      	cmp	r7, #120	@ 0x78
 8000be6:	4691      	mov	r9, r2
 8000be8:	4680      	mov	r8, r0
 8000bea:	460c      	mov	r4, r1
 8000bec:	469a      	mov	sl, r3
 8000bee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000bf2:	d807      	bhi.n	8000c04 <_printf_i+0x28>
 8000bf4:	2f62      	cmp	r7, #98	@ 0x62
 8000bf6:	d80a      	bhi.n	8000c0e <_printf_i+0x32>
 8000bf8:	2f00      	cmp	r7, #0
 8000bfa:	f000 80d2 	beq.w	8000da2 <_printf_i+0x1c6>
 8000bfe:	2f58      	cmp	r7, #88	@ 0x58
 8000c00:	f000 80b9 	beq.w	8000d76 <_printf_i+0x19a>
 8000c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000c0c:	e03a      	b.n	8000c84 <_printf_i+0xa8>
 8000c0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c12:	2b15      	cmp	r3, #21
 8000c14:	d8f6      	bhi.n	8000c04 <_printf_i+0x28>
 8000c16:	a101      	add	r1, pc, #4	@ (adr r1, 8000c1c <_printf_i+0x40>)
 8000c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c1c:	08000c75 	.word	0x08000c75
 8000c20:	08000c89 	.word	0x08000c89
 8000c24:	08000c05 	.word	0x08000c05
 8000c28:	08000c05 	.word	0x08000c05
 8000c2c:	08000c05 	.word	0x08000c05
 8000c30:	08000c05 	.word	0x08000c05
 8000c34:	08000c89 	.word	0x08000c89
 8000c38:	08000c05 	.word	0x08000c05
 8000c3c:	08000c05 	.word	0x08000c05
 8000c40:	08000c05 	.word	0x08000c05
 8000c44:	08000c05 	.word	0x08000c05
 8000c48:	08000d89 	.word	0x08000d89
 8000c4c:	08000cb3 	.word	0x08000cb3
 8000c50:	08000d43 	.word	0x08000d43
 8000c54:	08000c05 	.word	0x08000c05
 8000c58:	08000c05 	.word	0x08000c05
 8000c5c:	08000dab 	.word	0x08000dab
 8000c60:	08000c05 	.word	0x08000c05
 8000c64:	08000cb3 	.word	0x08000cb3
 8000c68:	08000c05 	.word	0x08000c05
 8000c6c:	08000c05 	.word	0x08000c05
 8000c70:	08000d4b 	.word	0x08000d4b
 8000c74:	6833      	ldr	r3, [r6, #0]
 8000c76:	1d1a      	adds	r2, r3, #4
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6032      	str	r2, [r6, #0]
 8000c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000c84:	2301      	movs	r3, #1
 8000c86:	e09d      	b.n	8000dc4 <_printf_i+0x1e8>
 8000c88:	6833      	ldr	r3, [r6, #0]
 8000c8a:	6820      	ldr	r0, [r4, #0]
 8000c8c:	1d19      	adds	r1, r3, #4
 8000c8e:	6031      	str	r1, [r6, #0]
 8000c90:	0606      	lsls	r6, r0, #24
 8000c92:	d501      	bpl.n	8000c98 <_printf_i+0xbc>
 8000c94:	681d      	ldr	r5, [r3, #0]
 8000c96:	e003      	b.n	8000ca0 <_printf_i+0xc4>
 8000c98:	0645      	lsls	r5, r0, #25
 8000c9a:	d5fb      	bpl.n	8000c94 <_printf_i+0xb8>
 8000c9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ca0:	2d00      	cmp	r5, #0
 8000ca2:	da03      	bge.n	8000cac <_printf_i+0xd0>
 8000ca4:	232d      	movs	r3, #45	@ 0x2d
 8000ca6:	426d      	negs	r5, r5
 8000ca8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000cac:	4859      	ldr	r0, [pc, #356]	@ (8000e14 <_printf_i+0x238>)
 8000cae:	230a      	movs	r3, #10
 8000cb0:	e011      	b.n	8000cd6 <_printf_i+0xfa>
 8000cb2:	6821      	ldr	r1, [r4, #0]
 8000cb4:	6833      	ldr	r3, [r6, #0]
 8000cb6:	0608      	lsls	r0, r1, #24
 8000cb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8000cbc:	d402      	bmi.n	8000cc4 <_printf_i+0xe8>
 8000cbe:	0649      	lsls	r1, r1, #25
 8000cc0:	bf48      	it	mi
 8000cc2:	b2ad      	uxthmi	r5, r5
 8000cc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8000cc6:	4853      	ldr	r0, [pc, #332]	@ (8000e14 <_printf_i+0x238>)
 8000cc8:	6033      	str	r3, [r6, #0]
 8000cca:	bf14      	ite	ne
 8000ccc:	230a      	movne	r3, #10
 8000cce:	2308      	moveq	r3, #8
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000cd6:	6866      	ldr	r6, [r4, #4]
 8000cd8:	60a6      	str	r6, [r4, #8]
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	bfa2      	ittt	ge
 8000cde:	6821      	ldrge	r1, [r4, #0]
 8000ce0:	f021 0104 	bicge.w	r1, r1, #4
 8000ce4:	6021      	strge	r1, [r4, #0]
 8000ce6:	b90d      	cbnz	r5, 8000cec <_printf_i+0x110>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d04b      	beq.n	8000d84 <_printf_i+0x1a8>
 8000cec:	4616      	mov	r6, r2
 8000cee:	fbb5 f1f3 	udiv	r1, r5, r3
 8000cf2:	fb03 5711 	mls	r7, r3, r1, r5
 8000cf6:	5dc7      	ldrb	r7, [r0, r7]
 8000cf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000cfc:	462f      	mov	r7, r5
 8000cfe:	42bb      	cmp	r3, r7
 8000d00:	460d      	mov	r5, r1
 8000d02:	d9f4      	bls.n	8000cee <_printf_i+0x112>
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d10b      	bne.n	8000d20 <_printf_i+0x144>
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	07df      	lsls	r7, r3, #31
 8000d0c:	d508      	bpl.n	8000d20 <_printf_i+0x144>
 8000d0e:	6923      	ldr	r3, [r4, #16]
 8000d10:	6861      	ldr	r1, [r4, #4]
 8000d12:	4299      	cmp	r1, r3
 8000d14:	bfde      	ittt	le
 8000d16:	2330      	movle	r3, #48	@ 0x30
 8000d18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000d20:	1b92      	subs	r2, r2, r6
 8000d22:	6122      	str	r2, [r4, #16]
 8000d24:	f8cd a000 	str.w	sl, [sp]
 8000d28:	464b      	mov	r3, r9
 8000d2a:	aa03      	add	r2, sp, #12
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	4640      	mov	r0, r8
 8000d30:	f7ff fee6 	bl	8000b00 <_printf_common>
 8000d34:	3001      	adds	r0, #1
 8000d36:	d14a      	bne.n	8000dce <_printf_i+0x1f2>
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	b004      	add	sp, #16
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	6023      	str	r3, [r4, #0]
 8000d4a:	4833      	ldr	r0, [pc, #204]	@ (8000e18 <_printf_i+0x23c>)
 8000d4c:	2778      	movs	r7, #120	@ 0x78
 8000d4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	6831      	ldr	r1, [r6, #0]
 8000d56:	061f      	lsls	r7, r3, #24
 8000d58:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d5c:	d402      	bmi.n	8000d64 <_printf_i+0x188>
 8000d5e:	065f      	lsls	r7, r3, #25
 8000d60:	bf48      	it	mi
 8000d62:	b2ad      	uxthmi	r5, r5
 8000d64:	6031      	str	r1, [r6, #0]
 8000d66:	07d9      	lsls	r1, r3, #31
 8000d68:	bf44      	itt	mi
 8000d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8000d6e:	6023      	strmi	r3, [r4, #0]
 8000d70:	b11d      	cbz	r5, 8000d7a <_printf_i+0x19e>
 8000d72:	2310      	movs	r3, #16
 8000d74:	e7ac      	b.n	8000cd0 <_printf_i+0xf4>
 8000d76:	4827      	ldr	r0, [pc, #156]	@ (8000e14 <_printf_i+0x238>)
 8000d78:	e7e9      	b.n	8000d4e <_printf_i+0x172>
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	f023 0320 	bic.w	r3, r3, #32
 8000d80:	6023      	str	r3, [r4, #0]
 8000d82:	e7f6      	b.n	8000d72 <_printf_i+0x196>
 8000d84:	4616      	mov	r6, r2
 8000d86:	e7bd      	b.n	8000d04 <_printf_i+0x128>
 8000d88:	6833      	ldr	r3, [r6, #0]
 8000d8a:	6825      	ldr	r5, [r4, #0]
 8000d8c:	6961      	ldr	r1, [r4, #20]
 8000d8e:	1d18      	adds	r0, r3, #4
 8000d90:	6030      	str	r0, [r6, #0]
 8000d92:	062e      	lsls	r6, r5, #24
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	d501      	bpl.n	8000d9c <_printf_i+0x1c0>
 8000d98:	6019      	str	r1, [r3, #0]
 8000d9a:	e002      	b.n	8000da2 <_printf_i+0x1c6>
 8000d9c:	0668      	lsls	r0, r5, #25
 8000d9e:	d5fb      	bpl.n	8000d98 <_printf_i+0x1bc>
 8000da0:	8019      	strh	r1, [r3, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	6123      	str	r3, [r4, #16]
 8000da6:	4616      	mov	r6, r2
 8000da8:	e7bc      	b.n	8000d24 <_printf_i+0x148>
 8000daa:	6833      	ldr	r3, [r6, #0]
 8000dac:	1d1a      	adds	r2, r3, #4
 8000dae:	6032      	str	r2, [r6, #0]
 8000db0:	681e      	ldr	r6, [r3, #0]
 8000db2:	6862      	ldr	r2, [r4, #4]
 8000db4:	2100      	movs	r1, #0
 8000db6:	4630      	mov	r0, r6
 8000db8:	f7ff fa12 	bl	80001e0 <memchr>
 8000dbc:	b108      	cbz	r0, 8000dc2 <_printf_i+0x1e6>
 8000dbe:	1b80      	subs	r0, r0, r6
 8000dc0:	6060      	str	r0, [r4, #4]
 8000dc2:	6863      	ldr	r3, [r4, #4]
 8000dc4:	6123      	str	r3, [r4, #16]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000dcc:	e7aa      	b.n	8000d24 <_printf_i+0x148>
 8000dce:	6923      	ldr	r3, [r4, #16]
 8000dd0:	4632      	mov	r2, r6
 8000dd2:	4649      	mov	r1, r9
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	47d0      	blx	sl
 8000dd8:	3001      	adds	r0, #1
 8000dda:	d0ad      	beq.n	8000d38 <_printf_i+0x15c>
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	079b      	lsls	r3, r3, #30
 8000de0:	d413      	bmi.n	8000e0a <_printf_i+0x22e>
 8000de2:	68e0      	ldr	r0, [r4, #12]
 8000de4:	9b03      	ldr	r3, [sp, #12]
 8000de6:	4298      	cmp	r0, r3
 8000de8:	bfb8      	it	lt
 8000dea:	4618      	movlt	r0, r3
 8000dec:	e7a6      	b.n	8000d3c <_printf_i+0x160>
 8000dee:	2301      	movs	r3, #1
 8000df0:	4632      	mov	r2, r6
 8000df2:	4649      	mov	r1, r9
 8000df4:	4640      	mov	r0, r8
 8000df6:	47d0      	blx	sl
 8000df8:	3001      	adds	r0, #1
 8000dfa:	d09d      	beq.n	8000d38 <_printf_i+0x15c>
 8000dfc:	3501      	adds	r5, #1
 8000dfe:	68e3      	ldr	r3, [r4, #12]
 8000e00:	9903      	ldr	r1, [sp, #12]
 8000e02:	1a5b      	subs	r3, r3, r1
 8000e04:	42ab      	cmp	r3, r5
 8000e06:	dcf2      	bgt.n	8000dee <_printf_i+0x212>
 8000e08:	e7eb      	b.n	8000de2 <_printf_i+0x206>
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	f104 0619 	add.w	r6, r4, #25
 8000e10:	e7f5      	b.n	8000dfe <_printf_i+0x222>
 8000e12:	bf00      	nop
 8000e14:	08000f3b 	.word	0x08000f3b
 8000e18:	08000f4c 	.word	0x08000f4c

08000e1c <memmove>:
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	b510      	push	{r4, lr}
 8000e20:	eb01 0402 	add.w	r4, r1, r2
 8000e24:	d902      	bls.n	8000e2c <memmove+0x10>
 8000e26:	4284      	cmp	r4, r0
 8000e28:	4623      	mov	r3, r4
 8000e2a:	d807      	bhi.n	8000e3c <memmove+0x20>
 8000e2c:	1e43      	subs	r3, r0, #1
 8000e2e:	42a1      	cmp	r1, r4
 8000e30:	d008      	beq.n	8000e44 <memmove+0x28>
 8000e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000e3a:	e7f8      	b.n	8000e2e <memmove+0x12>
 8000e3c:	4402      	add	r2, r0
 8000e3e:	4601      	mov	r1, r0
 8000e40:	428a      	cmp	r2, r1
 8000e42:	d100      	bne.n	8000e46 <memmove+0x2a>
 8000e44:	bd10      	pop	{r4, pc}
 8000e46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000e4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000e4e:	e7f7      	b.n	8000e40 <memmove+0x24>

08000e50 <_sbrk_r>:
 8000e50:	b538      	push	{r3, r4, r5, lr}
 8000e52:	4d06      	ldr	r5, [pc, #24]	@ (8000e6c <_sbrk_r+0x1c>)
 8000e54:	2300      	movs	r3, #0
 8000e56:	4604      	mov	r4, r0
 8000e58:	4608      	mov	r0, r1
 8000e5a:	602b      	str	r3, [r5, #0]
 8000e5c:	f7ff fb54 	bl	8000508 <_sbrk>
 8000e60:	1c43      	adds	r3, r0, #1
 8000e62:	d102      	bne.n	8000e6a <_sbrk_r+0x1a>
 8000e64:	682b      	ldr	r3, [r5, #0]
 8000e66:	b103      	cbz	r3, 8000e6a <_sbrk_r+0x1a>
 8000e68:	6023      	str	r3, [r4, #0]
 8000e6a:	bd38      	pop	{r3, r4, r5, pc}
 8000e6c:	200001dc 	.word	0x200001dc

08000e70 <memcpy>:
 8000e70:	440a      	add	r2, r1
 8000e72:	4291      	cmp	r1, r2
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d100      	bne.n	8000e7c <memcpy+0xc>
 8000e7a:	4770      	bx	lr
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d1f9      	bne.n	8000e7e <memcpy+0xe>
 8000e8a:	bd10      	pop	{r4, pc}

08000e8c <_realloc_r>:
 8000e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e90:	4680      	mov	r8, r0
 8000e92:	4615      	mov	r5, r2
 8000e94:	460c      	mov	r4, r1
 8000e96:	b921      	cbnz	r1, 8000ea2 <_realloc_r+0x16>
 8000e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	f7ff bc4b 	b.w	8000738 <_malloc_r>
 8000ea2:	b92a      	cbnz	r2, 8000eb0 <_realloc_r+0x24>
 8000ea4:	f7ff fbdc 	bl	8000660 <_free_r>
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	4620      	mov	r0, r4
 8000eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eb0:	f000 f81a 	bl	8000ee8 <_malloc_usable_size_r>
 8000eb4:	4285      	cmp	r5, r0
 8000eb6:	4606      	mov	r6, r0
 8000eb8:	d802      	bhi.n	8000ec0 <_realloc_r+0x34>
 8000eba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000ebe:	d8f4      	bhi.n	8000eaa <_realloc_r+0x1e>
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	f7ff fc38 	bl	8000738 <_malloc_r>
 8000ec8:	4607      	mov	r7, r0
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d0ec      	beq.n	8000ea8 <_realloc_r+0x1c>
 8000ece:	42b5      	cmp	r5, r6
 8000ed0:	462a      	mov	r2, r5
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	bf28      	it	cs
 8000ed6:	4632      	movcs	r2, r6
 8000ed8:	f7ff ffca 	bl	8000e70 <memcpy>
 8000edc:	4621      	mov	r1, r4
 8000ede:	4640      	mov	r0, r8
 8000ee0:	f7ff fbbe 	bl	8000660 <_free_r>
 8000ee4:	463c      	mov	r4, r7
 8000ee6:	e7e0      	b.n	8000eaa <_realloc_r+0x1e>

08000ee8 <_malloc_usable_size_r>:
 8000ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eec:	1f18      	subs	r0, r3, #4
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bfbc      	itt	lt
 8000ef2:	580b      	ldrlt	r3, [r1, r0]
 8000ef4:	18c0      	addlt	r0, r0, r3
 8000ef6:	4770      	bx	lr

08000ef8 <_init>:
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	bf00      	nop
 8000efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efe:	bc08      	pop	{r3}
 8000f00:	469e      	mov	lr, r3
 8000f02:	4770      	bx	lr

08000f04 <_fini>:
 8000f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f06:	bf00      	nop
 8000f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0a:	bc08      	pop	{r3}
 8000f0c:	469e      	mov	lr, r3
 8000f0e:	4770      	bx	lr
