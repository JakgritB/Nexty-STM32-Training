
Project2_663040111-9_Jakgrit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000470  08000478  00001478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000470  08000470  00001478  2**0
                  CONTENTS
  4 .ARM          00000000  08000470  08000470  00001478  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000470  08000478  00001478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000470  08000470  00001470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000474  08000474  00001474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000478  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000478  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000043e  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000012a  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfde  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006a1  00000000  00000000  0000fa63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050c47  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060d4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00060d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00060de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000458 	.word	0x08000458

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000458 	.word	0x08000458

080001d8 <main>:
#include <stdint.h>
#define STM32F411xE
#include "stm32f4xx.h"

int main(void) {
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	//Clock
	// GPIO Port A, Port B, ADC1
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001de:	4b73      	ldr	r3, [pc, #460]	@ (80003ac <main+0x1d4>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	4a72      	ldr	r2, [pc, #456]	@ (80003ac <main+0x1d4>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80001ea:	4b70      	ldr	r3, [pc, #448]	@ (80003ac <main+0x1d4>)
 80001ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ee:	4a6f      	ldr	r2, [pc, #444]	@ (80003ac <main+0x1d4>)
 80001f0:	f043 0302 	orr.w	r3, r3, #2
 80001f4:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80001f6:	4b6d      	ldr	r3, [pc, #436]	@ (80003ac <main+0x1d4>)
 80001f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001fa:	4a6c      	ldr	r2, [pc, #432]	@ (80003ac <main+0x1d4>)
 80001fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000200:	6453      	str	r3, [r2, #68]	@ 0x44

	// PA5, PA6, PA7
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER5_Pos);
 8000202:	4b6b      	ldr	r3, [pc, #428]	@ (80003b0 <main+0x1d8>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a6a      	ldr	r2, [pc, #424]	@ (80003b0 <main+0x1d8>)
 8000208:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800020c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER6_Pos);
 800020e:	4b68      	ldr	r3, [pc, #416]	@ (80003b0 <main+0x1d8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a67      	ldr	r2, [pc, #412]	@ (80003b0 <main+0x1d8>)
 8000214:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000218:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER7_Pos);
 800021a:	4b65      	ldr	r3, [pc, #404]	@ (80003b0 <main+0x1d8>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a64      	ldr	r2, [pc, #400]	@ (80003b0 <main+0x1d8>)
 8000220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000224:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << GPIO_MODER_MODER6_Pos);
 8000226:	4b63      	ldr	r3, [pc, #396]	@ (80003b4 <main+0x1dc>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a62      	ldr	r2, [pc, #392]	@ (80003b4 <main+0x1dc>)
 800022c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000230:	6013      	str	r3, [r2, #0]

	// PA4 Analog Input
	GPIOA->MODER |= (0b11 << GPIO_MODER_MODER4_Pos);
 8000232:	4b5f      	ldr	r3, [pc, #380]	@ (80003b0 <main+0x1d8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a5e      	ldr	r2, [pc, #376]	@ (80003b0 <main+0x1d8>)
 8000238:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800023c:	6013      	str	r3, [r2, #0]

	ADC1->SQR1 &= ~(ADC_SQR1_L);
 800023e:	4b5e      	ldr	r3, [pc, #376]	@ (80003b8 <main+0x1e0>)
 8000240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000242:	4a5d      	ldr	r2, [pc, #372]	@ (80003b8 <main+0x1e0>)
 8000244:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000248:	62d3      	str	r3, [r2, #44]	@ 0x2c

	ADC1->SQR3 &= ~(ADC_SQR3_SQ1);
 800024a:	4b5b      	ldr	r3, [pc, #364]	@ (80003b8 <main+0x1e0>)
 800024c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800024e:	4a5a      	ldr	r2, [pc, #360]	@ (80003b8 <main+0x1e0>)
 8000250:	f023 031f 	bic.w	r3, r3, #31
 8000254:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= (4 << ADC_SQR3_SQ1_Pos);
 8000256:	4b58      	ldr	r3, [pc, #352]	@ (80003b8 <main+0x1e0>)
 8000258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800025a:	4a57      	ldr	r2, [pc, #348]	@ (80003b8 <main+0x1e0>)
 800025c:	f043 0304 	orr.w	r3, r3, #4
 8000260:	6353      	str	r3, [r2, #52]	@ 0x34

	// ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 8000262:	4b55      	ldr	r3, [pc, #340]	@ (80003b8 <main+0x1e0>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	4a54      	ldr	r2, [pc, #336]	@ (80003b8 <main+0x1e0>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6093      	str	r3, [r2, #8]

	while (1) {
		ADC1->CR2 |= ADC_CR2_SWSTART;
 800026e:	4b52      	ldr	r3, [pc, #328]	@ (80003b8 <main+0x1e0>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	4a51      	ldr	r2, [pc, #324]	@ (80003b8 <main+0x1e0>)
 8000274:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000278:	6093      	str	r3, [r2, #8]

		while ((ADC1->SR & ADC_SR_EOC) == 0);
 800027a:	bf00      	nop
 800027c:	4b4e      	ldr	r3, [pc, #312]	@ (80003b8 <main+0x1e0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f003 0302 	and.w	r3, r3, #2
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f9      	beq.n	800027c <main+0xa4>

		uint16_t adc_value = ADC1->DR;
 8000288:	4b4b      	ldr	r3, [pc, #300]	@ (80003b8 <main+0x1e0>)
 800028a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800028c:	80fb      	strh	r3, [r7, #6]


		if (adc_value > 3280) {
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	f5b3 6f4d 	cmp.w	r3, #3280	@ 0xcd0
 8000294:	d918      	bls.n	80002c8 <main+0xf0>
			GPIOB->ODR &= ~(GPIO_ODR_OD6);
 8000296:	4b47      	ldr	r3, [pc, #284]	@ (80003b4 <main+0x1dc>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a46      	ldr	r2, [pc, #280]	@ (80003b4 <main+0x1dc>)
 800029c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002a0:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD7);
 80002a2:	4b43      	ldr	r3, [pc, #268]	@ (80003b0 <main+0x1d8>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a42      	ldr	r2, [pc, #264]	@ (80003b0 <main+0x1d8>)
 80002a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002ac:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD6);
 80002ae:	4b40      	ldr	r3, [pc, #256]	@ (80003b0 <main+0x1d8>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a3f      	ldr	r2, [pc, #252]	@ (80003b0 <main+0x1d8>)
 80002b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002b8:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 80002ba:	4b3d      	ldr	r3, [pc, #244]	@ (80003b0 <main+0x1d8>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4a3c      	ldr	r2, [pc, #240]	@ (80003b0 <main+0x1d8>)
 80002c0:	f023 0320 	bic.w	r3, r3, #32
 80002c4:	6153      	str	r3, [r2, #20]
 80002c6:	e7d2      	b.n	800026e <main+0x96>
		} else if (adc_value > 2460) {
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	f640 129c 	movw	r2, #2460	@ 0x99c
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d918      	bls.n	8000304 <main+0x12c>
			GPIOB->ODR |= (GPIO_ODR_OD6);
 80002d2:	4b38      	ldr	r3, [pc, #224]	@ (80003b4 <main+0x1dc>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a37      	ldr	r2, [pc, #220]	@ (80003b4 <main+0x1dc>)
 80002d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002dc:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD7);
 80002de:	4b34      	ldr	r3, [pc, #208]	@ (80003b0 <main+0x1d8>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a33      	ldr	r2, [pc, #204]	@ (80003b0 <main+0x1d8>)
 80002e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002e8:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD6);
 80002ea:	4b31      	ldr	r3, [pc, #196]	@ (80003b0 <main+0x1d8>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a30      	ldr	r2, [pc, #192]	@ (80003b0 <main+0x1d8>)
 80002f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002f4:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 80002f6:	4b2e      	ldr	r3, [pc, #184]	@ (80003b0 <main+0x1d8>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a2d      	ldr	r2, [pc, #180]	@ (80003b0 <main+0x1d8>)
 80002fc:	f023 0320 	bic.w	r3, r3, #32
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	e7b4      	b.n	800026e <main+0x96>
		} else if (adc_value > 1640) {
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	f5b3 6fcd 	cmp.w	r3, #1640	@ 0x668
 800030a:	d918      	bls.n	800033e <main+0x166>
			GPIOB->ODR |= (GPIO_ODR_OD6);
 800030c:	4b29      	ldr	r3, [pc, #164]	@ (80003b4 <main+0x1dc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a28      	ldr	r2, [pc, #160]	@ (80003b4 <main+0x1dc>)
 8000312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000316:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD7);
 8000318:	4b25      	ldr	r3, [pc, #148]	@ (80003b0 <main+0x1d8>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a24      	ldr	r2, [pc, #144]	@ (80003b0 <main+0x1d8>)
 800031e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000322:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD6);
 8000324:	4b22      	ldr	r3, [pc, #136]	@ (80003b0 <main+0x1d8>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a21      	ldr	r2, [pc, #132]	@ (80003b0 <main+0x1d8>)
 800032a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800032e:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 8000330:	4b1f      	ldr	r3, [pc, #124]	@ (80003b0 <main+0x1d8>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a1e      	ldr	r2, [pc, #120]	@ (80003b0 <main+0x1d8>)
 8000336:	f023 0320 	bic.w	r3, r3, #32
 800033a:	6153      	str	r3, [r2, #20]
 800033c:	e797      	b.n	800026e <main+0x96>
		} else if (adc_value > 820) {
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	f5b3 7f4d 	cmp.w	r3, #820	@ 0x334
 8000344:	d918      	bls.n	8000378 <main+0x1a0>
			GPIOB->ODR |= (GPIO_ODR_OD6);
 8000346:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <main+0x1dc>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a1a      	ldr	r2, [pc, #104]	@ (80003b4 <main+0x1dc>)
 800034c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000350:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD7);
 8000352:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <main+0x1d8>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a16      	ldr	r2, [pc, #88]	@ (80003b0 <main+0x1d8>)
 8000358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800035c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD6);
 800035e:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <main+0x1d8>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a13      	ldr	r2, [pc, #76]	@ (80003b0 <main+0x1d8>)
 8000364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000368:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 800036a:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <main+0x1d8>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a10      	ldr	r2, [pc, #64]	@ (80003b0 <main+0x1d8>)
 8000370:	f023 0320 	bic.w	r3, r3, #32
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	e77a      	b.n	800026e <main+0x96>
		} else {
			GPIOB->ODR |= (GPIO_ODR_OD6);
 8000378:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <main+0x1dc>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <main+0x1dc>)
 800037e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000382:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD7);
 8000384:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <main+0x1d8>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a09      	ldr	r2, [pc, #36]	@ (80003b0 <main+0x1d8>)
 800038a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800038e:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD6);
 8000390:	4b07      	ldr	r3, [pc, #28]	@ (80003b0 <main+0x1d8>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a06      	ldr	r2, [pc, #24]	@ (80003b0 <main+0x1d8>)
 8000396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800039a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD5);
 800039c:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <main+0x1d8>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a03      	ldr	r2, [pc, #12]	@ (80003b0 <main+0x1d8>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6153      	str	r3, [r2, #20]
	while (1) {
 80003a8:	e761      	b.n	800026e <main+0x96>
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020000 	.word	0x40020000
 80003b4:	40020400 	.word	0x40020400
 80003b8:	40012000 	.word	0x40012000

080003bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003bc:	480d      	ldr	r0, [pc, #52]	@ (80003f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	@ (80003f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	@ (80003fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000400 <LoopForever+0xe>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	@ (8000404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000408 <LoopForever+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ea:	f000 f811 	bl	8000410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ee:	f7ff fef3 	bl	80001d8 <main>

080003f2 <LoopForever>:

LoopForever:
  b LoopForever
 80003f2:	e7fe      	b.n	80003f2 <LoopForever>
  ldr   r0, =_estack
 80003f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000400:	08000478 	.word	0x08000478
  ldr r2, =_sbss
 8000404:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000408:	2000001c 	.word	0x2000001c

0800040c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC_IRQHandler>
	...

08000410 <__libc_init_array>:
 8000410:	b570      	push	{r4, r5, r6, lr}
 8000412:	4d0d      	ldr	r5, [pc, #52]	@ (8000448 <__libc_init_array+0x38>)
 8000414:	4c0d      	ldr	r4, [pc, #52]	@ (800044c <__libc_init_array+0x3c>)
 8000416:	1b64      	subs	r4, r4, r5
 8000418:	10a4      	asrs	r4, r4, #2
 800041a:	2600      	movs	r6, #0
 800041c:	42a6      	cmp	r6, r4
 800041e:	d109      	bne.n	8000434 <__libc_init_array+0x24>
 8000420:	4d0b      	ldr	r5, [pc, #44]	@ (8000450 <__libc_init_array+0x40>)
 8000422:	4c0c      	ldr	r4, [pc, #48]	@ (8000454 <__libc_init_array+0x44>)
 8000424:	f000 f818 	bl	8000458 <_init>
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	10a4      	asrs	r4, r4, #2
 800042c:	2600      	movs	r6, #0
 800042e:	42a6      	cmp	r6, r4
 8000430:	d105      	bne.n	800043e <__libc_init_array+0x2e>
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f855 3b04 	ldr.w	r3, [r5], #4
 8000438:	4798      	blx	r3
 800043a:	3601      	adds	r6, #1
 800043c:	e7ee      	b.n	800041c <__libc_init_array+0xc>
 800043e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000442:	4798      	blx	r3
 8000444:	3601      	adds	r6, #1
 8000446:	e7f2      	b.n	800042e <__libc_init_array+0x1e>
 8000448:	08000470 	.word	0x08000470
 800044c:	08000470 	.word	0x08000470
 8000450:	08000470 	.word	0x08000470
 8000454:	08000474 	.word	0x08000474

08000458 <_init>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr

08000464 <_fini>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr
