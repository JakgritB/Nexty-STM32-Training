
Training_Lab3.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c14  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000db4  08000db4  00001db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dfc  08000dfc  00002050  2**0
                  CONTENTS
  4 .ARM          00000008  08000dfc  08000dfc  00001dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000e04  08000e04  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e04  08000e04  00001e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e08  08000e08  00001e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000e0c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000050  08000e5c  00002050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000e5c  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005ee  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023f  00000000  00000000  0000266e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  000028b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e319  00000000  00000000  00002966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c0b  00000000  00000000  00010c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00052f09  00000000  00000000  0001188a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00064793  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f0  00000000  00000000  000647d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00064dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000d9c 	.word	0x08000d9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08000d9c 	.word	0x08000d9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vdg_UART_TxString>:
#include "stm32f4xx.h"

char stringBuffer[15];
const uint32_t THRESHOLD = 1333333;

void vdg_UART_TxString(char strOut[]) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	for (uint8_t idx = 0; strOut[idx] != '\0'; idx++) {
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	e00f      	b.n	80002ae <vdg_UART_TxString+0x2e>
		while((USART2->SR & USART_SR_TXE) == 0);
 800028e:	bf00      	nop
 8000290:	4b0d      	ldr	r3, [pc, #52]	@ (80002c8 <vdg_UART_TxString+0x48>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f9      	beq.n	8000290 <vdg_UART_TxString+0x10>
		USART2->DR = strOut[idx];
 800029c:	7bfb      	ldrb	r3, [r7, #15]
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	4413      	add	r3, r2
 80002a2:	781a      	ldrb	r2, [r3, #0]
 80002a4:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <vdg_UART_TxString+0x48>)
 80002a6:	605a      	str	r2, [r3, #4]
	for (uint8_t idx = 0; strOut[idx] != '\0'; idx++) {
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	3301      	adds	r3, #1
 80002ac:	73fb      	strb	r3, [r7, #15]
 80002ae:	7bfb      	ldrb	r3, [r7, #15]
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d1e9      	bne.n	800028e <vdg_UART_TxString+0xe>
	}
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40004400 	.word	0x40004400

080002cc <main>:

int main(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN + RCC_AHB1ENR_GPIOBEN;
 80002d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000390 <main+0xc4>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000390 <main+0xc4>)
 80002d8:	f043 0303 	orr.w	r3, r3, #3
 80002dc:	6313      	str	r3, [r2, #48]	@ 0x30

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80002de:	4b2c      	ldr	r3, [pc, #176]	@ (8000390 <main+0xc4>)
 80002e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002e2:	4a2b      	ldr	r2, [pc, #172]	@ (8000390 <main+0xc4>)
 80002e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002e8:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);
 80002ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000394 <main+0xc8>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a29      	ldr	r2, [pc, #164]	@ (8000394 <main+0xc8>)
 80002f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002f4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER2_Pos) + (0b10 << GPIO_MODER_MODER3_Pos);
 80002f6:	4b27      	ldr	r3, [pc, #156]	@ (8000394 <main+0xc8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a26      	ldr	r2, [pc, #152]	@ (8000394 <main+0xc8>)
 80002fc:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000300:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 8000302:	4b24      	ldr	r3, [pc, #144]	@ (8000394 <main+0xc8>)
 8000304:	6a1b      	ldr	r3, [r3, #32]
 8000306:	4a23      	ldr	r2, [pc, #140]	@ (8000394 <main+0xc8>)
 8000308:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800030c:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL2_Pos) + (0b0111 << GPIO_AFRL_AFSEL3_Pos);
 800030e:	4b21      	ldr	r3, [pc, #132]	@ (8000394 <main+0xc8>)
 8000310:	6a1b      	ldr	r3, [r3, #32]
 8000312:	4a20      	ldr	r2, [pc, #128]	@ (8000394 <main+0xc8>)
 8000314:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000318:	6213      	str	r3, [r2, #32]

	USART2->CR1 |= USART_CR1_UE;
 800031a:	4b1f      	ldr	r3, [pc, #124]	@ (8000398 <main+0xcc>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	4a1e      	ldr	r2, [pc, #120]	@ (8000398 <main+0xcc>)
 8000320:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000324:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~ USART_CR1_M;
 8000326:	4b1c      	ldr	r3, [pc, #112]	@ (8000398 <main+0xcc>)
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	4a1b      	ldr	r2, [pc, #108]	@ (8000398 <main+0xcc>)
 800032c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000330:	60d3      	str	r3, [r2, #12]
	USART2->CR2 &= ~ USART_CR2_STOP;
 8000332:	4b19      	ldr	r3, [pc, #100]	@ (8000398 <main+0xcc>)
 8000334:	691b      	ldr	r3, [r3, #16]
 8000336:	4a18      	ldr	r2, [pc, #96]	@ (8000398 <main+0xcc>)
 8000338:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800033c:	6113      	str	r3, [r2, #16]
	USART2->BRR = 139;
 800033e:	4b16      	ldr	r3, [pc, #88]	@ (8000398 <main+0xcc>)
 8000340:	228b      	movs	r2, #139	@ 0x8b
 8000342:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;
 8000344:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <main+0xcc>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a13      	ldr	r2, [pc, #76]	@ (8000398 <main+0xcc>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	60d3      	str	r3, [r2, #12]

	while(1) {
		if ((GPIOB->IDR & GPIO_IDR_ID4) == 0){
 8000350:	4b12      	ldr	r3, [pc, #72]	@ (800039c <main+0xd0>)
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	f003 0310 	and.w	r3, r3, #16
 8000358:	2b00      	cmp	r3, #0
 800035a:	d105      	bne.n	8000368 <main+0x9c>
			sprintf(stringBuffer, "Button status = %d\n", 1);
 800035c:	2201      	movs	r2, #1
 800035e:	4910      	ldr	r1, [pc, #64]	@ (80003a0 <main+0xd4>)
 8000360:	4810      	ldr	r0, [pc, #64]	@ (80003a4 <main+0xd8>)
 8000362:	f000 f883 	bl	800046c <siprintf>
 8000366:	e004      	b.n	8000372 <main+0xa6>
		}
		else {
			sprintf(stringBuffer, "Button status = %d\n", 0);
 8000368:	2200      	movs	r2, #0
 800036a:	490d      	ldr	r1, [pc, #52]	@ (80003a0 <main+0xd4>)
 800036c:	480d      	ldr	r0, [pc, #52]	@ (80003a4 <main+0xd8>)
 800036e:	f000 f87d 	bl	800046c <siprintf>
		}

		vdg_UART_TxString(stringBuffer);
 8000372:	480c      	ldr	r0, [pc, #48]	@ (80003a4 <main+0xd8>)
 8000374:	f7ff ff84 	bl	8000280 <vdg_UART_TxString>
		for (uint32_t iter = 0; iter < THRESHOLD; iter++) {
 8000378:	2300      	movs	r3, #0
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	e002      	b.n	8000384 <main+0xb8>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	3301      	adds	r3, #1
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	4a08      	ldr	r2, [pc, #32]	@ (80003a8 <main+0xdc>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4293      	cmp	r3, r2
 800038a:	d3f8      	bcc.n	800037e <main+0xb2>
		if ((GPIOB->IDR & GPIO_IDR_ID4) == 0){
 800038c:	e7e0      	b.n	8000350 <main+0x84>
 800038e:	bf00      	nop
 8000390:	40023800 	.word	0x40023800
 8000394:	40020000 	.word	0x40020000
 8000398:	40004400 	.word	0x40004400
 800039c:	40020400 	.word	0x40020400
 80003a0:	08000db4 	.word	0x08000db4
 80003a4:	2000006c 	.word	0x2000006c
 80003a8:	00145855 	.word	0x00145855

080003ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003b4:	4a14      	ldr	r2, [pc, #80]	@ (8000408 <_sbrk+0x5c>)
 80003b6:	4b15      	ldr	r3, [pc, #84]	@ (800040c <_sbrk+0x60>)
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c0:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <_sbrk+0x64>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <_sbrk+0x64>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <_sbrk+0x68>)
 80003cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <_sbrk+0x64>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4413      	add	r3, r2
 80003d6:	693a      	ldr	r2, [r7, #16]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d207      	bcs.n	80003ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003dc:	f000 f866 	bl	80004ac <__errno>
 80003e0:	4603      	mov	r3, r0
 80003e2:	220c      	movs	r2, #12
 80003e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ea:	e009      	b.n	8000400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003ec:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <_sbrk+0x64>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003f2:	4b07      	ldr	r3, [pc, #28]	@ (8000410 <_sbrk+0x64>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	4a05      	ldr	r2, [pc, #20]	@ (8000410 <_sbrk+0x64>)
 80003fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003fe:	68fb      	ldr	r3, [r7, #12]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3718      	adds	r7, #24
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20020000 	.word	0x20020000
 800040c:	00000400 	.word	0x00000400
 8000410:	2000007c 	.word	0x2000007c
 8000414:	200001c8 	.word	0x200001c8

08000418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000418:	480d      	ldr	r0, [pc, #52]	@ (8000450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800041c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480c      	ldr	r0, [pc, #48]	@ (8000454 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490d      	ldr	r1, [pc, #52]	@ (8000458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0d      	ldr	r2, [pc, #52]	@ (800045c <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0a      	ldr	r2, [pc, #40]	@ (8000460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0a      	ldr	r4, [pc, #40]	@ (8000464 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000446:	f000 f837 	bl	80004b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044a:	f7ff ff3f 	bl	80002cc <main>

0800044e <LoopForever>:

LoopForever:
  b LoopForever
 800044e:	e7fe      	b.n	800044e <LoopForever>
  ldr   r0, =_estack
 8000450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800045c:	08000e0c 	.word	0x08000e0c
  ldr r2, =_sbss
 8000460:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000464:	200001c8 	.word	0x200001c8

08000468 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC_IRQHandler>
	...

0800046c <siprintf>:
 800046c:	b40e      	push	{r1, r2, r3}
 800046e:	b500      	push	{lr}
 8000470:	b09c      	sub	sp, #112	@ 0x70
 8000472:	ab1d      	add	r3, sp, #116	@ 0x74
 8000474:	9002      	str	r0, [sp, #8]
 8000476:	9006      	str	r0, [sp, #24]
 8000478:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800047c:	4809      	ldr	r0, [pc, #36]	@ (80004a4 <siprintf+0x38>)
 800047e:	9107      	str	r1, [sp, #28]
 8000480:	9104      	str	r1, [sp, #16]
 8000482:	4909      	ldr	r1, [pc, #36]	@ (80004a8 <siprintf+0x3c>)
 8000484:	f853 2b04 	ldr.w	r2, [r3], #4
 8000488:	9105      	str	r1, [sp, #20]
 800048a:	6800      	ldr	r0, [r0, #0]
 800048c:	9301      	str	r3, [sp, #4]
 800048e:	a902      	add	r1, sp, #8
 8000490:	f000 f98c 	bl	80007ac <_svfiprintf_r>
 8000494:	9b02      	ldr	r3, [sp, #8]
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
 800049a:	b01c      	add	sp, #112	@ 0x70
 800049c:	f85d eb04 	ldr.w	lr, [sp], #4
 80004a0:	b003      	add	sp, #12
 80004a2:	4770      	bx	lr
 80004a4:	20000000 	.word	0x20000000
 80004a8:	ffff0208 	.word	0xffff0208

080004ac <__errno>:
 80004ac:	4b01      	ldr	r3, [pc, #4]	@ (80004b4 <__errno+0x8>)
 80004ae:	6818      	ldr	r0, [r3, #0]
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	20000000 	.word	0x20000000

080004b8 <__libc_init_array>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	4d0d      	ldr	r5, [pc, #52]	@ (80004f0 <__libc_init_array+0x38>)
 80004bc:	4c0d      	ldr	r4, [pc, #52]	@ (80004f4 <__libc_init_array+0x3c>)
 80004be:	1b64      	subs	r4, r4, r5
 80004c0:	10a4      	asrs	r4, r4, #2
 80004c2:	2600      	movs	r6, #0
 80004c4:	42a6      	cmp	r6, r4
 80004c6:	d109      	bne.n	80004dc <__libc_init_array+0x24>
 80004c8:	4d0b      	ldr	r5, [pc, #44]	@ (80004f8 <__libc_init_array+0x40>)
 80004ca:	4c0c      	ldr	r4, [pc, #48]	@ (80004fc <__libc_init_array+0x44>)
 80004cc:	f000 fc66 	bl	8000d9c <_init>
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	10a4      	asrs	r4, r4, #2
 80004d4:	2600      	movs	r6, #0
 80004d6:	42a6      	cmp	r6, r4
 80004d8:	d105      	bne.n	80004e6 <__libc_init_array+0x2e>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e0:	4798      	blx	r3
 80004e2:	3601      	adds	r6, #1
 80004e4:	e7ee      	b.n	80004c4 <__libc_init_array+0xc>
 80004e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ea:	4798      	blx	r3
 80004ec:	3601      	adds	r6, #1
 80004ee:	e7f2      	b.n	80004d6 <__libc_init_array+0x1e>
 80004f0:	08000e04 	.word	0x08000e04
 80004f4:	08000e04 	.word	0x08000e04
 80004f8:	08000e04 	.word	0x08000e04
 80004fc:	08000e08 	.word	0x08000e08

08000500 <__retarget_lock_acquire_recursive>:
 8000500:	4770      	bx	lr

08000502 <__retarget_lock_release_recursive>:
 8000502:	4770      	bx	lr

08000504 <_free_r>:
 8000504:	b538      	push	{r3, r4, r5, lr}
 8000506:	4605      	mov	r5, r0
 8000508:	2900      	cmp	r1, #0
 800050a:	d041      	beq.n	8000590 <_free_r+0x8c>
 800050c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000510:	1f0c      	subs	r4, r1, #4
 8000512:	2b00      	cmp	r3, #0
 8000514:	bfb8      	it	lt
 8000516:	18e4      	addlt	r4, r4, r3
 8000518:	f000 f8e0 	bl	80006dc <__malloc_lock>
 800051c:	4a1d      	ldr	r2, [pc, #116]	@ (8000594 <_free_r+0x90>)
 800051e:	6813      	ldr	r3, [r2, #0]
 8000520:	b933      	cbnz	r3, 8000530 <_free_r+0x2c>
 8000522:	6063      	str	r3, [r4, #4]
 8000524:	6014      	str	r4, [r2, #0]
 8000526:	4628      	mov	r0, r5
 8000528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800052c:	f000 b8dc 	b.w	80006e8 <__malloc_unlock>
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <_free_r+0x42>
 8000534:	6820      	ldr	r0, [r4, #0]
 8000536:	1821      	adds	r1, r4, r0
 8000538:	428b      	cmp	r3, r1
 800053a:	bf01      	itttt	eq
 800053c:	6819      	ldreq	r1, [r3, #0]
 800053e:	685b      	ldreq	r3, [r3, #4]
 8000540:	1809      	addeq	r1, r1, r0
 8000542:	6021      	streq	r1, [r4, #0]
 8000544:	e7ed      	b.n	8000522 <_free_r+0x1e>
 8000546:	461a      	mov	r2, r3
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	b10b      	cbz	r3, 8000550 <_free_r+0x4c>
 800054c:	42a3      	cmp	r3, r4
 800054e:	d9fa      	bls.n	8000546 <_free_r+0x42>
 8000550:	6811      	ldr	r1, [r2, #0]
 8000552:	1850      	adds	r0, r2, r1
 8000554:	42a0      	cmp	r0, r4
 8000556:	d10b      	bne.n	8000570 <_free_r+0x6c>
 8000558:	6820      	ldr	r0, [r4, #0]
 800055a:	4401      	add	r1, r0
 800055c:	1850      	adds	r0, r2, r1
 800055e:	4283      	cmp	r3, r0
 8000560:	6011      	str	r1, [r2, #0]
 8000562:	d1e0      	bne.n	8000526 <_free_r+0x22>
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	6053      	str	r3, [r2, #4]
 800056a:	4408      	add	r0, r1
 800056c:	6010      	str	r0, [r2, #0]
 800056e:	e7da      	b.n	8000526 <_free_r+0x22>
 8000570:	d902      	bls.n	8000578 <_free_r+0x74>
 8000572:	230c      	movs	r3, #12
 8000574:	602b      	str	r3, [r5, #0]
 8000576:	e7d6      	b.n	8000526 <_free_r+0x22>
 8000578:	6820      	ldr	r0, [r4, #0]
 800057a:	1821      	adds	r1, r4, r0
 800057c:	428b      	cmp	r3, r1
 800057e:	bf04      	itt	eq
 8000580:	6819      	ldreq	r1, [r3, #0]
 8000582:	685b      	ldreq	r3, [r3, #4]
 8000584:	6063      	str	r3, [r4, #4]
 8000586:	bf04      	itt	eq
 8000588:	1809      	addeq	r1, r1, r0
 800058a:	6021      	streq	r1, [r4, #0]
 800058c:	6054      	str	r4, [r2, #4]
 800058e:	e7ca      	b.n	8000526 <_free_r+0x22>
 8000590:	bd38      	pop	{r3, r4, r5, pc}
 8000592:	bf00      	nop
 8000594:	200001c4 	.word	0x200001c4

08000598 <sbrk_aligned>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	4e0f      	ldr	r6, [pc, #60]	@ (80005d8 <sbrk_aligned+0x40>)
 800059c:	460c      	mov	r4, r1
 800059e:	6831      	ldr	r1, [r6, #0]
 80005a0:	4605      	mov	r5, r0
 80005a2:	b911      	cbnz	r1, 80005aa <sbrk_aligned+0x12>
 80005a4:	f000 fba6 	bl	8000cf4 <_sbrk_r>
 80005a8:	6030      	str	r0, [r6, #0]
 80005aa:	4621      	mov	r1, r4
 80005ac:	4628      	mov	r0, r5
 80005ae:	f000 fba1 	bl	8000cf4 <_sbrk_r>
 80005b2:	1c43      	adds	r3, r0, #1
 80005b4:	d103      	bne.n	80005be <sbrk_aligned+0x26>
 80005b6:	f04f 34ff 	mov.w	r4, #4294967295
 80005ba:	4620      	mov	r0, r4
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	1cc4      	adds	r4, r0, #3
 80005c0:	f024 0403 	bic.w	r4, r4, #3
 80005c4:	42a0      	cmp	r0, r4
 80005c6:	d0f8      	beq.n	80005ba <sbrk_aligned+0x22>
 80005c8:	1a21      	subs	r1, r4, r0
 80005ca:	4628      	mov	r0, r5
 80005cc:	f000 fb92 	bl	8000cf4 <_sbrk_r>
 80005d0:	3001      	adds	r0, #1
 80005d2:	d1f2      	bne.n	80005ba <sbrk_aligned+0x22>
 80005d4:	e7ef      	b.n	80005b6 <sbrk_aligned+0x1e>
 80005d6:	bf00      	nop
 80005d8:	200001c0 	.word	0x200001c0

080005dc <_malloc_r>:
 80005dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005e0:	1ccd      	adds	r5, r1, #3
 80005e2:	f025 0503 	bic.w	r5, r5, #3
 80005e6:	3508      	adds	r5, #8
 80005e8:	2d0c      	cmp	r5, #12
 80005ea:	bf38      	it	cc
 80005ec:	250c      	movcc	r5, #12
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	4606      	mov	r6, r0
 80005f2:	db01      	blt.n	80005f8 <_malloc_r+0x1c>
 80005f4:	42a9      	cmp	r1, r5
 80005f6:	d904      	bls.n	8000602 <_malloc_r+0x26>
 80005f8:	230c      	movs	r3, #12
 80005fa:	6033      	str	r3, [r6, #0]
 80005fc:	2000      	movs	r0, #0
 80005fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80006d8 <_malloc_r+0xfc>
 8000606:	f000 f869 	bl	80006dc <__malloc_lock>
 800060a:	f8d8 3000 	ldr.w	r3, [r8]
 800060e:	461c      	mov	r4, r3
 8000610:	bb44      	cbnz	r4, 8000664 <_malloc_r+0x88>
 8000612:	4629      	mov	r1, r5
 8000614:	4630      	mov	r0, r6
 8000616:	f7ff ffbf 	bl	8000598 <sbrk_aligned>
 800061a:	1c43      	adds	r3, r0, #1
 800061c:	4604      	mov	r4, r0
 800061e:	d158      	bne.n	80006d2 <_malloc_r+0xf6>
 8000620:	f8d8 4000 	ldr.w	r4, [r8]
 8000624:	4627      	mov	r7, r4
 8000626:	2f00      	cmp	r7, #0
 8000628:	d143      	bne.n	80006b2 <_malloc_r+0xd6>
 800062a:	2c00      	cmp	r4, #0
 800062c:	d04b      	beq.n	80006c6 <_malloc_r+0xea>
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	4639      	mov	r1, r7
 8000632:	4630      	mov	r0, r6
 8000634:	eb04 0903 	add.w	r9, r4, r3
 8000638:	f000 fb5c 	bl	8000cf4 <_sbrk_r>
 800063c:	4581      	cmp	r9, r0
 800063e:	d142      	bne.n	80006c6 <_malloc_r+0xea>
 8000640:	6821      	ldr	r1, [r4, #0]
 8000642:	1a6d      	subs	r5, r5, r1
 8000644:	4629      	mov	r1, r5
 8000646:	4630      	mov	r0, r6
 8000648:	f7ff ffa6 	bl	8000598 <sbrk_aligned>
 800064c:	3001      	adds	r0, #1
 800064e:	d03a      	beq.n	80006c6 <_malloc_r+0xea>
 8000650:	6823      	ldr	r3, [r4, #0]
 8000652:	442b      	add	r3, r5
 8000654:	6023      	str	r3, [r4, #0]
 8000656:	f8d8 3000 	ldr.w	r3, [r8]
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	bb62      	cbnz	r2, 80006b8 <_malloc_r+0xdc>
 800065e:	f8c8 7000 	str.w	r7, [r8]
 8000662:	e00f      	b.n	8000684 <_malloc_r+0xa8>
 8000664:	6822      	ldr	r2, [r4, #0]
 8000666:	1b52      	subs	r2, r2, r5
 8000668:	d420      	bmi.n	80006ac <_malloc_r+0xd0>
 800066a:	2a0b      	cmp	r2, #11
 800066c:	d917      	bls.n	800069e <_malloc_r+0xc2>
 800066e:	1961      	adds	r1, r4, r5
 8000670:	42a3      	cmp	r3, r4
 8000672:	6025      	str	r5, [r4, #0]
 8000674:	bf18      	it	ne
 8000676:	6059      	strne	r1, [r3, #4]
 8000678:	6863      	ldr	r3, [r4, #4]
 800067a:	bf08      	it	eq
 800067c:	f8c8 1000 	streq.w	r1, [r8]
 8000680:	5162      	str	r2, [r4, r5]
 8000682:	604b      	str	r3, [r1, #4]
 8000684:	4630      	mov	r0, r6
 8000686:	f000 f82f 	bl	80006e8 <__malloc_unlock>
 800068a:	f104 000b 	add.w	r0, r4, #11
 800068e:	1d23      	adds	r3, r4, #4
 8000690:	f020 0007 	bic.w	r0, r0, #7
 8000694:	1ac2      	subs	r2, r0, r3
 8000696:	bf1c      	itt	ne
 8000698:	1a1b      	subne	r3, r3, r0
 800069a:	50a3      	strne	r3, [r4, r2]
 800069c:	e7af      	b.n	80005fe <_malloc_r+0x22>
 800069e:	6862      	ldr	r2, [r4, #4]
 80006a0:	42a3      	cmp	r3, r4
 80006a2:	bf0c      	ite	eq
 80006a4:	f8c8 2000 	streq.w	r2, [r8]
 80006a8:	605a      	strne	r2, [r3, #4]
 80006aa:	e7eb      	b.n	8000684 <_malloc_r+0xa8>
 80006ac:	4623      	mov	r3, r4
 80006ae:	6864      	ldr	r4, [r4, #4]
 80006b0:	e7ae      	b.n	8000610 <_malloc_r+0x34>
 80006b2:	463c      	mov	r4, r7
 80006b4:	687f      	ldr	r7, [r7, #4]
 80006b6:	e7b6      	b.n	8000626 <_malloc_r+0x4a>
 80006b8:	461a      	mov	r2, r3
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	42a3      	cmp	r3, r4
 80006be:	d1fb      	bne.n	80006b8 <_malloc_r+0xdc>
 80006c0:	2300      	movs	r3, #0
 80006c2:	6053      	str	r3, [r2, #4]
 80006c4:	e7de      	b.n	8000684 <_malloc_r+0xa8>
 80006c6:	230c      	movs	r3, #12
 80006c8:	6033      	str	r3, [r6, #0]
 80006ca:	4630      	mov	r0, r6
 80006cc:	f000 f80c 	bl	80006e8 <__malloc_unlock>
 80006d0:	e794      	b.n	80005fc <_malloc_r+0x20>
 80006d2:	6005      	str	r5, [r0, #0]
 80006d4:	e7d6      	b.n	8000684 <_malloc_r+0xa8>
 80006d6:	bf00      	nop
 80006d8:	200001c4 	.word	0x200001c4

080006dc <__malloc_lock>:
 80006dc:	4801      	ldr	r0, [pc, #4]	@ (80006e4 <__malloc_lock+0x8>)
 80006de:	f7ff bf0f 	b.w	8000500 <__retarget_lock_acquire_recursive>
 80006e2:	bf00      	nop
 80006e4:	200001bc 	.word	0x200001bc

080006e8 <__malloc_unlock>:
 80006e8:	4801      	ldr	r0, [pc, #4]	@ (80006f0 <__malloc_unlock+0x8>)
 80006ea:	f7ff bf0a 	b.w	8000502 <__retarget_lock_release_recursive>
 80006ee:	bf00      	nop
 80006f0:	200001bc 	.word	0x200001bc

080006f4 <__ssputs_r>:
 80006f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006f8:	688e      	ldr	r6, [r1, #8]
 80006fa:	461f      	mov	r7, r3
 80006fc:	42be      	cmp	r6, r7
 80006fe:	680b      	ldr	r3, [r1, #0]
 8000700:	4682      	mov	sl, r0
 8000702:	460c      	mov	r4, r1
 8000704:	4690      	mov	r8, r2
 8000706:	d82d      	bhi.n	8000764 <__ssputs_r+0x70>
 8000708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800070c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000710:	d026      	beq.n	8000760 <__ssputs_r+0x6c>
 8000712:	6965      	ldr	r5, [r4, #20]
 8000714:	6909      	ldr	r1, [r1, #16]
 8000716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800071a:	eba3 0901 	sub.w	r9, r3, r1
 800071e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000722:	1c7b      	adds	r3, r7, #1
 8000724:	444b      	add	r3, r9
 8000726:	106d      	asrs	r5, r5, #1
 8000728:	429d      	cmp	r5, r3
 800072a:	bf38      	it	cc
 800072c:	461d      	movcc	r5, r3
 800072e:	0553      	lsls	r3, r2, #21
 8000730:	d527      	bpl.n	8000782 <__ssputs_r+0x8e>
 8000732:	4629      	mov	r1, r5
 8000734:	f7ff ff52 	bl	80005dc <_malloc_r>
 8000738:	4606      	mov	r6, r0
 800073a:	b360      	cbz	r0, 8000796 <__ssputs_r+0xa2>
 800073c:	6921      	ldr	r1, [r4, #16]
 800073e:	464a      	mov	r2, r9
 8000740:	f000 fae8 	bl	8000d14 <memcpy>
 8000744:	89a3      	ldrh	r3, [r4, #12]
 8000746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800074a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800074e:	81a3      	strh	r3, [r4, #12]
 8000750:	6126      	str	r6, [r4, #16]
 8000752:	6165      	str	r5, [r4, #20]
 8000754:	444e      	add	r6, r9
 8000756:	eba5 0509 	sub.w	r5, r5, r9
 800075a:	6026      	str	r6, [r4, #0]
 800075c:	60a5      	str	r5, [r4, #8]
 800075e:	463e      	mov	r6, r7
 8000760:	42be      	cmp	r6, r7
 8000762:	d900      	bls.n	8000766 <__ssputs_r+0x72>
 8000764:	463e      	mov	r6, r7
 8000766:	6820      	ldr	r0, [r4, #0]
 8000768:	4632      	mov	r2, r6
 800076a:	4641      	mov	r1, r8
 800076c:	f000 faa8 	bl	8000cc0 <memmove>
 8000770:	68a3      	ldr	r3, [r4, #8]
 8000772:	1b9b      	subs	r3, r3, r6
 8000774:	60a3      	str	r3, [r4, #8]
 8000776:	6823      	ldr	r3, [r4, #0]
 8000778:	4433      	add	r3, r6
 800077a:	6023      	str	r3, [r4, #0]
 800077c:	2000      	movs	r0, #0
 800077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000782:	462a      	mov	r2, r5
 8000784:	f000 fad4 	bl	8000d30 <_realloc_r>
 8000788:	4606      	mov	r6, r0
 800078a:	2800      	cmp	r0, #0
 800078c:	d1e0      	bne.n	8000750 <__ssputs_r+0x5c>
 800078e:	6921      	ldr	r1, [r4, #16]
 8000790:	4650      	mov	r0, sl
 8000792:	f7ff feb7 	bl	8000504 <_free_r>
 8000796:	230c      	movs	r3, #12
 8000798:	f8ca 3000 	str.w	r3, [sl]
 800079c:	89a3      	ldrh	r3, [r4, #12]
 800079e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007a2:	81a3      	strh	r3, [r4, #12]
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	e7e9      	b.n	800077e <__ssputs_r+0x8a>
	...

080007ac <_svfiprintf_r>:
 80007ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007b0:	4698      	mov	r8, r3
 80007b2:	898b      	ldrh	r3, [r1, #12]
 80007b4:	061b      	lsls	r3, r3, #24
 80007b6:	b09d      	sub	sp, #116	@ 0x74
 80007b8:	4607      	mov	r7, r0
 80007ba:	460d      	mov	r5, r1
 80007bc:	4614      	mov	r4, r2
 80007be:	d510      	bpl.n	80007e2 <_svfiprintf_r+0x36>
 80007c0:	690b      	ldr	r3, [r1, #16]
 80007c2:	b973      	cbnz	r3, 80007e2 <_svfiprintf_r+0x36>
 80007c4:	2140      	movs	r1, #64	@ 0x40
 80007c6:	f7ff ff09 	bl	80005dc <_malloc_r>
 80007ca:	6028      	str	r0, [r5, #0]
 80007cc:	6128      	str	r0, [r5, #16]
 80007ce:	b930      	cbnz	r0, 80007de <_svfiprintf_r+0x32>
 80007d0:	230c      	movs	r3, #12
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	b01d      	add	sp, #116	@ 0x74
 80007da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007de:	2340      	movs	r3, #64	@ 0x40
 80007e0:	616b      	str	r3, [r5, #20]
 80007e2:	2300      	movs	r3, #0
 80007e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80007e6:	2320      	movs	r3, #32
 80007e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80007ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80007f0:	2330      	movs	r3, #48	@ 0x30
 80007f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000990 <_svfiprintf_r+0x1e4>
 80007f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80007fa:	f04f 0901 	mov.w	r9, #1
 80007fe:	4623      	mov	r3, r4
 8000800:	469a      	mov	sl, r3
 8000802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000806:	b10a      	cbz	r2, 800080c <_svfiprintf_r+0x60>
 8000808:	2a25      	cmp	r2, #37	@ 0x25
 800080a:	d1f9      	bne.n	8000800 <_svfiprintf_r+0x54>
 800080c:	ebba 0b04 	subs.w	fp, sl, r4
 8000810:	d00b      	beq.n	800082a <_svfiprintf_r+0x7e>
 8000812:	465b      	mov	r3, fp
 8000814:	4622      	mov	r2, r4
 8000816:	4629      	mov	r1, r5
 8000818:	4638      	mov	r0, r7
 800081a:	f7ff ff6b 	bl	80006f4 <__ssputs_r>
 800081e:	3001      	adds	r0, #1
 8000820:	f000 80a7 	beq.w	8000972 <_svfiprintf_r+0x1c6>
 8000824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000826:	445a      	add	r2, fp
 8000828:	9209      	str	r2, [sp, #36]	@ 0x24
 800082a:	f89a 3000 	ldrb.w	r3, [sl]
 800082e:	2b00      	cmp	r3, #0
 8000830:	f000 809f 	beq.w	8000972 <_svfiprintf_r+0x1c6>
 8000834:	2300      	movs	r3, #0
 8000836:	f04f 32ff 	mov.w	r2, #4294967295
 800083a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800083e:	f10a 0a01 	add.w	sl, sl, #1
 8000842:	9304      	str	r3, [sp, #16]
 8000844:	9307      	str	r3, [sp, #28]
 8000846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800084a:	931a      	str	r3, [sp, #104]	@ 0x68
 800084c:	4654      	mov	r4, sl
 800084e:	2205      	movs	r2, #5
 8000850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000854:	484e      	ldr	r0, [pc, #312]	@ (8000990 <_svfiprintf_r+0x1e4>)
 8000856:	f7ff fcc3 	bl	80001e0 <memchr>
 800085a:	9a04      	ldr	r2, [sp, #16]
 800085c:	b9d8      	cbnz	r0, 8000896 <_svfiprintf_r+0xea>
 800085e:	06d0      	lsls	r0, r2, #27
 8000860:	bf44      	itt	mi
 8000862:	2320      	movmi	r3, #32
 8000864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000868:	0711      	lsls	r1, r2, #28
 800086a:	bf44      	itt	mi
 800086c:	232b      	movmi	r3, #43	@ 0x2b
 800086e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000872:	f89a 3000 	ldrb.w	r3, [sl]
 8000876:	2b2a      	cmp	r3, #42	@ 0x2a
 8000878:	d015      	beq.n	80008a6 <_svfiprintf_r+0xfa>
 800087a:	9a07      	ldr	r2, [sp, #28]
 800087c:	4654      	mov	r4, sl
 800087e:	2000      	movs	r0, #0
 8000880:	f04f 0c0a 	mov.w	ip, #10
 8000884:	4621      	mov	r1, r4
 8000886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800088a:	3b30      	subs	r3, #48	@ 0x30
 800088c:	2b09      	cmp	r3, #9
 800088e:	d94b      	bls.n	8000928 <_svfiprintf_r+0x17c>
 8000890:	b1b0      	cbz	r0, 80008c0 <_svfiprintf_r+0x114>
 8000892:	9207      	str	r2, [sp, #28]
 8000894:	e014      	b.n	80008c0 <_svfiprintf_r+0x114>
 8000896:	eba0 0308 	sub.w	r3, r0, r8
 800089a:	fa09 f303 	lsl.w	r3, r9, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	9304      	str	r3, [sp, #16]
 80008a2:	46a2      	mov	sl, r4
 80008a4:	e7d2      	b.n	800084c <_svfiprintf_r+0xa0>
 80008a6:	9b03      	ldr	r3, [sp, #12]
 80008a8:	1d19      	adds	r1, r3, #4
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	9103      	str	r1, [sp, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	bfbb      	ittet	lt
 80008b2:	425b      	neglt	r3, r3
 80008b4:	f042 0202 	orrlt.w	r2, r2, #2
 80008b8:	9307      	strge	r3, [sp, #28]
 80008ba:	9307      	strlt	r3, [sp, #28]
 80008bc:	bfb8      	it	lt
 80008be:	9204      	strlt	r2, [sp, #16]
 80008c0:	7823      	ldrb	r3, [r4, #0]
 80008c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80008c4:	d10a      	bne.n	80008dc <_svfiprintf_r+0x130>
 80008c6:	7863      	ldrb	r3, [r4, #1]
 80008c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80008ca:	d132      	bne.n	8000932 <_svfiprintf_r+0x186>
 80008cc:	9b03      	ldr	r3, [sp, #12]
 80008ce:	1d1a      	adds	r2, r3, #4
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	9203      	str	r2, [sp, #12]
 80008d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80008d8:	3402      	adds	r4, #2
 80008da:	9305      	str	r3, [sp, #20]
 80008dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80009a0 <_svfiprintf_r+0x1f4>
 80008e0:	7821      	ldrb	r1, [r4, #0]
 80008e2:	2203      	movs	r2, #3
 80008e4:	4650      	mov	r0, sl
 80008e6:	f7ff fc7b 	bl	80001e0 <memchr>
 80008ea:	b138      	cbz	r0, 80008fc <_svfiprintf_r+0x150>
 80008ec:	9b04      	ldr	r3, [sp, #16]
 80008ee:	eba0 000a 	sub.w	r0, r0, sl
 80008f2:	2240      	movs	r2, #64	@ 0x40
 80008f4:	4082      	lsls	r2, r0
 80008f6:	4313      	orrs	r3, r2
 80008f8:	3401      	adds	r4, #1
 80008fa:	9304      	str	r3, [sp, #16]
 80008fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000900:	4824      	ldr	r0, [pc, #144]	@ (8000994 <_svfiprintf_r+0x1e8>)
 8000902:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000906:	2206      	movs	r2, #6
 8000908:	f7ff fc6a 	bl	80001e0 <memchr>
 800090c:	2800      	cmp	r0, #0
 800090e:	d036      	beq.n	800097e <_svfiprintf_r+0x1d2>
 8000910:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <_svfiprintf_r+0x1ec>)
 8000912:	bb1b      	cbnz	r3, 800095c <_svfiprintf_r+0x1b0>
 8000914:	9b03      	ldr	r3, [sp, #12]
 8000916:	3307      	adds	r3, #7
 8000918:	f023 0307 	bic.w	r3, r3, #7
 800091c:	3308      	adds	r3, #8
 800091e:	9303      	str	r3, [sp, #12]
 8000920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000922:	4433      	add	r3, r6
 8000924:	9309      	str	r3, [sp, #36]	@ 0x24
 8000926:	e76a      	b.n	80007fe <_svfiprintf_r+0x52>
 8000928:	fb0c 3202 	mla	r2, ip, r2, r3
 800092c:	460c      	mov	r4, r1
 800092e:	2001      	movs	r0, #1
 8000930:	e7a8      	b.n	8000884 <_svfiprintf_r+0xd8>
 8000932:	2300      	movs	r3, #0
 8000934:	3401      	adds	r4, #1
 8000936:	9305      	str	r3, [sp, #20]
 8000938:	4619      	mov	r1, r3
 800093a:	f04f 0c0a 	mov.w	ip, #10
 800093e:	4620      	mov	r0, r4
 8000940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000944:	3a30      	subs	r2, #48	@ 0x30
 8000946:	2a09      	cmp	r2, #9
 8000948:	d903      	bls.n	8000952 <_svfiprintf_r+0x1a6>
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0c6      	beq.n	80008dc <_svfiprintf_r+0x130>
 800094e:	9105      	str	r1, [sp, #20]
 8000950:	e7c4      	b.n	80008dc <_svfiprintf_r+0x130>
 8000952:	fb0c 2101 	mla	r1, ip, r1, r2
 8000956:	4604      	mov	r4, r0
 8000958:	2301      	movs	r3, #1
 800095a:	e7f0      	b.n	800093e <_svfiprintf_r+0x192>
 800095c:	ab03      	add	r3, sp, #12
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	462a      	mov	r2, r5
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <_svfiprintf_r+0x1f0>)
 8000964:	a904      	add	r1, sp, #16
 8000966:	4638      	mov	r0, r7
 8000968:	f3af 8000 	nop.w
 800096c:	1c42      	adds	r2, r0, #1
 800096e:	4606      	mov	r6, r0
 8000970:	d1d6      	bne.n	8000920 <_svfiprintf_r+0x174>
 8000972:	89ab      	ldrh	r3, [r5, #12]
 8000974:	065b      	lsls	r3, r3, #25
 8000976:	f53f af2d 	bmi.w	80007d4 <_svfiprintf_r+0x28>
 800097a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800097c:	e72c      	b.n	80007d8 <_svfiprintf_r+0x2c>
 800097e:	ab03      	add	r3, sp, #12
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	462a      	mov	r2, r5
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <_svfiprintf_r+0x1f0>)
 8000986:	a904      	add	r1, sp, #16
 8000988:	4638      	mov	r0, r7
 800098a:	f000 f879 	bl	8000a80 <_printf_i>
 800098e:	e7ed      	b.n	800096c <_svfiprintf_r+0x1c0>
 8000990:	08000dc8 	.word	0x08000dc8
 8000994:	08000dd2 	.word	0x08000dd2
 8000998:	00000000 	.word	0x00000000
 800099c:	080006f5 	.word	0x080006f5
 80009a0:	08000dce 	.word	0x08000dce

080009a4 <_printf_common>:
 80009a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a8:	4616      	mov	r6, r2
 80009aa:	4698      	mov	r8, r3
 80009ac:	688a      	ldr	r2, [r1, #8]
 80009ae:	690b      	ldr	r3, [r1, #16]
 80009b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80009b4:	4293      	cmp	r3, r2
 80009b6:	bfb8      	it	lt
 80009b8:	4613      	movlt	r3, r2
 80009ba:	6033      	str	r3, [r6, #0]
 80009bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80009c0:	4607      	mov	r7, r0
 80009c2:	460c      	mov	r4, r1
 80009c4:	b10a      	cbz	r2, 80009ca <_printf_common+0x26>
 80009c6:	3301      	adds	r3, #1
 80009c8:	6033      	str	r3, [r6, #0]
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	0699      	lsls	r1, r3, #26
 80009ce:	bf42      	ittt	mi
 80009d0:	6833      	ldrmi	r3, [r6, #0]
 80009d2:	3302      	addmi	r3, #2
 80009d4:	6033      	strmi	r3, [r6, #0]
 80009d6:	6825      	ldr	r5, [r4, #0]
 80009d8:	f015 0506 	ands.w	r5, r5, #6
 80009dc:	d106      	bne.n	80009ec <_printf_common+0x48>
 80009de:	f104 0a19 	add.w	sl, r4, #25
 80009e2:	68e3      	ldr	r3, [r4, #12]
 80009e4:	6832      	ldr	r2, [r6, #0]
 80009e6:	1a9b      	subs	r3, r3, r2
 80009e8:	42ab      	cmp	r3, r5
 80009ea:	dc26      	bgt.n	8000a3a <_printf_common+0x96>
 80009ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80009f0:	6822      	ldr	r2, [r4, #0]
 80009f2:	3b00      	subs	r3, #0
 80009f4:	bf18      	it	ne
 80009f6:	2301      	movne	r3, #1
 80009f8:	0692      	lsls	r2, r2, #26
 80009fa:	d42b      	bmi.n	8000a54 <_printf_common+0xb0>
 80009fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000a00:	4641      	mov	r1, r8
 8000a02:	4638      	mov	r0, r7
 8000a04:	47c8      	blx	r9
 8000a06:	3001      	adds	r0, #1
 8000a08:	d01e      	beq.n	8000a48 <_printf_common+0xa4>
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	6922      	ldr	r2, [r4, #16]
 8000a0e:	f003 0306 	and.w	r3, r3, #6
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf02      	ittt	eq
 8000a16:	68e5      	ldreq	r5, [r4, #12]
 8000a18:	6833      	ldreq	r3, [r6, #0]
 8000a1a:	1aed      	subeq	r5, r5, r3
 8000a1c:	68a3      	ldr	r3, [r4, #8]
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000a24:	2500      	movne	r5, #0
 8000a26:	4293      	cmp	r3, r2
 8000a28:	bfc4      	itt	gt
 8000a2a:	1a9b      	subgt	r3, r3, r2
 8000a2c:	18ed      	addgt	r5, r5, r3
 8000a2e:	2600      	movs	r6, #0
 8000a30:	341a      	adds	r4, #26
 8000a32:	42b5      	cmp	r5, r6
 8000a34:	d11a      	bne.n	8000a6c <_printf_common+0xc8>
 8000a36:	2000      	movs	r0, #0
 8000a38:	e008      	b.n	8000a4c <_printf_common+0xa8>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	4652      	mov	r2, sl
 8000a3e:	4641      	mov	r1, r8
 8000a40:	4638      	mov	r0, r7
 8000a42:	47c8      	blx	r9
 8000a44:	3001      	adds	r0, #1
 8000a46:	d103      	bne.n	8000a50 <_printf_common+0xac>
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a50:	3501      	adds	r5, #1
 8000a52:	e7c6      	b.n	80009e2 <_printf_common+0x3e>
 8000a54:	18e1      	adds	r1, r4, r3
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	2030      	movs	r0, #48	@ 0x30
 8000a5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000a5e:	4422      	add	r2, r4
 8000a60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000a64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000a68:	3302      	adds	r3, #2
 8000a6a:	e7c7      	b.n	80009fc <_printf_common+0x58>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	4622      	mov	r2, r4
 8000a70:	4641      	mov	r1, r8
 8000a72:	4638      	mov	r0, r7
 8000a74:	47c8      	blx	r9
 8000a76:	3001      	adds	r0, #1
 8000a78:	d0e6      	beq.n	8000a48 <_printf_common+0xa4>
 8000a7a:	3601      	adds	r6, #1
 8000a7c:	e7d9      	b.n	8000a32 <_printf_common+0x8e>
	...

08000a80 <_printf_i>:
 8000a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000a84:	7e0f      	ldrb	r7, [r1, #24]
 8000a86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000a88:	2f78      	cmp	r7, #120	@ 0x78
 8000a8a:	4691      	mov	r9, r2
 8000a8c:	4680      	mov	r8, r0
 8000a8e:	460c      	mov	r4, r1
 8000a90:	469a      	mov	sl, r3
 8000a92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000a96:	d807      	bhi.n	8000aa8 <_printf_i+0x28>
 8000a98:	2f62      	cmp	r7, #98	@ 0x62
 8000a9a:	d80a      	bhi.n	8000ab2 <_printf_i+0x32>
 8000a9c:	2f00      	cmp	r7, #0
 8000a9e:	f000 80d2 	beq.w	8000c46 <_printf_i+0x1c6>
 8000aa2:	2f58      	cmp	r7, #88	@ 0x58
 8000aa4:	f000 80b9 	beq.w	8000c1a <_printf_i+0x19a>
 8000aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000aac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ab0:	e03a      	b.n	8000b28 <_printf_i+0xa8>
 8000ab2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ab6:	2b15      	cmp	r3, #21
 8000ab8:	d8f6      	bhi.n	8000aa8 <_printf_i+0x28>
 8000aba:	a101      	add	r1, pc, #4	@ (adr r1, 8000ac0 <_printf_i+0x40>)
 8000abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ac0:	08000b19 	.word	0x08000b19
 8000ac4:	08000b2d 	.word	0x08000b2d
 8000ac8:	08000aa9 	.word	0x08000aa9
 8000acc:	08000aa9 	.word	0x08000aa9
 8000ad0:	08000aa9 	.word	0x08000aa9
 8000ad4:	08000aa9 	.word	0x08000aa9
 8000ad8:	08000b2d 	.word	0x08000b2d
 8000adc:	08000aa9 	.word	0x08000aa9
 8000ae0:	08000aa9 	.word	0x08000aa9
 8000ae4:	08000aa9 	.word	0x08000aa9
 8000ae8:	08000aa9 	.word	0x08000aa9
 8000aec:	08000c2d 	.word	0x08000c2d
 8000af0:	08000b57 	.word	0x08000b57
 8000af4:	08000be7 	.word	0x08000be7
 8000af8:	08000aa9 	.word	0x08000aa9
 8000afc:	08000aa9 	.word	0x08000aa9
 8000b00:	08000c4f 	.word	0x08000c4f
 8000b04:	08000aa9 	.word	0x08000aa9
 8000b08:	08000b57 	.word	0x08000b57
 8000b0c:	08000aa9 	.word	0x08000aa9
 8000b10:	08000aa9 	.word	0x08000aa9
 8000b14:	08000bef 	.word	0x08000bef
 8000b18:	6833      	ldr	r3, [r6, #0]
 8000b1a:	1d1a      	adds	r2, r3, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6032      	str	r2, [r6, #0]
 8000b20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000b24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e09d      	b.n	8000c68 <_printf_i+0x1e8>
 8000b2c:	6833      	ldr	r3, [r6, #0]
 8000b2e:	6820      	ldr	r0, [r4, #0]
 8000b30:	1d19      	adds	r1, r3, #4
 8000b32:	6031      	str	r1, [r6, #0]
 8000b34:	0606      	lsls	r6, r0, #24
 8000b36:	d501      	bpl.n	8000b3c <_printf_i+0xbc>
 8000b38:	681d      	ldr	r5, [r3, #0]
 8000b3a:	e003      	b.n	8000b44 <_printf_i+0xc4>
 8000b3c:	0645      	lsls	r5, r0, #25
 8000b3e:	d5fb      	bpl.n	8000b38 <_printf_i+0xb8>
 8000b40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	da03      	bge.n	8000b50 <_printf_i+0xd0>
 8000b48:	232d      	movs	r3, #45	@ 0x2d
 8000b4a:	426d      	negs	r5, r5
 8000b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000b50:	4859      	ldr	r0, [pc, #356]	@ (8000cb8 <_printf_i+0x238>)
 8000b52:	230a      	movs	r3, #10
 8000b54:	e011      	b.n	8000b7a <_printf_i+0xfa>
 8000b56:	6821      	ldr	r1, [r4, #0]
 8000b58:	6833      	ldr	r3, [r6, #0]
 8000b5a:	0608      	lsls	r0, r1, #24
 8000b5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000b60:	d402      	bmi.n	8000b68 <_printf_i+0xe8>
 8000b62:	0649      	lsls	r1, r1, #25
 8000b64:	bf48      	it	mi
 8000b66:	b2ad      	uxthmi	r5, r5
 8000b68:	2f6f      	cmp	r7, #111	@ 0x6f
 8000b6a:	4853      	ldr	r0, [pc, #332]	@ (8000cb8 <_printf_i+0x238>)
 8000b6c:	6033      	str	r3, [r6, #0]
 8000b6e:	bf14      	ite	ne
 8000b70:	230a      	movne	r3, #10
 8000b72:	2308      	moveq	r3, #8
 8000b74:	2100      	movs	r1, #0
 8000b76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000b7a:	6866      	ldr	r6, [r4, #4]
 8000b7c:	60a6      	str	r6, [r4, #8]
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	bfa2      	ittt	ge
 8000b82:	6821      	ldrge	r1, [r4, #0]
 8000b84:	f021 0104 	bicge.w	r1, r1, #4
 8000b88:	6021      	strge	r1, [r4, #0]
 8000b8a:	b90d      	cbnz	r5, 8000b90 <_printf_i+0x110>
 8000b8c:	2e00      	cmp	r6, #0
 8000b8e:	d04b      	beq.n	8000c28 <_printf_i+0x1a8>
 8000b90:	4616      	mov	r6, r2
 8000b92:	fbb5 f1f3 	udiv	r1, r5, r3
 8000b96:	fb03 5711 	mls	r7, r3, r1, r5
 8000b9a:	5dc7      	ldrb	r7, [r0, r7]
 8000b9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ba0:	462f      	mov	r7, r5
 8000ba2:	42bb      	cmp	r3, r7
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	d9f4      	bls.n	8000b92 <_printf_i+0x112>
 8000ba8:	2b08      	cmp	r3, #8
 8000baa:	d10b      	bne.n	8000bc4 <_printf_i+0x144>
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	07df      	lsls	r7, r3, #31
 8000bb0:	d508      	bpl.n	8000bc4 <_printf_i+0x144>
 8000bb2:	6923      	ldr	r3, [r4, #16]
 8000bb4:	6861      	ldr	r1, [r4, #4]
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	bfde      	ittt	le
 8000bba:	2330      	movle	r3, #48	@ 0x30
 8000bbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000bc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000bc4:	1b92      	subs	r2, r2, r6
 8000bc6:	6122      	str	r2, [r4, #16]
 8000bc8:	f8cd a000 	str.w	sl, [sp]
 8000bcc:	464b      	mov	r3, r9
 8000bce:	aa03      	add	r2, sp, #12
 8000bd0:	4621      	mov	r1, r4
 8000bd2:	4640      	mov	r0, r8
 8000bd4:	f7ff fee6 	bl	80009a4 <_printf_common>
 8000bd8:	3001      	adds	r0, #1
 8000bda:	d14a      	bne.n	8000c72 <_printf_i+0x1f2>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	b004      	add	sp, #16
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	f043 0320 	orr.w	r3, r3, #32
 8000bec:	6023      	str	r3, [r4, #0]
 8000bee:	4833      	ldr	r0, [pc, #204]	@ (8000cbc <_printf_i+0x23c>)
 8000bf0:	2778      	movs	r7, #120	@ 0x78
 8000bf2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	6831      	ldr	r1, [r6, #0]
 8000bfa:	061f      	lsls	r7, r3, #24
 8000bfc:	f851 5b04 	ldr.w	r5, [r1], #4
 8000c00:	d402      	bmi.n	8000c08 <_printf_i+0x188>
 8000c02:	065f      	lsls	r7, r3, #25
 8000c04:	bf48      	it	mi
 8000c06:	b2ad      	uxthmi	r5, r5
 8000c08:	6031      	str	r1, [r6, #0]
 8000c0a:	07d9      	lsls	r1, r3, #31
 8000c0c:	bf44      	itt	mi
 8000c0e:	f043 0320 	orrmi.w	r3, r3, #32
 8000c12:	6023      	strmi	r3, [r4, #0]
 8000c14:	b11d      	cbz	r5, 8000c1e <_printf_i+0x19e>
 8000c16:	2310      	movs	r3, #16
 8000c18:	e7ac      	b.n	8000b74 <_printf_i+0xf4>
 8000c1a:	4827      	ldr	r0, [pc, #156]	@ (8000cb8 <_printf_i+0x238>)
 8000c1c:	e7e9      	b.n	8000bf2 <_printf_i+0x172>
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	f023 0320 	bic.w	r3, r3, #32
 8000c24:	6023      	str	r3, [r4, #0]
 8000c26:	e7f6      	b.n	8000c16 <_printf_i+0x196>
 8000c28:	4616      	mov	r6, r2
 8000c2a:	e7bd      	b.n	8000ba8 <_printf_i+0x128>
 8000c2c:	6833      	ldr	r3, [r6, #0]
 8000c2e:	6825      	ldr	r5, [r4, #0]
 8000c30:	6961      	ldr	r1, [r4, #20]
 8000c32:	1d18      	adds	r0, r3, #4
 8000c34:	6030      	str	r0, [r6, #0]
 8000c36:	062e      	lsls	r6, r5, #24
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	d501      	bpl.n	8000c40 <_printf_i+0x1c0>
 8000c3c:	6019      	str	r1, [r3, #0]
 8000c3e:	e002      	b.n	8000c46 <_printf_i+0x1c6>
 8000c40:	0668      	lsls	r0, r5, #25
 8000c42:	d5fb      	bpl.n	8000c3c <_printf_i+0x1bc>
 8000c44:	8019      	strh	r1, [r3, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	6123      	str	r3, [r4, #16]
 8000c4a:	4616      	mov	r6, r2
 8000c4c:	e7bc      	b.n	8000bc8 <_printf_i+0x148>
 8000c4e:	6833      	ldr	r3, [r6, #0]
 8000c50:	1d1a      	adds	r2, r3, #4
 8000c52:	6032      	str	r2, [r6, #0]
 8000c54:	681e      	ldr	r6, [r3, #0]
 8000c56:	6862      	ldr	r2, [r4, #4]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	f7ff fac0 	bl	80001e0 <memchr>
 8000c60:	b108      	cbz	r0, 8000c66 <_printf_i+0x1e6>
 8000c62:	1b80      	subs	r0, r0, r6
 8000c64:	6060      	str	r0, [r4, #4]
 8000c66:	6863      	ldr	r3, [r4, #4]
 8000c68:	6123      	str	r3, [r4, #16]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000c70:	e7aa      	b.n	8000bc8 <_printf_i+0x148>
 8000c72:	6923      	ldr	r3, [r4, #16]
 8000c74:	4632      	mov	r2, r6
 8000c76:	4649      	mov	r1, r9
 8000c78:	4640      	mov	r0, r8
 8000c7a:	47d0      	blx	sl
 8000c7c:	3001      	adds	r0, #1
 8000c7e:	d0ad      	beq.n	8000bdc <_printf_i+0x15c>
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	079b      	lsls	r3, r3, #30
 8000c84:	d413      	bmi.n	8000cae <_printf_i+0x22e>
 8000c86:	68e0      	ldr	r0, [r4, #12]
 8000c88:	9b03      	ldr	r3, [sp, #12]
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	bfb8      	it	lt
 8000c8e:	4618      	movlt	r0, r3
 8000c90:	e7a6      	b.n	8000be0 <_printf_i+0x160>
 8000c92:	2301      	movs	r3, #1
 8000c94:	4632      	mov	r2, r6
 8000c96:	4649      	mov	r1, r9
 8000c98:	4640      	mov	r0, r8
 8000c9a:	47d0      	blx	sl
 8000c9c:	3001      	adds	r0, #1
 8000c9e:	d09d      	beq.n	8000bdc <_printf_i+0x15c>
 8000ca0:	3501      	adds	r5, #1
 8000ca2:	68e3      	ldr	r3, [r4, #12]
 8000ca4:	9903      	ldr	r1, [sp, #12]
 8000ca6:	1a5b      	subs	r3, r3, r1
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	dcf2      	bgt.n	8000c92 <_printf_i+0x212>
 8000cac:	e7eb      	b.n	8000c86 <_printf_i+0x206>
 8000cae:	2500      	movs	r5, #0
 8000cb0:	f104 0619 	add.w	r6, r4, #25
 8000cb4:	e7f5      	b.n	8000ca2 <_printf_i+0x222>
 8000cb6:	bf00      	nop
 8000cb8:	08000dd9 	.word	0x08000dd9
 8000cbc:	08000dea 	.word	0x08000dea

08000cc0 <memmove>:
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	b510      	push	{r4, lr}
 8000cc4:	eb01 0402 	add.w	r4, r1, r2
 8000cc8:	d902      	bls.n	8000cd0 <memmove+0x10>
 8000cca:	4284      	cmp	r4, r0
 8000ccc:	4623      	mov	r3, r4
 8000cce:	d807      	bhi.n	8000ce0 <memmove+0x20>
 8000cd0:	1e43      	subs	r3, r0, #1
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d008      	beq.n	8000ce8 <memmove+0x28>
 8000cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000cde:	e7f8      	b.n	8000cd2 <memmove+0x12>
 8000ce0:	4402      	add	r2, r0
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	d100      	bne.n	8000cea <memmove+0x2a>
 8000ce8:	bd10      	pop	{r4, pc}
 8000cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000cf2:	e7f7      	b.n	8000ce4 <memmove+0x24>

08000cf4 <_sbrk_r>:
 8000cf4:	b538      	push	{r3, r4, r5, lr}
 8000cf6:	4d06      	ldr	r5, [pc, #24]	@ (8000d10 <_sbrk_r+0x1c>)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	602b      	str	r3, [r5, #0]
 8000d00:	f7ff fb54 	bl	80003ac <_sbrk>
 8000d04:	1c43      	adds	r3, r0, #1
 8000d06:	d102      	bne.n	8000d0e <_sbrk_r+0x1a>
 8000d08:	682b      	ldr	r3, [r5, #0]
 8000d0a:	b103      	cbz	r3, 8000d0e <_sbrk_r+0x1a>
 8000d0c:	6023      	str	r3, [r4, #0]
 8000d0e:	bd38      	pop	{r3, r4, r5, pc}
 8000d10:	200001b8 	.word	0x200001b8

08000d14 <memcpy>:
 8000d14:	440a      	add	r2, r1
 8000d16:	4291      	cmp	r1, r2
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	d100      	bne.n	8000d20 <memcpy+0xc>
 8000d1e:	4770      	bx	lr
 8000d20:	b510      	push	{r4, lr}
 8000d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000d2a:	4291      	cmp	r1, r2
 8000d2c:	d1f9      	bne.n	8000d22 <memcpy+0xe>
 8000d2e:	bd10      	pop	{r4, pc}

08000d30 <_realloc_r>:
 8000d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d34:	4680      	mov	r8, r0
 8000d36:	4615      	mov	r5, r2
 8000d38:	460c      	mov	r4, r1
 8000d3a:	b921      	cbnz	r1, 8000d46 <_realloc_r+0x16>
 8000d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d40:	4611      	mov	r1, r2
 8000d42:	f7ff bc4b 	b.w	80005dc <_malloc_r>
 8000d46:	b92a      	cbnz	r2, 8000d54 <_realloc_r+0x24>
 8000d48:	f7ff fbdc 	bl	8000504 <_free_r>
 8000d4c:	2400      	movs	r4, #0
 8000d4e:	4620      	mov	r0, r4
 8000d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d54:	f000 f81a 	bl	8000d8c <_malloc_usable_size_r>
 8000d58:	4285      	cmp	r5, r0
 8000d5a:	4606      	mov	r6, r0
 8000d5c:	d802      	bhi.n	8000d64 <_realloc_r+0x34>
 8000d5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000d62:	d8f4      	bhi.n	8000d4e <_realloc_r+0x1e>
 8000d64:	4629      	mov	r1, r5
 8000d66:	4640      	mov	r0, r8
 8000d68:	f7ff fc38 	bl	80005dc <_malloc_r>
 8000d6c:	4607      	mov	r7, r0
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	d0ec      	beq.n	8000d4c <_realloc_r+0x1c>
 8000d72:	42b5      	cmp	r5, r6
 8000d74:	462a      	mov	r2, r5
 8000d76:	4621      	mov	r1, r4
 8000d78:	bf28      	it	cs
 8000d7a:	4632      	movcs	r2, r6
 8000d7c:	f7ff ffca 	bl	8000d14 <memcpy>
 8000d80:	4621      	mov	r1, r4
 8000d82:	4640      	mov	r0, r8
 8000d84:	f7ff fbbe 	bl	8000504 <_free_r>
 8000d88:	463c      	mov	r4, r7
 8000d8a:	e7e0      	b.n	8000d4e <_realloc_r+0x1e>

08000d8c <_malloc_usable_size_r>:
 8000d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d90:	1f18      	subs	r0, r3, #4
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bfbc      	itt	lt
 8000d96:	580b      	ldrlt	r3, [r1, r0]
 8000d98:	18c0      	addlt	r0, r0, r3
 8000d9a:	4770      	bx	lr

08000d9c <_init>:
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9e:	bf00      	nop
 8000da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da2:	bc08      	pop	{r3}
 8000da4:	469e      	mov	lr, r3
 8000da6:	4770      	bx	lr

08000da8 <_fini>:
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	bf00      	nop
 8000dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dae:	bc08      	pop	{r3}
 8000db0:	469e      	mov	lr, r3
 8000db2:	4770      	bx	lr
