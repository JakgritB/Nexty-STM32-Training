
Training_Lab4.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000380  08000388  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000380  08000380  00001388  2**0
                  CONTENTS
  4 .ARM          00000000  08000380  08000380  00001388  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000380  08000388  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000380  08000380  00001380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000384  08000384  00001384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000388  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000388  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000046c  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000145  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfde  00000000  00000000  000019e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000063a  00000000  00000000  0000f9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050c1c  00000000  00000000  0000fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060c19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00060c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00060cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000368 	.word	0x08000368

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000368 	.word	0x08000368

080001d8 <main>:
#define STM32F411xE
#include "stm32f4xx.h"

const uint32_t THRESHOLD = 133333;

int main(void) {
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001de:	4b37      	ldr	r3, [pc, #220]	@ (80002bc <main+0xe4>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	4a36      	ldr	r2, [pc, #216]	@ (80002bc <main+0xe4>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80001ea:	4b34      	ldr	r3, [pc, #208]	@ (80002bc <main+0xe4>)
 80001ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001ee:	4a33      	ldr	r2, [pc, #204]	@ (80002bc <main+0xe4>)
 80001f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001f4:	6453      	str	r3, [r2, #68]	@ 0x44

	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER5_Pos);
 80001f6:	4b32      	ldr	r3, [pc, #200]	@ (80002c0 <main+0xe8>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a31      	ldr	r2, [pc, #196]	@ (80002c0 <main+0xe8>)
 80001fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000200:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(GPIO_MODER_MODER4);
 8000202:	4b2f      	ldr	r3, [pc, #188]	@ (80002c0 <main+0xe8>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a2e      	ldr	r2, [pc, #184]	@ (80002c0 <main+0xe8>)
 8000208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800020c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b11 << GPIO_MODER_MODER4_Pos);
 800020e:	4b2c      	ldr	r3, [pc, #176]	@ (80002c0 <main+0xe8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a2b      	ldr	r2, [pc, #172]	@ (80002c0 <main+0xe8>)
 8000214:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000218:	6013      	str	r3, [r2, #0]

	ADC1->CR2 |= ADC_CR2_ADON;
 800021a:	4b2a      	ldr	r3, [pc, #168]	@ (80002c4 <main+0xec>)
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	4a29      	ldr	r2, [pc, #164]	@ (80002c4 <main+0xec>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6093      	str	r3, [r2, #8]

	ADC1->SMPR2 |= ADC_SMPR2_SMP4;
 8000226:	4b27      	ldr	r3, [pc, #156]	@ (80002c4 <main+0xec>)
 8000228:	691b      	ldr	r3, [r3, #16]
 800022a:	4a26      	ldr	r2, [pc, #152]	@ (80002c4 <main+0xec>)
 800022c:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000230:	6113      	str	r3, [r2, #16]

	ADC1->SQR1 &= ~(ADC_SQR1_L);
 8000232:	4b24      	ldr	r3, [pc, #144]	@ (80002c4 <main+0xec>)
 8000234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000236:	4a23      	ldr	r2, [pc, #140]	@ (80002c4 <main+0xec>)
 8000238:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800023c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR1 |= (0b111 << ADC_SQR1_L_Pos);
 800023e:	4b21      	ldr	r3, [pc, #132]	@ (80002c4 <main+0xec>)
 8000240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000242:	4a20      	ldr	r2, [pc, #128]	@ (80002c4 <main+0xec>)
 8000244:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8000248:	62d3      	str	r3, [r2, #44]	@ 0x2c

	ADC1->SQR3 &= ~(ADC_SQR3_SQ1);
 800024a:	4b1e      	ldr	r3, [pc, #120]	@ (80002c4 <main+0xec>)
 800024c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800024e:	4a1d      	ldr	r2, [pc, #116]	@ (80002c4 <main+0xec>)
 8000250:	f023 031f 	bic.w	r3, r3, #31
 8000254:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= (0x04 << ADC_SQR3_SQ1_Pos);
 8000256:	4b1b      	ldr	r3, [pc, #108]	@ (80002c4 <main+0xec>)
 8000258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800025a:	4a1a      	ldr	r2, [pc, #104]	@ (80002c4 <main+0xec>)
 800025c:	f043 0304 	orr.w	r3, r3, #4
 8000260:	6353      	str	r3, [r2, #52]	@ 0x34

	//ADC1->CR1 |= (0b10 << ADC_CR1_RES_Pos);

	while (1) {
		ADC1->CR2 |= ADC_CR2_SWSTART;
 8000262:	4b18      	ldr	r3, [pc, #96]	@ (80002c4 <main+0xec>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	4a17      	ldr	r2, [pc, #92]	@ (80002c4 <main+0xec>)
 8000268:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800026c:	6093      	str	r3, [r2, #8]
		while ((ADC1->SR & ADC_SR_EOC) == 0)
 800026e:	bf00      	nop
 8000270:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <main+0xec>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f003 0302 	and.w	r3, r3, #2
 8000278:	2b00      	cmp	r3, #0
 800027a:	d0f9      	beq.n	8000270 <main+0x98>
			;

		uint16_t u2t_adcData = ADC1->DR;
 800027c:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <main+0xec>)
 800027e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000280:	807b      	strh	r3, [r7, #2]
		if (u2t_adcData <= 2048) {
 8000282:	887b      	ldrh	r3, [r7, #2]
 8000284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000288:	d806      	bhi.n	8000298 <main+0xc0>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 800028a:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <main+0xe8>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	4a0c      	ldr	r2, [pc, #48]	@ (80002c0 <main+0xe8>)
 8000290:	f043 0320 	orr.w	r3, r3, #32
 8000294:	6153      	str	r3, [r2, #20]
 8000296:	e005      	b.n	80002a4 <main+0xcc>
		} else {
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 8000298:	4b09      	ldr	r3, [pc, #36]	@ (80002c0 <main+0xe8>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	4a08      	ldr	r2, [pc, #32]	@ (80002c0 <main+0xe8>)
 800029e:	f023 0320 	bic.w	r3, r3, #32
 80002a2:	6153      	str	r3, [r2, #20]
		}
		for (uint32_t iter = 0; iter < THRESHOLD; iter++) {
 80002a4:	2300      	movs	r3, #0
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	e002      	b.n	80002b0 <main+0xd8>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3301      	adds	r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	4a05      	ldr	r2, [pc, #20]	@ (80002c8 <main+0xf0>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d3f8      	bcc.n	80002aa <main+0xd2>
	while (1) {
 80002b8:	e7d3      	b.n	8000262 <main+0x8a>
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020000 	.word	0x40020000
 80002c4:	40012000 	.word	0x40012000
 80002c8:	000208d5 	.word	0x000208d5

080002cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002cc:	480d      	ldr	r0, [pc, #52]	@ (8000304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	@ (8000308 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <LoopForever+0xe>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000318 <LoopForever+0x16>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fa:	f000 f811 	bl	8000320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fe:	f7ff ff6b 	bl	80001d8 <main>

08000302 <LoopForever>:

LoopForever:
  b LoopForever
 8000302:	e7fe      	b.n	8000302 <LoopForever>
  ldr   r0, =_estack
 8000304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000310:	08000388 	.word	0x08000388
  ldr r2, =_sbss
 8000314:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000318:	2000001c 	.word	0x2000001c

0800031c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC_IRQHandler>
	...

08000320 <__libc_init_array>:
 8000320:	b570      	push	{r4, r5, r6, lr}
 8000322:	4d0d      	ldr	r5, [pc, #52]	@ (8000358 <__libc_init_array+0x38>)
 8000324:	4c0d      	ldr	r4, [pc, #52]	@ (800035c <__libc_init_array+0x3c>)
 8000326:	1b64      	subs	r4, r4, r5
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	2600      	movs	r6, #0
 800032c:	42a6      	cmp	r6, r4
 800032e:	d109      	bne.n	8000344 <__libc_init_array+0x24>
 8000330:	4d0b      	ldr	r5, [pc, #44]	@ (8000360 <__libc_init_array+0x40>)
 8000332:	4c0c      	ldr	r4, [pc, #48]	@ (8000364 <__libc_init_array+0x44>)
 8000334:	f000 f818 	bl	8000368 <_init>
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	2600      	movs	r6, #0
 800033e:	42a6      	cmp	r6, r4
 8000340:	d105      	bne.n	800034e <__libc_init_array+0x2e>
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f855 3b04 	ldr.w	r3, [r5], #4
 8000348:	4798      	blx	r3
 800034a:	3601      	adds	r6, #1
 800034c:	e7ee      	b.n	800032c <__libc_init_array+0xc>
 800034e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000352:	4798      	blx	r3
 8000354:	3601      	adds	r6, #1
 8000356:	e7f2      	b.n	800033e <__libc_init_array+0x1e>
 8000358:	08000380 	.word	0x08000380
 800035c:	08000380 	.word	0x08000380
 8000360:	08000380 	.word	0x08000380
 8000364:	08000384 	.word	0x08000384

08000368 <_init>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr

08000374 <_fini>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr
