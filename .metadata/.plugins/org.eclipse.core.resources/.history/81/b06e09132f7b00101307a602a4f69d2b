
Training_Lab3.1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000049c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000634  0800063c  0000163c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000634  08000634  0000163c  2**0
                  CONTENTS
  4 .ARM          00000000  08000634  08000634  0000163c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000634  0800063c  0000163c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000634  08000634  00001634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000638  08000638  00001638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000163c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800063c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800063c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003bd  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000110  00000000  00000000  00001a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00001b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfde  00000000  00000000  00001bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000078b  00000000  00000000  0000fba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050bee  00000000  00000000  0001032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060f1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000007c  00000000  00000000  00060f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00060fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800061c 	.word	0x0800061c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800061c 	.word	0x0800061c

080001d8 <vdg_UART_RxByte>:
#include <stdint.h>
#define STM32F411xE
#include "stm32f4xx.h"

char vdg_UART_RxByte() {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	while ((USART2->SR & USART_SR_RXNE) == 0)
 80001dc:	bf00      	nop
 80001de:	4b07      	ldr	r3, [pc, #28]	@ (80001fc <vdg_UART_RxByte+0x24>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f003 0320 	and.w	r3, r3, #32
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d0f9      	beq.n	80001de <vdg_UART_RxByte+0x6>
		;
	return USART2->DR;
 80001ea:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <vdg_UART_RxByte+0x24>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	b2db      	uxtb	r3, r3
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40004400 	.word	0x40004400

08000200 <main>:

int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000206:	4b93      	ldr	r3, [pc, #588]	@ (8000454 <main+0x254>)
 8000208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020a:	4a92      	ldr	r2, [pc, #584]	@ (8000454 <main+0x254>)
 800020c:	f043 0301 	orr.w	r3, r3, #1
 8000210:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000212:	4b90      	ldr	r3, [pc, #576]	@ (8000454 <main+0x254>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000216:	4a8f      	ldr	r2, [pc, #572]	@ (8000454 <main+0x254>)
 8000218:	f043 0308 	orr.w	r3, r3, #8
 800021c:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800021e:	4b8d      	ldr	r3, [pc, #564]	@ (8000454 <main+0x254>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	4a8c      	ldr	r2, [pc, #560]	@ (8000454 <main+0x254>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800022a:	4b8a      	ldr	r3, [pc, #552]	@ (8000454 <main+0x254>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022e:	4a89      	ldr	r2, [pc, #548]	@ (8000454 <main+0x254>)
 8000230:	f043 0302 	orr.w	r3, r3, #2
 8000234:	6313      	str	r3, [r2, #48]	@ 0x30

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000236:	4b87      	ldr	r3, [pc, #540]	@ (8000454 <main+0x254>)
 8000238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800023a:	4a86      	ldr	r2, [pc, #536]	@ (8000454 <main+0x254>)
 800023c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000240:	6413      	str	r3, [r2, #64]	@ 0x40

	// PA3 (RX only)
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER3_Pos);
 8000242:	4b85      	ldr	r3, [pc, #532]	@ (8000458 <main+0x258>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a84      	ldr	r2, [pc, #528]	@ (8000458 <main+0x258>)
 8000248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800024c:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL3_Pos);
 800024e:	4b82      	ldr	r3, [pc, #520]	@ (8000458 <main+0x258>)
 8000250:	6a1b      	ldr	r3, [r3, #32]
 8000252:	4a81      	ldr	r2, [pc, #516]	@ (8000458 <main+0x258>)
 8000254:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000258:	6213      	str	r3, [r2, #32]

	// PA5 (LED)
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER5_Pos);
 800025a:	4b7f      	ldr	r3, [pc, #508]	@ (8000458 <main+0x258>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a7e      	ldr	r2, [pc, #504]	@ (8000458 <main+0x258>)
 8000260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000264:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b01 << GPIO_MODER_MODER7_Pos);
 8000266:	4b7d      	ldr	r3, [pc, #500]	@ (800045c <main+0x25c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a7c      	ldr	r2, [pc, #496]	@ (800045c <main+0x25c>)
 800026c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000270:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER8_Pos);
 8000272:	4b79      	ldr	r3, [pc, #484]	@ (8000458 <main+0x258>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a78      	ldr	r2, [pc, #480]	@ (8000458 <main+0x258>)
 8000278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800027c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << GPIO_MODER_MODER10_Pos);
 800027e:	4b78      	ldr	r3, [pc, #480]	@ (8000460 <main+0x260>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a77      	ldr	r2, [pc, #476]	@ (8000460 <main+0x260>)
 8000284:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000288:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << GPIO_MODER_MODER9_Pos);
 800028a:	4b75      	ldr	r3, [pc, #468]	@ (8000460 <main+0x260>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a74      	ldr	r2, [pc, #464]	@ (8000460 <main+0x260>)
 8000290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000294:	6013      	str	r3, [r2, #0]

	// USART (RX only)
	USART2->CR1 |= USART_CR1_UE;
 8000296:	4b73      	ldr	r3, [pc, #460]	@ (8000464 <main+0x264>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a72      	ldr	r2, [pc, #456]	@ (8000464 <main+0x264>)
 800029c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002a0:	60d3      	str	r3, [r2, #12]
	USART2->BRR = 139;
 80002a2:	4b70      	ldr	r3, [pc, #448]	@ (8000464 <main+0x264>)
 80002a4:	228b      	movs	r2, #139	@ 0x8b
 80002a6:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_RE;
 80002a8:	4b6e      	ldr	r3, [pc, #440]	@ (8000464 <main+0x264>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a6d      	ldr	r2, [pc, #436]	@ (8000464 <main+0x264>)
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	60d3      	str	r3, [r2, #12]

	while (1) {
		char received = vdg_UART_RxByte();
 80002b4:	f7ff ff90 	bl	80001d8 <vdg_UART_RxByte>
 80002b8:	4603      	mov	r3, r0
 80002ba:	71fb      	strb	r3, [r7, #7]

		if (received == '1') { //0001
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	2b31      	cmp	r3, #49	@ 0x31
 80002c0:	d11e      	bne.n	8000300 <main+0x100>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 80002c2:	4b65      	ldr	r3, [pc, #404]	@ (8000458 <main+0x258>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a64      	ldr	r2, [pc, #400]	@ (8000458 <main+0x258>)
 80002c8:	f043 0320 	orr.w	r3, r3, #32
 80002cc:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (GPIO_ODR_OD7);
 80002ce:	4b63      	ldr	r3, [pc, #396]	@ (800045c <main+0x25c>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a62      	ldr	r2, [pc, #392]	@ (800045c <main+0x25c>)
 80002d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002d8:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD8);
 80002da:	4b5f      	ldr	r3, [pc, #380]	@ (8000458 <main+0x258>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a5e      	ldr	r2, [pc, #376]	@ (8000458 <main+0x258>)
 80002e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80002e4:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD10);
 80002e6:	4b5e      	ldr	r3, [pc, #376]	@ (8000460 <main+0x260>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a5d      	ldr	r2, [pc, #372]	@ (8000460 <main+0x260>)
 80002ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002f0:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD9);
 80002f2:	4b5b      	ldr	r3, [pc, #364]	@ (8000460 <main+0x260>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a5a      	ldr	r2, [pc, #360]	@ (8000460 <main+0x260>)
 80002f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	e7d9      	b.n	80002b4 <main+0xb4>
		}
		else if (received == '2') { //0010
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b32      	cmp	r3, #50	@ 0x32
 8000304:	d11e      	bne.n	8000344 <main+0x144>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 8000306:	4b54      	ldr	r3, [pc, #336]	@ (8000458 <main+0x258>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a53      	ldr	r2, [pc, #332]	@ (8000458 <main+0x258>)
 800030c:	f043 0320 	orr.w	r3, r3, #32
 8000310:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(GPIO_ODR_OD7);
 8000312:	4b52      	ldr	r3, [pc, #328]	@ (800045c <main+0x25c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a51      	ldr	r2, [pc, #324]	@ (800045c <main+0x25c>)
 8000318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800031c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD8);
 800031e:	4b4e      	ldr	r3, [pc, #312]	@ (8000458 <main+0x258>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a4d      	ldr	r2, [pc, #308]	@ (8000458 <main+0x258>)
 8000324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000328:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD10);
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <main+0x260>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a4c      	ldr	r2, [pc, #304]	@ (8000460 <main+0x260>)
 8000330:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000334:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD9);
 8000336:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <main+0x260>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a49      	ldr	r2, [pc, #292]	@ (8000460 <main+0x260>)
 800033c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	e7b7      	b.n	80002b4 <main+0xb4>
		}
		else if (received == '3') { //0011
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b33      	cmp	r3, #51	@ 0x33
 8000348:	d11e      	bne.n	8000388 <main+0x188>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 800034a:	4b43      	ldr	r3, [pc, #268]	@ (8000458 <main+0x258>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a42      	ldr	r2, [pc, #264]	@ (8000458 <main+0x258>)
 8000350:	f043 0320 	orr.w	r3, r3, #32
 8000354:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (GPIO_ODR_OD7);
 8000356:	4b41      	ldr	r3, [pc, #260]	@ (800045c <main+0x25c>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a40      	ldr	r2, [pc, #256]	@ (800045c <main+0x25c>)
 800035c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000360:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD8);
 8000362:	4b3d      	ldr	r3, [pc, #244]	@ (8000458 <main+0x258>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4a3c      	ldr	r2, [pc, #240]	@ (8000458 <main+0x258>)
 8000368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800036c:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD10);
 800036e:	4b3c      	ldr	r3, [pc, #240]	@ (8000460 <main+0x260>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a3b      	ldr	r2, [pc, #236]	@ (8000460 <main+0x260>)
 8000374:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000378:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD9);
 800037a:	4b39      	ldr	r3, [pc, #228]	@ (8000460 <main+0x260>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a38      	ldr	r2, [pc, #224]	@ (8000460 <main+0x260>)
 8000380:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000384:	6153      	str	r3, [r2, #20]
 8000386:	e795      	b.n	80002b4 <main+0xb4>
		}
		else if (received == '4') { //0100
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	2b34      	cmp	r3, #52	@ 0x34
 800038c:	d11e      	bne.n	80003cc <main+0x1cc>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 800038e:	4b32      	ldr	r3, [pc, #200]	@ (8000458 <main+0x258>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a31      	ldr	r2, [pc, #196]	@ (8000458 <main+0x258>)
 8000394:	f043 0320 	orr.w	r3, r3, #32
 8000398:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(GPIO_ODR_OD7);
 800039a:	4b30      	ldr	r3, [pc, #192]	@ (800045c <main+0x25c>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a2f      	ldr	r2, [pc, #188]	@ (800045c <main+0x25c>)
 80003a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003a4:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD8);
 80003a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000458 <main+0x258>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000458 <main+0x258>)
 80003ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003b0:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (GPIO_ODR_OD10);
 80003b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000460 <main+0x260>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000460 <main+0x260>)
 80003b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003bc:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD9);
 80003be:	4b28      	ldr	r3, [pc, #160]	@ (8000460 <main+0x260>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a27      	ldr	r2, [pc, #156]	@ (8000460 <main+0x260>)
 80003c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	e773      	b.n	80002b4 <main+0xb4>
		}
		else if (received == '5') { //0101
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	2b35      	cmp	r3, #53	@ 0x35
 80003d0:	d11e      	bne.n	8000410 <main+0x210>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 80003d2:	4b21      	ldr	r3, [pc, #132]	@ (8000458 <main+0x258>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a20      	ldr	r2, [pc, #128]	@ (8000458 <main+0x258>)
 80003d8:	f043 0320 	orr.w	r3, r3, #32
 80003dc:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (GPIO_ODR_OD7);
 80003de:	4b1f      	ldr	r3, [pc, #124]	@ (800045c <main+0x25c>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a1e      	ldr	r2, [pc, #120]	@ (800045c <main+0x25c>)
 80003e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003e8:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD8);
 80003ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000458 <main+0x258>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000458 <main+0x258>)
 80003f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003f4:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (GPIO_ODR_OD10);
 80003f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <main+0x260>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a19      	ldr	r2, [pc, #100]	@ (8000460 <main+0x260>)
 80003fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000400:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD9);
 8000402:	4b17      	ldr	r3, [pc, #92]	@ (8000460 <main+0x260>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a16      	ldr	r2, [pc, #88]	@ (8000460 <main+0x260>)
 8000408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	e751      	b.n	80002b4 <main+0xb4>
		}
		else if (received == '6') { //0110
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	2b36      	cmp	r3, #54	@ 0x36
 8000414:	d128      	bne.n	8000468 <main+0x268>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 8000416:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <main+0x258>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a0f      	ldr	r2, [pc, #60]	@ (8000458 <main+0x258>)
 800041c:	f043 0320 	orr.w	r3, r3, #32
 8000420:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(GPIO_ODR_OD7);
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <main+0x25c>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a0d      	ldr	r2, [pc, #52]	@ (800045c <main+0x25c>)
 8000428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800042c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD8);
 800042e:	4b0a      	ldr	r3, [pc, #40]	@ (8000458 <main+0x258>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a09      	ldr	r2, [pc, #36]	@ (8000458 <main+0x258>)
 8000434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000438:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (GPIO_ODR_OD10);
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <main+0x260>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <main+0x260>)
 8000440:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000444:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD9);
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <main+0x260>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a05      	ldr	r2, [pc, #20]	@ (8000460 <main+0x260>)
 800044c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	e72f      	b.n	80002b4 <main+0xb4>
 8000454:	40023800 	.word	0x40023800
 8000458:	40020000 	.word	0x40020000
 800045c:	40020800 	.word	0x40020800
 8000460:	40020400 	.word	0x40020400
 8000464:	40004400 	.word	0x40004400
		}
		else if (received == '7') { //0111
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2b37      	cmp	r3, #55	@ 0x37
 800046c:	d11e      	bne.n	80004ac <main+0x2ac>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 800046e:	4b41      	ldr	r3, [pc, #260]	@ (8000574 <main+0x374>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a40      	ldr	r2, [pc, #256]	@ (8000574 <main+0x374>)
 8000474:	f043 0320 	orr.w	r3, r3, #32
 8000478:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (GPIO_ODR_OD7);
 800047a:	4b3f      	ldr	r3, [pc, #252]	@ (8000578 <main+0x378>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a3e      	ldr	r2, [pc, #248]	@ (8000578 <main+0x378>)
 8000480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000484:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD8);
 8000486:	4b3b      	ldr	r3, [pc, #236]	@ (8000574 <main+0x374>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a3a      	ldr	r2, [pc, #232]	@ (8000574 <main+0x374>)
 800048c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000490:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (GPIO_ODR_OD10);
 8000492:	4b3a      	ldr	r3, [pc, #232]	@ (800057c <main+0x37c>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a39      	ldr	r2, [pc, #228]	@ (800057c <main+0x37c>)
 8000498:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800049c:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD9);
 800049e:	4b37      	ldr	r3, [pc, #220]	@ (800057c <main+0x37c>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a36      	ldr	r2, [pc, #216]	@ (800057c <main+0x37c>)
 80004a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	e703      	b.n	80002b4 <main+0xb4>
		}
		else if (received == '8') { //1000
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	2b38      	cmp	r3, #56	@ 0x38
 80004b0:	d11e      	bne.n	80004f0 <main+0x2f0>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 80004b2:	4b30      	ldr	r3, [pc, #192]	@ (8000574 <main+0x374>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000574 <main+0x374>)
 80004b8:	f043 0320 	orr.w	r3, r3, #32
 80004bc:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(GPIO_ODR_OD7);
 80004be:	4b2e      	ldr	r3, [pc, #184]	@ (8000578 <main+0x378>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a2d      	ldr	r2, [pc, #180]	@ (8000578 <main+0x378>)
 80004c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004c8:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD8);
 80004ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000574 <main+0x374>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a29      	ldr	r2, [pc, #164]	@ (8000574 <main+0x374>)
 80004d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004d4:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD10);
 80004d6:	4b29      	ldr	r3, [pc, #164]	@ (800057c <main+0x37c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a28      	ldr	r2, [pc, #160]	@ (800057c <main+0x37c>)
 80004dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80004e0:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (GPIO_ODR_OD9);
 80004e2:	4b26      	ldr	r3, [pc, #152]	@ (800057c <main+0x37c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a25      	ldr	r2, [pc, #148]	@ (800057c <main+0x37c>)
 80004e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	e6e1      	b.n	80002b4 <main+0xb4>
		}
		else if (received == '9') { //1001
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b39      	cmp	r3, #57	@ 0x39
 80004f4:	d11e      	bne.n	8000534 <main+0x334>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 80004f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000574 <main+0x374>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000574 <main+0x374>)
 80004fc:	f043 0320 	orr.w	r3, r3, #32
 8000500:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (GPIO_ODR_OD7);
 8000502:	4b1d      	ldr	r3, [pc, #116]	@ (8000578 <main+0x378>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a1c      	ldr	r2, [pc, #112]	@ (8000578 <main+0x378>)
 8000508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800050c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD8);
 800050e:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <main+0x374>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a18      	ldr	r2, [pc, #96]	@ (8000574 <main+0x374>)
 8000514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000518:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD10);
 800051a:	4b18      	ldr	r3, [pc, #96]	@ (800057c <main+0x37c>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a17      	ldr	r2, [pc, #92]	@ (800057c <main+0x37c>)
 8000520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000524:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (GPIO_ODR_OD9);
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <main+0x37c>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a14      	ldr	r2, [pc, #80]	@ (800057c <main+0x37c>)
 800052c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	e6bf      	b.n	80002b4 <main+0xb4>
		}
		else {
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <main+0x374>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <main+0x374>)
 800053a:	f023 0320 	bic.w	r3, r3, #32
 800053e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(GPIO_ODR_OD7);
 8000540:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <main+0x378>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <main+0x378>)
 8000546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800054a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD8);
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <main+0x374>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <main+0x374>)
 8000552:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000556:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD10);
 8000558:	4b08      	ldr	r3, [pc, #32]	@ (800057c <main+0x37c>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a07      	ldr	r2, [pc, #28]	@ (800057c <main+0x37c>)
 800055e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000562:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD9);
 8000564:	4b05      	ldr	r3, [pc, #20]	@ (800057c <main+0x37c>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	4a04      	ldr	r2, [pc, #16]	@ (800057c <main+0x37c>)
 800056a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800056e:	6153      	str	r3, [r2, #20]
	while (1) {
 8000570:	e6a0      	b.n	80002b4 <main+0xb4>
 8000572:	bf00      	nop
 8000574:	40020000 	.word	0x40020000
 8000578:	40020800 	.word	0x40020800
 800057c:	40020400 	.word	0x40020400

08000580 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000580:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000582:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000584:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000588:	480c      	ldr	r0, [pc, #48]	@ (80005bc <LoopForever+0x6>)
  ldr r1, =_edata
 800058a:	490d      	ldr	r1, [pc, #52]	@ (80005c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <LoopForever+0xe>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a0:	4c0a      	ldr	r4, [pc, #40]	@ (80005cc <LoopForever+0x16>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ae:	f000 f811 	bl	80005d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b2:	f7ff fe25 	bl	8000200 <main>

080005b6 <LoopForever>:

LoopForever:
  b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   r0, =_estack
 80005b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005c4:	0800063c 	.word	0x0800063c
  ldr r2, =_sbss
 80005c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005cc:	2000001c 	.word	0x2000001c

080005d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC_IRQHandler>
	...

080005d4 <__libc_init_array>:
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	4d0d      	ldr	r5, [pc, #52]	@ (800060c <__libc_init_array+0x38>)
 80005d8:	4c0d      	ldr	r4, [pc, #52]	@ (8000610 <__libc_init_array+0x3c>)
 80005da:	1b64      	subs	r4, r4, r5
 80005dc:	10a4      	asrs	r4, r4, #2
 80005de:	2600      	movs	r6, #0
 80005e0:	42a6      	cmp	r6, r4
 80005e2:	d109      	bne.n	80005f8 <__libc_init_array+0x24>
 80005e4:	4d0b      	ldr	r5, [pc, #44]	@ (8000614 <__libc_init_array+0x40>)
 80005e6:	4c0c      	ldr	r4, [pc, #48]	@ (8000618 <__libc_init_array+0x44>)
 80005e8:	f000 f818 	bl	800061c <_init>
 80005ec:	1b64      	subs	r4, r4, r5
 80005ee:	10a4      	asrs	r4, r4, #2
 80005f0:	2600      	movs	r6, #0
 80005f2:	42a6      	cmp	r6, r4
 80005f4:	d105      	bne.n	8000602 <__libc_init_array+0x2e>
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fc:	4798      	blx	r3
 80005fe:	3601      	adds	r6, #1
 8000600:	e7ee      	b.n	80005e0 <__libc_init_array+0xc>
 8000602:	f855 3b04 	ldr.w	r3, [r5], #4
 8000606:	4798      	blx	r3
 8000608:	3601      	adds	r6, #1
 800060a:	e7f2      	b.n	80005f2 <__libc_init_array+0x1e>
 800060c:	08000634 	.word	0x08000634
 8000610:	08000634 	.word	0x08000634
 8000614:	08000634 	.word	0x08000634
 8000618:	08000638 	.word	0x08000638

0800061c <_init>:
 800061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061e:	bf00      	nop
 8000620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000622:	bc08      	pop	{r3}
 8000624:	469e      	mov	lr, r3
 8000626:	4770      	bx	lr

08000628 <_fini>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr
