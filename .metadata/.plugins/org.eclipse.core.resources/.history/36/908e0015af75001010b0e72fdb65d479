
Training_Lab1.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800033c  08000344  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800033c  0800033c  00001344  2**0
                  CONTENTS
  4 .ARM          00000000  0800033c  0800033c  00001344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800033c  08000344  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800033c  0800033c  0000133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000340  08000340  00001340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000344  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000344  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000039c  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000f5  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfe4  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000617  00000000  00000000  0000f861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050bc7  00000000  00000000  0000fe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060a3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00060a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00060adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000324 	.word	0x08000324

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000324 	.word	0x08000324

080001d8 <main>:
#define STM32F411xE
#include "stm32f4xx.h"

#define THRESHOLD 133333

int main(void) {
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001de:	4b26      	ldr	r3, [pc, #152]	@ (8000278 <main+0xa0>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	4a25      	ldr	r2, [pc, #148]	@ (8000278 <main+0xa0>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80001ea:	4b23      	ldr	r3, [pc, #140]	@ (8000278 <main+0xa0>)
 80001ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001ee:	4a22      	ldr	r2, [pc, #136]	@ (8000278 <main+0xa0>)
 80001f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001f4:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);
 80001f6:	4b21      	ldr	r3, [pc, #132]	@ (800027c <main+0xa4>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a20      	ldr	r2, [pc, #128]	@ (800027c <main+0xa4>)
 80001fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000200:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0b10 << GPIO_MODER_MODER2_Pos) + (0b10 << GPIO_MODER_MODER3_Pos);
 8000202:	4b1e      	ldr	r3, [pc, #120]	@ (800027c <main+0xa4>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a1d      	ldr	r2, [pc, #116]	@ (800027c <main+0xa4>)
 8000208:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800020c:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 800020e:	4b1b      	ldr	r3, [pc, #108]	@ (800027c <main+0xa4>)
 8000210:	6a1b      	ldr	r3, [r3, #32]
 8000212:	4a1a      	ldr	r2, [pc, #104]	@ (800027c <main+0xa4>)
 8000214:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000218:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL2_Pos) + (0b0111 << GPIO_AFRL_AFSEL3_Pos);
 800021a:	4b18      	ldr	r3, [pc, #96]	@ (800027c <main+0xa4>)
 800021c:	6a1b      	ldr	r3, [r3, #32]
 800021e:	4a17      	ldr	r2, [pc, #92]	@ (800027c <main+0xa4>)
 8000220:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000224:	6213      	str	r3, [r2, #32]

    USART2->CR1 |= USART_CR1_UE;
 8000226:	4b16      	ldr	r3, [pc, #88]	@ (8000280 <main+0xa8>)
 8000228:	68db      	ldr	r3, [r3, #12]
 800022a:	4a15      	ldr	r2, [pc, #84]	@ (8000280 <main+0xa8>)
 800022c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000230:	60d3      	str	r3, [r2, #12]
    USART2->CR1 &= ~USART_CR1_M;
 8000232:	4b13      	ldr	r3, [pc, #76]	@ (8000280 <main+0xa8>)
 8000234:	68db      	ldr	r3, [r3, #12]
 8000236:	4a12      	ldr	r2, [pc, #72]	@ (8000280 <main+0xa8>)
 8000238:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800023c:	60d3      	str	r3, [r2, #12]
    USART2->CR2 &= ~USART_CR2_STOP;
 800023e:	4b10      	ldr	r3, [pc, #64]	@ (8000280 <main+0xa8>)
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	4a0f      	ldr	r2, [pc, #60]	@ (8000280 <main+0xa8>)
 8000244:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000248:	6113      	str	r3, [r2, #16]
    USART2->BRR = 139;
 800024a:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <main+0xa8>)
 800024c:	228b      	movs	r2, #139	@ 0x8b
 800024e:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE;
 8000250:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <main+0xa8>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <main+0xa8>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	60d3      	str	r3, [r2, #12]

    while(1) {
        USART2->DR = 75;
 800025c:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <main+0xa8>)
 800025e:	224b      	movs	r2, #75	@ 0x4b
 8000260:	605a      	str	r2, [r3, #4]
        for(uint32_t iter = 0; iter < THRESHOLD; iter++) {
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e002      	b.n	800026e <main+0x96>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3301      	adds	r3, #1
 800026c:	607b      	str	r3, [r7, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <main+0xac>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d9f8      	bls.n	8000268 <main+0x90>
        USART2->DR = 75;
 8000276:	e7f1      	b.n	800025c <main+0x84>
 8000278:	40023800 	.word	0x40023800
 800027c:	40020000 	.word	0x40020000
 8000280:	40004400 	.word	0x40004400
 8000284:	000208d4 	.word	0x000208d4

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	@ (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	@ (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	@ (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	@ (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	@ (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	@ (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 f811 	bl	80002dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff8d 	bl	80001d8 <main>

080002be <LoopForever>:

LoopForever:
  b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002cc:	08000344 	.word	0x08000344
  ldr r2, =_sbss
 80002d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d4:	2000001c 	.word	0x2000001c

080002d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC_IRQHandler>
	...

080002dc <__libc_init_array>:
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	4d0d      	ldr	r5, [pc, #52]	@ (8000314 <__libc_init_array+0x38>)
 80002e0:	4c0d      	ldr	r4, [pc, #52]	@ (8000318 <__libc_init_array+0x3c>)
 80002e2:	1b64      	subs	r4, r4, r5
 80002e4:	10a4      	asrs	r4, r4, #2
 80002e6:	2600      	movs	r6, #0
 80002e8:	42a6      	cmp	r6, r4
 80002ea:	d109      	bne.n	8000300 <__libc_init_array+0x24>
 80002ec:	4d0b      	ldr	r5, [pc, #44]	@ (800031c <__libc_init_array+0x40>)
 80002ee:	4c0c      	ldr	r4, [pc, #48]	@ (8000320 <__libc_init_array+0x44>)
 80002f0:	f000 f818 	bl	8000324 <_init>
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	10a4      	asrs	r4, r4, #2
 80002f8:	2600      	movs	r6, #0
 80002fa:	42a6      	cmp	r6, r4
 80002fc:	d105      	bne.n	800030a <__libc_init_array+0x2e>
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f855 3b04 	ldr.w	r3, [r5], #4
 8000304:	4798      	blx	r3
 8000306:	3601      	adds	r6, #1
 8000308:	e7ee      	b.n	80002e8 <__libc_init_array+0xc>
 800030a:	f855 3b04 	ldr.w	r3, [r5], #4
 800030e:	4798      	blx	r3
 8000310:	3601      	adds	r6, #1
 8000312:	e7f2      	b.n	80002fa <__libc_init_array+0x1e>
 8000314:	0800033c 	.word	0x0800033c
 8000318:	0800033c 	.word	0x0800033c
 800031c:	0800033c 	.word	0x0800033c
 8000320:	08000340 	.word	0x08000340

08000324 <_init>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr

08000330 <_fini>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr
