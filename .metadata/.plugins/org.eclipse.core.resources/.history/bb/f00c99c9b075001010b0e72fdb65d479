
Training_Lab1.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  08000384  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00001384  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00001384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  08000384  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0000137c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000380  08000380  00001380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000384  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000384  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000034d  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000010f  00000000  00000000  00001701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfde  00000000  00000000  00001885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000628  00000000  00000000  0000f863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050bad  00000000  00000000  0000fe8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060a38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00060a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00060ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000364 	.word	0x08000364

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000364 	.word	0x08000364

080001d8 <main>:
#include <stdint.h>
#include "stm32f4xx.h"

const uint32_t THRESHOLD = 1333333;

int main(void) {
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN + RCC_AHB1ENR_GPIOBEN);
 80001de:	4b36      	ldr	r3, [pc, #216]	@ (80002b8 <main+0xe0>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	4a35      	ldr	r2, [pc, #212]	@ (80002b8 <main+0xe0>)
 80001e4:	f043 0303 	orr.w	r3, r3, #3
 80001e8:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(GPIO_MODER_MODER5);
 80001ea:	4b34      	ldr	r3, [pc, #208]	@ (80002bc <main+0xe4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a33      	ldr	r2, [pc, #204]	@ (80002bc <main+0xe4>)
 80001f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001f4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER5_Pos);
 80001f6:	4b31      	ldr	r3, [pc, #196]	@ (80002bc <main+0xe4>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a30      	ldr	r2, [pc, #192]	@ (80002bc <main+0xe4>)
 80001fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000200:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT5);
 8000202:	4b2e      	ldr	r3, [pc, #184]	@ (80002bc <main+0xe4>)
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	4a2d      	ldr	r2, [pc, #180]	@ (80002bc <main+0xe4>)
 8000208:	f023 0320 	bic.w	r3, r3, #32
 800020c:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);
 800020e:	4b2b      	ldr	r3, [pc, #172]	@ (80002bc <main+0xe4>)
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	4a2a      	ldr	r2, [pc, #168]	@ (80002bc <main+0xe4>)
 8000214:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000218:	6093      	str	r3, [r2, #8]

	GPIOB->MODER &= ~(GPIO_MODER_MODER6);
 800021a:	4b29      	ldr	r3, [pc, #164]	@ (80002c0 <main+0xe8>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a28      	ldr	r2, [pc, #160]	@ (80002c0 <main+0xe8>)
 8000220:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000224:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << GPIO_MODER_MODER6_Pos);
 8000226:	4b26      	ldr	r3, [pc, #152]	@ (80002c0 <main+0xe8>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a25      	ldr	r2, [pc, #148]	@ (80002c0 <main+0xe8>)
 800022c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000230:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT6);
 8000232:	4b23      	ldr	r3, [pc, #140]	@ (80002c0 <main+0xe8>)
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	4a22      	ldr	r2, [pc, #136]	@ (80002c0 <main+0xe8>)
 8000238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800023c:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED6);
 800023e:	4b20      	ldr	r3, [pc, #128]	@ (80002c0 <main+0xe8>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	4a1f      	ldr	r2, [pc, #124]	@ (80002c0 <main+0xe8>)
 8000244:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000248:	6093      	str	r3, [r2, #8]

	GPIOB->MODER &= ~(GPIO_MODER_MODER4);
 800024a:	4b1d      	ldr	r3, [pc, #116]	@ (80002c0 <main+0xe8>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a1c      	ldr	r2, [pc, #112]	@ (80002c0 <main+0xe8>)
 8000250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000254:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD4);
 8000256:	4b1a      	ldr	r3, [pc, #104]	@ (80002c0 <main+0xe8>)
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	4a19      	ldr	r2, [pc, #100]	@ (80002c0 <main+0xe8>)
 800025c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000260:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << GPIO_PUPDR_PUPD4_Pos);
 8000262:	4b17      	ldr	r3, [pc, #92]	@ (80002c0 <main+0xe8>)
 8000264:	68db      	ldr	r3, [r3, #12]
 8000266:	4a16      	ldr	r2, [pc, #88]	@ (80002c0 <main+0xe8>)
 8000268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800026c:	60d3      	str	r3, [r2, #12]

	while(1){
		if((GPIOB->IDR & GPIO_IDR_ID4) == 0){
 800026e:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <main+0xe8>)
 8000270:	691b      	ldr	r3, [r3, #16]
 8000272:	f003 0310 	and.w	r3, r3, #16
 8000276:	2b00      	cmp	r3, #0
 8000278:	d106      	bne.n	8000288 <main+0xb0>
			GPIOB->ODR |= GPIO_ODR_OD6;
 800027a:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <main+0xe8>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a10      	ldr	r2, [pc, #64]	@ (80002c0 <main+0xe8>)
 8000280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000284:	6153      	str	r3, [r2, #20]
 8000286:	e005      	b.n	8000294 <main+0xbc>
		}
		else {
			GPIOB->ODR &= ~(GPIO_ODR_OD6);
 8000288:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <main+0xe8>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	4a0c      	ldr	r2, [pc, #48]	@ (80002c0 <main+0xe8>)
 800028e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000292:	6153      	str	r3, [r2, #20]
		}

		GPIOA->ODR ^= (GPIO_ODR_OD5);
 8000294:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <main+0xe4>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a08      	ldr	r2, [pc, #32]	@ (80002bc <main+0xe4>)
 800029a:	f083 0320 	eor.w	r3, r3, #32
 800029e:	6153      	str	r3, [r2, #20]
		for (uint32_t iter = 0; iter < THRESHOLD; iter++){
 80002a0:	2300      	movs	r3, #0
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	e002      	b.n	80002ac <main+0xd4>
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3301      	adds	r3, #1
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <main+0xec>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d3f8      	bcc.n	80002a6 <main+0xce>
		if((GPIOB->IDR & GPIO_IDR_ID4) == 0){
 80002b4:	e7db      	b.n	800026e <main+0x96>
 80002b6:	bf00      	nop
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000
 80002c0:	40020400 	.word	0x40020400
 80002c4:	00145855 	.word	0x00145855

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	@ (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	@ (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	@ (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	@ (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff6d 	bl	80001d8 <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4d0d      	ldr	r5, [pc, #52]	@ (8000354 <__libc_init_array+0x38>)
 8000320:	4c0d      	ldr	r4, [pc, #52]	@ (8000358 <__libc_init_array+0x3c>)
 8000322:	1b64      	subs	r4, r4, r5
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	2600      	movs	r6, #0
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	4d0b      	ldr	r5, [pc, #44]	@ (800035c <__libc_init_array+0x40>)
 800032e:	4c0c      	ldr	r4, [pc, #48]	@ (8000360 <__libc_init_array+0x44>)
 8000330:	f000 f818 	bl	8000364 <_init>
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	2600      	movs	r6, #0
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
