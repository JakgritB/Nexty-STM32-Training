
Training_Lab3.1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000380  08000388  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000380  08000380  00001388  2**0
                  CONTENTS
  4 .ARM          00000000  08000380  08000380  00001388  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000380  08000388  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000380  08000380  00001380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000384  08000384  00001384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000388  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000388  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003b6  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000010e  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00001880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfde  00000000  00000000  00001903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000064a  00000000  00000000  0000f8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050bef  00000000  00000000  0000ff2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060b1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  00060b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00060bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000368 	.word	0x08000368

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000368 	.word	0x08000368

080001d8 <vdg_UART_RxByte>:
#define STM32F411xE
#include "stm32f4xx.h"

const uint32_t THRESHOLD = 1333333;

char vdg_UART_RxByte() {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
		while((USART2->SR & USART_SR_RXNE) == 0);
 80001dc:	bf00      	nop
 80001de:	4b07      	ldr	r3, [pc, #28]	@ (80001fc <vdg_UART_RxByte+0x24>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f003 0320 	and.w	r3, r3, #32
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d0f9      	beq.n	80001de <vdg_UART_RxByte+0x6>
		return USART2->DR;
 80001ea:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <vdg_UART_RxByte+0x24>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	b2db      	uxtb	r3, r3
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40004400 	.word	0x40004400

08000200 <main>:

int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000204:	4b2e      	ldr	r3, [pc, #184]	@ (80002c0 <main+0xc0>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a2d      	ldr	r2, [pc, #180]	@ (80002c0 <main+0xc0>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000210:	4b2b      	ldr	r3, [pc, #172]	@ (80002c0 <main+0xc0>)
 8000212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000214:	4a2a      	ldr	r2, [pc, #168]	@ (80002c0 <main+0xc0>)
 8000216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800021a:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);
 800021c:	4b29      	ldr	r3, [pc, #164]	@ (80002c4 <main+0xc4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a28      	ldr	r2, [pc, #160]	@ (80002c4 <main+0xc4>)
 8000222:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000226:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER2_Pos) + (0b10 << GPIO_MODER_MODER3_Pos);
 8000228:	4b26      	ldr	r3, [pc, #152]	@ (80002c4 <main+0xc4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a25      	ldr	r2, [pc, #148]	@ (80002c4 <main+0xc4>)
 800022e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000232:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 8000234:	4b23      	ldr	r3, [pc, #140]	@ (80002c4 <main+0xc4>)
 8000236:	6a1b      	ldr	r3, [r3, #32]
 8000238:	4a22      	ldr	r2, [pc, #136]	@ (80002c4 <main+0xc4>)
 800023a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800023e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL2_Pos) + (0b0111 << GPIO_AFRL_AFSEL3_Pos);
 8000240:	4b20      	ldr	r3, [pc, #128]	@ (80002c4 <main+0xc4>)
 8000242:	6a1b      	ldr	r3, [r3, #32]
 8000244:	4a1f      	ldr	r2, [pc, #124]	@ (80002c4 <main+0xc4>)
 8000246:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800024a:	6213      	str	r3, [r2, #32]

	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER5_Pos);
 800024c:	4b1d      	ldr	r3, [pc, #116]	@ (80002c4 <main+0xc4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a1c      	ldr	r2, [pc, #112]	@ (80002c4 <main+0xc4>)
 8000252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000256:	6013      	str	r3, [r2, #0]

	USART2->CR1 |= USART_CR1_UE;
 8000258:	4b1b      	ldr	r3, [pc, #108]	@ (80002c8 <main+0xc8>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a1a      	ldr	r2, [pc, #104]	@ (80002c8 <main+0xc8>)
 800025e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000262:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~ USART_CR1_M;
 8000264:	4b18      	ldr	r3, [pc, #96]	@ (80002c8 <main+0xc8>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a17      	ldr	r2, [pc, #92]	@ (80002c8 <main+0xc8>)
 800026a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800026e:	60d3      	str	r3, [r2, #12]
	USART2->CR2 &= ~ USART_CR2_STOP;
 8000270:	4b15      	ldr	r3, [pc, #84]	@ (80002c8 <main+0xc8>)
 8000272:	691b      	ldr	r3, [r3, #16]
 8000274:	4a14      	ldr	r2, [pc, #80]	@ (80002c8 <main+0xc8>)
 8000276:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800027a:	6113      	str	r3, [r2, #16]
	USART2->BRR = 139;
 800027c:	4b12      	ldr	r3, [pc, #72]	@ (80002c8 <main+0xc8>)
 800027e:	228b      	movs	r2, #139	@ 0x8b
 8000280:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;
 8000282:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <main+0xc8>)
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	4a10      	ldr	r2, [pc, #64]	@ (80002c8 <main+0xc8>)
 8000288:	f043 0308 	orr.w	r3, r3, #8
 800028c:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;
 800028e:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <main+0xc8>)
 8000290:	68db      	ldr	r3, [r3, #12]
 8000292:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <main+0xc8>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	60d3      	str	r3, [r2, #12]

	while(1) {
		if (vdg_UART_RxByte() == '1'){
 800029a:	f7ff ff9d 	bl	80001d8 <vdg_UART_RxByte>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b31      	cmp	r3, #49	@ 0x31
 80002a2:	d106      	bne.n	80002b2 <main+0xb2>
			GPIOA->ODR |= (GPIO_ODR_OD5);
 80002a4:	4b07      	ldr	r3, [pc, #28]	@ (80002c4 <main+0xc4>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a06      	ldr	r2, [pc, #24]	@ (80002c4 <main+0xc4>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6153      	str	r3, [r2, #20]
 80002b0:	e7f3      	b.n	800029a <main+0x9a>
		}
		else {
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 80002b2:	4b04      	ldr	r3, [pc, #16]	@ (80002c4 <main+0xc4>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a03      	ldr	r2, [pc, #12]	@ (80002c4 <main+0xc4>)
 80002b8:	f023 0320 	bic.w	r3, r3, #32
 80002bc:	6153      	str	r3, [r2, #20]
		if (vdg_UART_RxByte() == '1'){
 80002be:	e7ec      	b.n	800029a <main+0x9a>
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40020000 	.word	0x40020000
 80002c8:	40004400 	.word	0x40004400

080002cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002cc:	480d      	ldr	r0, [pc, #52]	@ (8000304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	@ (8000308 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <LoopForever+0xe>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000318 <LoopForever+0x16>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fa:	f000 f811 	bl	8000320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fe:	f7ff ff7f 	bl	8000200 <main>

08000302 <LoopForever>:

LoopForever:
  b LoopForever
 8000302:	e7fe      	b.n	8000302 <LoopForever>
  ldr   r0, =_estack
 8000304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000310:	08000388 	.word	0x08000388
  ldr r2, =_sbss
 8000314:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000318:	2000001c 	.word	0x2000001c

0800031c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC_IRQHandler>
	...

08000320 <__libc_init_array>:
 8000320:	b570      	push	{r4, r5, r6, lr}
 8000322:	4d0d      	ldr	r5, [pc, #52]	@ (8000358 <__libc_init_array+0x38>)
 8000324:	4c0d      	ldr	r4, [pc, #52]	@ (800035c <__libc_init_array+0x3c>)
 8000326:	1b64      	subs	r4, r4, r5
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	2600      	movs	r6, #0
 800032c:	42a6      	cmp	r6, r4
 800032e:	d109      	bne.n	8000344 <__libc_init_array+0x24>
 8000330:	4d0b      	ldr	r5, [pc, #44]	@ (8000360 <__libc_init_array+0x40>)
 8000332:	4c0c      	ldr	r4, [pc, #48]	@ (8000364 <__libc_init_array+0x44>)
 8000334:	f000 f818 	bl	8000368 <_init>
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	2600      	movs	r6, #0
 800033e:	42a6      	cmp	r6, r4
 8000340:	d105      	bne.n	800034e <__libc_init_array+0x2e>
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f855 3b04 	ldr.w	r3, [r5], #4
 8000348:	4798      	blx	r3
 800034a:	3601      	adds	r6, #1
 800034c:	e7ee      	b.n	800032c <__libc_init_array+0xc>
 800034e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000352:	4798      	blx	r3
 8000354:	3601      	adds	r6, #1
 8000356:	e7f2      	b.n	800033e <__libc_init_array+0x1e>
 8000358:	08000380 	.word	0x08000380
 800035c:	08000380 	.word	0x08000380
 8000360:	08000380 	.word	0x08000380
 8000364:	08000384 	.word	0x08000384

08000368 <_init>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr

08000374 <_fini>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr
