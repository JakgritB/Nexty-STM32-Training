
Training_LabFluke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000448  08000450  00001450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000448  08000448  00001450  2**0
                  CONTENTS
  4 .ARM          00000000  08000448  08000448  00001450  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000448  08000450  00001450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000448  08000448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800044c  0800044c  0000144c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000450  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000450  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000039f  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000f6  00000000  00000000  0000181f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00001918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfde  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006ac  00000000  00000000  0000f979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050bc3  00000000  00000000  00010025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  00060c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00060ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000430 	.word	0x08000430

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000430 	.word	0x08000430

080001d8 <vdg_UART_RxByte>:
#include <stdint.h>
#define STM32F411xE
#include "stm32f4xx.h"

char vdg_UART_RxByte(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	while ((USART2->SR & USART_SR_RXNE) == 0)
 80001dc:	bf00      	nop
 80001de:	4b07      	ldr	r3, [pc, #28]	@ (80001fc <vdg_UART_RxByte+0x24>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f003 0320 	and.w	r3, r3, #32
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d0f9      	beq.n	80001de <vdg_UART_RxByte+0x6>
		;
	return USART2->DR;
 80001ea:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <vdg_UART_RxByte+0x24>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	b2db      	uxtb	r3, r3
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40004400 	.word	0x40004400

08000200 <main>:

int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000204:	4b5e      	ldr	r3, [pc, #376]	@ (8000380 <main+0x180>)
 8000206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000208:	4a5d      	ldr	r2, [pc, #372]	@ (8000380 <main+0x180>)
 800020a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800020e:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000210:	4b5b      	ldr	r3, [pc, #364]	@ (8000380 <main+0x180>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000214:	4a5a      	ldr	r2, [pc, #360]	@ (8000380 <main+0x180>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800021c:	4b58      	ldr	r3, [pc, #352]	@ (8000380 <main+0x180>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000220:	4a57      	ldr	r2, [pc, #348]	@ (8000380 <main+0x180>)
 8000222:	f043 0302 	orr.w	r3, r3, #2
 8000226:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000228:	4b55      	ldr	r3, [pc, #340]	@ (8000380 <main+0x180>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022c:	4a54      	ldr	r2, [pc, #336]	@ (8000380 <main+0x180>)
 800022e:	f043 0304 	orr.w	r3, r3, #4
 8000232:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(GPIO_MODER_MODER3);
 8000234:	4b53      	ldr	r3, [pc, #332]	@ (8000384 <main+0x184>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a52      	ldr	r2, [pc, #328]	@ (8000384 <main+0x184>)
 800023a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800023e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b10 << GPIO_MODER_MODER3_Pos);
 8000240:	4b50      	ldr	r3, [pc, #320]	@ (8000384 <main+0x184>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a4f      	ldr	r2, [pc, #316]	@ (8000384 <main+0x184>)
 8000246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800024a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL3);
 800024c:	4b4d      	ldr	r3, [pc, #308]	@ (8000384 <main+0x184>)
 800024e:	6a1b      	ldr	r3, [r3, #32]
 8000250:	4a4c      	ldr	r2, [pc, #304]	@ (8000384 <main+0x184>)
 8000252:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000256:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0b0111 << GPIO_AFRL_AFSEL3_Pos);
 8000258:	4b4a      	ldr	r3, [pc, #296]	@ (8000384 <main+0x184>)
 800025a:	6a1b      	ldr	r3, [r3, #32]
 800025c:	4a49      	ldr	r2, [pc, #292]	@ (8000384 <main+0x184>)
 800025e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000262:	6213      	str	r3, [r2, #32]

	GPIOA->MODER &= ~(GPIO_MODER_MODER5);
 8000264:	4b47      	ldr	r3, [pc, #284]	@ (8000384 <main+0x184>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a46      	ldr	r2, [pc, #280]	@ (8000384 <main+0x184>)
 800026a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800026e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER5_Pos);
 8000270:	4b44      	ldr	r3, [pc, #272]	@ (8000384 <main+0x184>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a43      	ldr	r2, [pc, #268]	@ (8000384 <main+0x184>)
 8000276:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800027a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER7);
 800027c:	4b42      	ldr	r3, [pc, #264]	@ (8000388 <main+0x188>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a41      	ldr	r2, [pc, #260]	@ (8000388 <main+0x188>)
 8000282:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b01 << GPIO_MODER_MODER7_Pos);
 8000288:	4b3f      	ldr	r3, [pc, #252]	@ (8000388 <main+0x188>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a3e      	ldr	r2, [pc, #248]	@ (8000388 <main+0x188>)
 800028e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000292:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER8);
 8000294:	4b3b      	ldr	r3, [pc, #236]	@ (8000384 <main+0x184>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a3a      	ldr	r2, [pc, #232]	@ (8000384 <main+0x184>)
 800029a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800029e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << GPIO_MODER_MODER8_Pos);
 80002a0:	4b38      	ldr	r3, [pc, #224]	@ (8000384 <main+0x184>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a37      	ldr	r2, [pc, #220]	@ (8000384 <main+0x184>)
 80002a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER10);
 80002ac:	4b37      	ldr	r3, [pc, #220]	@ (800038c <main+0x18c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a36      	ldr	r2, [pc, #216]	@ (800038c <main+0x18c>)
 80002b2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80002b6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << GPIO_MODER_MODER10_Pos);
 80002b8:	4b34      	ldr	r3, [pc, #208]	@ (800038c <main+0x18c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a33      	ldr	r2, [pc, #204]	@ (800038c <main+0x18c>)
 80002be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER9);
 80002c4:	4b31      	ldr	r3, [pc, #196]	@ (800038c <main+0x18c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a30      	ldr	r2, [pc, #192]	@ (800038c <main+0x18c>)
 80002ca:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01 << GPIO_MODER_MODER9_Pos);
 80002d0:	4b2e      	ldr	r3, [pc, #184]	@ (800038c <main+0x18c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a2d      	ldr	r2, [pc, #180]	@ (800038c <main+0x18c>)
 80002d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002da:	6013      	str	r3, [r2, #0]

	USART2->CR1 |= USART_CR1_UE;
 80002dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000390 <main+0x190>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000390 <main+0x190>)
 80002e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002e6:	60d3      	str	r3, [r2, #12]
	USART2->BRR = 139;
 80002e8:	4b29      	ldr	r3, [pc, #164]	@ (8000390 <main+0x190>)
 80002ea:	228b      	movs	r2, #139	@ 0x8b
 80002ec:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_RE;
 80002ee:	4b28      	ldr	r3, [pc, #160]	@ (8000390 <main+0x190>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	4a27      	ldr	r2, [pc, #156]	@ (8000390 <main+0x190>)
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	60d3      	str	r3, [r2, #12]

	while (1) {
		if (vdg_UART_RxByte() == '1') {
 80002fa:	f7ff ff6d 	bl	80001d8 <vdg_UART_RxByte>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b31      	cmp	r3, #49	@ 0x31
 8000302:	d11e      	bne.n	8000342 <main+0x142>
			GPIOA->ODR |= (GPIO_ODR_OD5);    // LED เปิด
 8000304:	4b1f      	ldr	r3, [pc, #124]	@ (8000384 <main+0x184>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a1e      	ldr	r2, [pc, #120]	@ (8000384 <main+0x184>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(GPIO_ODR_OD7);    // A=1
 8000310:	4b1d      	ldr	r3, [pc, #116]	@ (8000388 <main+0x188>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a1c      	ldr	r2, [pc, #112]	@ (8000388 <main+0x188>)
 8000316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800031a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (GPIO_ODR_OD8);   // B=0 (แก้ไข)
 800031c:	4b19      	ldr	r3, [pc, #100]	@ (8000384 <main+0x184>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a18      	ldr	r2, [pc, #96]	@ (8000384 <main+0x184>)
 8000322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000326:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD10);  // C=0
 8000328:	4b18      	ldr	r3, [pc, #96]	@ (800038c <main+0x18c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a17      	ldr	r2, [pc, #92]	@ (800038c <main+0x18c>)
 800032e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000332:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD9);   // D=0
 8000334:	4b15      	ldr	r3, [pc, #84]	@ (800038c <main+0x18c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a14      	ldr	r2, [pc, #80]	@ (800038c <main+0x18c>)
 800033a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800033e:	6153      	str	r3, [r2, #20]
 8000340:	e7db      	b.n	80002fa <main+0xfa>
		} else {
			GPIOA->ODR &= ~(GPIO_ODR_OD5);
 8000342:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <main+0x184>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a0f      	ldr	r2, [pc, #60]	@ (8000384 <main+0x184>)
 8000348:	f023 0320 	bic.w	r3, r3, #32
 800034c:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(GPIO_ODR_OD7);
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <main+0x188>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <main+0x188>)
 8000354:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000358:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(GPIO_ODR_OD8);
 800035a:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <main+0x184>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a09      	ldr	r2, [pc, #36]	@ (8000384 <main+0x184>)
 8000360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000364:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD10);
 8000366:	4b09      	ldr	r3, [pc, #36]	@ (800038c <main+0x18c>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a08      	ldr	r2, [pc, #32]	@ (800038c <main+0x18c>)
 800036c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000370:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(GPIO_ODR_OD9);
 8000372:	4b06      	ldr	r3, [pc, #24]	@ (800038c <main+0x18c>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a05      	ldr	r2, [pc, #20]	@ (800038c <main+0x18c>)
 8000378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800037c:	6153      	str	r3, [r2, #20]
		if (vdg_UART_RxByte() == '1') {
 800037e:	e7bc      	b.n	80002fa <main+0xfa>
 8000380:	40023800 	.word	0x40023800
 8000384:	40020000 	.word	0x40020000
 8000388:	40020800 	.word	0x40020800
 800038c:	40020400 	.word	0x40020400
 8000390:	40004400 	.word	0x40004400

08000394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000394:	480d      	ldr	r0, [pc, #52]	@ (80003cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000396:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000398:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480c      	ldr	r0, [pc, #48]	@ (80003d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800039e:	490d      	ldr	r1, [pc, #52]	@ (80003d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a0:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <LoopForever+0xe>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	@ (80003dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b4:	4c0a      	ldr	r4, [pc, #40]	@ (80003e0 <LoopForever+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c2:	f000 f811 	bl	80003e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c6:	f7ff ff1b 	bl	8000200 <main>

080003ca <LoopForever>:

LoopForever:
  b LoopForever
 80003ca:	e7fe      	b.n	80003ca <LoopForever>
  ldr   r0, =_estack
 80003cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d8:	08000450 	.word	0x08000450
  ldr r2, =_sbss
 80003dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e0:	2000001c 	.word	0x2000001c

080003e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC_IRQHandler>
	...

080003e8 <__libc_init_array>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000420 <__libc_init_array+0x38>)
 80003ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000424 <__libc_init_array+0x3c>)
 80003ee:	1b64      	subs	r4, r4, r5
 80003f0:	10a4      	asrs	r4, r4, #2
 80003f2:	2600      	movs	r6, #0
 80003f4:	42a6      	cmp	r6, r4
 80003f6:	d109      	bne.n	800040c <__libc_init_array+0x24>
 80003f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000428 <__libc_init_array+0x40>)
 80003fa:	4c0c      	ldr	r4, [pc, #48]	@ (800042c <__libc_init_array+0x44>)
 80003fc:	f000 f818 	bl	8000430 <_init>
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	10a4      	asrs	r4, r4, #2
 8000404:	2600      	movs	r6, #0
 8000406:	42a6      	cmp	r6, r4
 8000408:	d105      	bne.n	8000416 <__libc_init_array+0x2e>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000410:	4798      	blx	r3
 8000412:	3601      	adds	r6, #1
 8000414:	e7ee      	b.n	80003f4 <__libc_init_array+0xc>
 8000416:	f855 3b04 	ldr.w	r3, [r5], #4
 800041a:	4798      	blx	r3
 800041c:	3601      	adds	r6, #1
 800041e:	e7f2      	b.n	8000406 <__libc_init_array+0x1e>
 8000420:	08000448 	.word	0x08000448
 8000424:	08000448 	.word	0x08000448
 8000428:	08000448 	.word	0x08000448
 800042c:	0800044c 	.word	0x0800044c

08000430 <_init>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr

0800043c <_fini>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr
